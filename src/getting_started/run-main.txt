[INFO] Scanning for projects...
[INFO] 
[INFO] -------------------< jp.co.future:uroborosql-sample >-------------------
[INFO] Building uroboroSQL Sample Application 0.13.0
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[INFO] --- maven-antrun-plugin:1.8:run (eclipse-encoding-setting) @ uroborosql-sample ---
[INFO] Executing tasks

main:
[INFO] Executed tasks
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ uroborosql-sample ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 13 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ uroborosql-sample ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- exec-maven-plugin:1.5.0:java (runMain) @ uroborosql-sample ---
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/ddl, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/ddl/create_tables.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department/insert_department.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department/select_department.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/insert_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/select_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/update_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation/insert_dept_emp.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation/select_dept_emp.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/setup, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/setup/insert_data.sql, watch : false, remove : false
[DEBUG] Enum [name:CLS_GENDER_MALE, value:M] added to parameter.
[DEBUG] Enum [name:CLS_GENDER_FEMALE, value:F] added to parameter.
[DEBUG] Enum [name:CLS_GENDER_OTHER, value:O] added to parameter.
[INFO ] SqlFileApiSample start.
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/ddl/create_tables.sql]
[DEBUG] Executed SQL[
-- employee
drop table if exists employee cascade;
create table employee (
  emp_no number(6) auto_increment
  , first_name varchar(20) not null
  , last_name varchar(20) not null
  , birth_date date not null
  , gender char(1) not null
  , lock_version number(10) not null default 0
  , constraint employee_PKC primary key (emp_no)
) ;
-- dept_emp
drop table if exists dept_emp cascade;
create table dept_emp (
  emp_no number(6) not null
  , dept_no number(4) not null
  , constraint dept_emp_PKC primary key (emp_no,dept_no)
) ;
-- department
drop table if exists department cascade;
create table department (
  dept_no number(4) auto_increment
  , dept_name varchar(100) not null
  , lock_version number(10) not null default 0
  , constraint department_PKC primary key (dept_no)
) ;
comment on table employee is 'employee';
comment on column employee.emp_no is 'emp_no';
comment on column employee.first_name is 'first_name';
comment on column employee.last_name is 'last_name';
comment on column employee.birth_date is 'birth_date';
comment on column employee.gender is 'gender	 ''F''emale/''M''ale/''O''ther';
comment on column employee.lock_version is 'lock_version';
comment on table dept_emp is 'dept_emp';
comment on column dept_emp.emp_no is 'emp_no';
comment on column dept_emp.dept_no is 'dept_no';
comment on table department is 'department';
comment on column department.dept_no is 'dept_no';
comment on column department.dept_name is 'dept_name';
comment on column department.lock_version is 'lock_version'
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [ddl/create_tables] : [00:00:00.029]
[INFO ] ddl/create_tables count=0
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/setup/insert_data.sql]
[DEBUG] Executed SQL[
insert into department (dept_name) values ('sales');
insert into department (dept_name) values ('export');
insert into department (dept_name) values ('accounting');
insert into department (dept_name) values ('personnel');
insert into employee (first_name, last_name, birth_date, gender) values ('Bob', 'Smith', '1970-01-02', 'M');
insert into employee (first_name, last_name, birth_date, gender) values ('Susan', 'Davis', '1969-02-10', 'F');
insert into employee (first_name, last_name, birth_date, gender) values ('John', 'Wilson', '1982-05-08', 'M');
insert into employee (first_name, last_name, birth_date, gender) values ('Sharon', 'Johnson', '1990-01-20', 'F');
insert into employee (first_name, last_name, birth_date, gender) values ('Stephen', 'Taylor', '2003-12-31', 'M');
insert into dept_emp (emp_no, dept_no) values (1, 1);
insert into dept_emp (emp_no, dept_no) values (2, 1);
insert into dept_emp (emp_no, dept_no) values (3, 2);
insert into dept_emp (emp_no, dept_no) values (4, 3);
insert into dept_emp (emp_no, dept_no) values (5, 4)
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [setup/insert_data] : [00:00:00.006]
[INFO ] setup/insert_data count=1
[INFO ] select department data (collect)
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/department/select_department.sql]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.009]
[INFO ] {deptNo=1,deptName=sales,lockVersion=0}
[INFO ] {deptNo=2,deptName=export,lockVersion=0}
[INFO ] {deptNo=3,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=4,deptName=personnel,lockVersion=0}
[INFO ] select department data (collect) set param(dept_no=1)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[true], Parameter:[deptNo:[1]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept
where
dept.dept_no	=	?/*deptNo*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptNo], Value[1], Class[Integer]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.003]
[INFO ] {deptNo=1,deptName=sales,lockVersion=0}
[INFO ] select first employee data.(Optional)
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/employee/select_employee.sql]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] select employee data (stream)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=2,firstName=Susan,lastName=Davis,birthDate=1969-02-10T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=3,firstName=John,lastName=Wilson,birthDate=1982-05-08T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=4,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=5,firstName=Stephen,lastName=Taylor,birthDate=2003-12-31T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[true], Parameter:[birthDateFrom:[1990,1,1]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.birth_date	>=	?/*birthDateFrom*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[birthDateFrom], Value[1990-01-01], Class[LocalDate]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=4,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=5,firstName=Stephen,lastName=Taylor,birthDate=2003-12-31T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[true], Parameter:[genderList:[{F}]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.gender		IN	(?)/*genderList*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[genderList], Value[[F]], Class[ArrayList]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=2,firstName=Susan,lastName=Davis,birthDate=1969-02-10T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=4,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[true], Parameter:[female:[true],female:[true]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.gender		=	'F'/*#CLS_GENDER_FEMALE*/

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=2,firstName=Susan,lastName=Davis,birthDate=1969-02-10T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=4,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] select employee data.
[DEBUG] Executed SQL[
select * from employee
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=2,firstName=Susan,lastName=Davis,birthDate=1969-02-10T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=3,firstName=John,lastName=Wilson,birthDate=1982-05-08T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=4,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=5,firstName=Stephen,lastName=Taylor,birthDate=2003-12-31T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] select employee data with param.
[DEBUG] Executed SQL[
select * from employee where emp_no = ?/*empNo*/
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Integer]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] select employee data (collect) set param(emp_no=1)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[true], Parameter:[empNo:[1]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.emp_no		=	?/*empNo*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/employee/update_employee.sql]
[DEBUG] Evaluation Expression:[firstName != null], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[lastName != null], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[birthDate != null], Result:[true], Parameter:[birthDate:[1971,12,1]]
[DEBUG] Evaluation Expression:[gender != null], Result:[false], Parameter:[gender:[null]]
[DEBUG] Executed SQL[
update /* employee/update_employee */
	employee
set
	birth_date		=	?/*birthDate*/			-- birth_date
,	lock_version	=	lock_version	+	1	-- lock_version
where
	emp_no	=	?/*empNo*/
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[birthDate], Value[1971-12-01], Class[LocalDate]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [employee/update_employee] : [00:00:00.001]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[true], Parameter:[empNo:[1]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.emp_no		=	?/*empNo*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1971-12-01T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=1}
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[true], Parameter:[empNo:[1]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp
where
emp.emp_no		=	?/*empNo*/

]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=1,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] select department data (stream)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[INFO ] {deptNo=1,deptName=sales,lockVersion=0}
[INFO ] {deptNo=2,deptName=export,lockVersion=0}
[INFO ] {deptNo=3,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=4,deptName=personnel,lockVersion=0}
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/department/insert_department.sql]
[DEBUG] Executed SQL[
insert /* department/insert_department */
into
	department
(
	dept_name
,	lock_version
) values (
	?/*deptName*/
,	0
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptName], Value[production], Class[String]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [department/insert_department] : [00:00:00.000]
[INFO ] select department data (stream)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[INFO ] {deptNo=1,deptName=sales,lockVersion=0}
[INFO ] {deptNo=2,deptName=export,lockVersion=0}
[INFO ] {deptNo=3,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=4,deptName=personnel,lockVersion=0}
[INFO ] {deptNo=5,deptName=production,lockVersion=0}
[INFO ] select department data (stream)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[INFO ] {deptNo=1,deptName=sales,lockVersion=0}
[INFO ] {deptNo=2,deptName=export,lockVersion=0}
[INFO ] {deptNo=3,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=4,deptName=personnel,lockVersion=0}
[DEBUG] Executed SQL[
delete from department where dept_no = ?/*deptNo*/
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptNo], Value[1], Class[Integer]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] select department data (stream)
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[INFO ] {deptNo=2,deptName=export,lockVersion=0}
[INFO ] {deptNo=3,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=4,deptName=personnel,lockVersion=0}
[INFO ] delete tables with sql literal
[DEBUG] Executed SQL[
delete from department
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete department count=4
[DEBUG] Executed SQL[
delete from employee
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete employee count=5
[DEBUG] Executed SQL[
delete from dept_emp
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete dept_emp count=5
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/relation/select_dept_emp.sql]
[DEBUG] Evaluation Expression:[empNo != null], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[deptNo != null], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Executed SQL[
select /* relation/select_dept_emp */
	emp_no	as	emp_no	-- emp_no
,	dept_no	as	dept_no	-- dept_no
from
	dept_emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [relation/select_dept_emp] : [00:00:00.000]
[INFO ] department/insert_department batch insert.
[DEBUG] Executed SQL[
insert /* department/insert_department */
into
	department
(
	dept_name
,	lock_version
) values (
	?/*deptName*/
,	0
)
]
[DEBUG] 4 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [department/insert_department] : [00:00:00.002]
[INFO ] department/insert_department count=4
[INFO ] employee/insert_employee batch insert.
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/employee/insert_employee.sql]
[DEBUG] Executed SQL[
insert /* employee/insert_employee */
into
	employee
(
	first_name
,	last_name
,	birth_date
,	gender
,	lock_version
) values (
	?/*firstName*/
,	?/*lastName*/
,	?/*birthDate*/
,	?/*gender*/
,	0
)
]
[DEBUG] 2 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [employee/insert_employee] : [00:00:00.000]
[DEBUG] Executed SQL[
insert /* employee/insert_employee */
into
	employee
(
	first_name
,	last_name
,	birth_date
,	gender
,	lock_version
) values (
	?/*firstName*/
,	?/*lastName*/
,	?/*birthDate*/
,	?/*gender*/
,	0
)
]
[DEBUG] 2 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [employee/insert_employee] : [00:00:00.000]
[DEBUG] Executed SQL[
insert /* employee/insert_employee */
into
	employee
(
	first_name
,	last_name
,	birth_date
,	gender
,	lock_version
) values (
	?/*firstName*/
,	?/*lastName*/
,	?/*birthDate*/
,	?/*gender*/
,	0
)
]
[DEBUG] 1 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [employee/insert_employee] : [00:00:00.000]
[INFO ] employee/insert_employee count=5
[INFO ] relation/insert_dept_emp batch insert.
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/relation/insert_dept_emp.sql]
[DEBUG] Executed SQL[
insert /* relation/insert_dept_emp */
into
	dept_emp
(
	emp_no
,	dept_no
) values (
	?/*empNo*/
,	?/*deptNo*/
)
]
[DEBUG] 5 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [relation/insert_dept_emp] : [00:00:00.001]
[INFO ] batch execute.
[INFO ] relation/insert_dept_emp count=5
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptNo)], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(deptName)], Result:[false], Parameter:[deptName:[null]]
[DEBUG] Executed SQL[
select /* department/select_department */
	dept.dept_no		as	dept_no
,	dept.dept_name		as	dept_name
,	dept.lock_version	as	lock_version
from
	department	dept

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [department/select_department] : [00:00:00.000]
[INFO ] {deptNo=6,deptName=sales,lockVersion=0}
[INFO ] {deptNo=7,deptName=export,lockVersion=0}
[INFO ] {deptNo=8,deptName=accounting,lockVersion=0}
[INFO ] {deptNo=9,deptName=personnel,lockVersion=0}
[DEBUG] Evaluation Expression:[SF.isNotEmpty(empNo)], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(firstName)], Result:[false], Parameter:[firstName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(lastName)], Result:[false], Parameter:[lastName:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateFrom)], Result:[false], Parameter:[birthDateFrom:[null]]
[DEBUG] Evaluation Expression:[SF.isNotEmpty(birthDateTo)], Result:[false], Parameter:[birthDateTo:[null]]
[DEBUG] Evaluation Expression:[genderList != null], Result:[false], Parameter:[genderList:[null]]
[DEBUG] Evaluation Expression:[female != null and female], Result:[false], Parameter:[female:[null],female:[null]]
[DEBUG] Executed SQL[
select /* employee/select_employee */
	emp.emp_no			as	emp_no
,	emp.first_name		as	first_name
,	emp.last_name		as	last_name
,	emp.birth_date		as	birth_date
,	emp.gender			as	gender
,	emp.lock_version	as	lock_version
from
	employee	emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [employee/select_employee] : [00:00:00.000]
[INFO ] {empNo=6,firstName=Bob,lastName=Smith,birthDate=1970-01-02T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=7,firstName=Susan,lastName=Davis,birthDate=1969-02-10T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=8,firstName=John,lastName=Wilson,birthDate=1982-05-08T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[INFO ] {empNo=9,firstName=Sharon,lastName=Johnson,birthDate=1990-01-20T00:00+09:00[Asia/Tokyo],gender=F,lockVersion=0}
[INFO ] {empNo=10,firstName=Stephen,lastName=Taylor,birthDate=2003-12-31T00:00+09:00[Asia/Tokyo],gender=M,lockVersion=0}
[DEBUG] Evaluation Expression:[empNo != null], Result:[false], Parameter:[empNo:[null]]
[DEBUG] Evaluation Expression:[deptNo != null], Result:[false], Parameter:[deptNo:[null]]
[DEBUG] Executed SQL[
select /* relation/select_dept_emp */
	emp_no	as	emp_no	-- emp_no
,	dept_no	as	dept_no	-- dept_no
from
	dept_emp

]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [relation/select_dept_emp] : [00:00:00.000]
[INFO ] {empNo=6,deptNo=6}
[INFO ] {empNo=7,deptNo=6}
[INFO ] {empNo=8,deptNo=7}
[INFO ] {empNo=9,deptNo=8}
[INFO ] {empNo=10,deptNo=9}
[INFO ] SqlFileApiSample end.
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/ddl, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/ddl/create_tables.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department/insert_department.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/department/select_department.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/insert_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/select_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/employee/update_employee.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation/insert_dept_emp.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/relation/select_dept_emp.sql, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/setup, watch : false, remove : false
[DEBUG] traverse start. path : /uroborosql-sample/target/classes/sql/setup/insert_data.sql, watch : false, remove : false
[DEBUG] Enum [name:CLS_GENDER_MALE, value:M] added to parameter.
[DEBUG] Enum [name:CLS_GENDER_FEMALE, value:F] added to parameter.
[DEBUG] Enum [name:CLS_GENDER_OTHER, value:O] added to parameter.
[INFO ] EntityApiSample start.
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/ddl/create_tables.sql]
[DEBUG] Executed SQL[
-- employee
drop table if exists employee cascade;
create table employee (
  emp_no number(6) auto_increment
  , first_name varchar(20) not null
  , last_name varchar(20) not null
  , birth_date date not null
  , gender char(1) not null
  , lock_version number(10) not null default 0
  , constraint employee_PKC primary key (emp_no)
) ;
-- dept_emp
drop table if exists dept_emp cascade;
create table dept_emp (
  emp_no number(6) not null
  , dept_no number(4) not null
  , constraint dept_emp_PKC primary key (emp_no,dept_no)
) ;
-- department
drop table if exists department cascade;
create table department (
  dept_no number(4) auto_increment
  , dept_name varchar(100) not null
  , lock_version number(10) not null default 0
  , constraint department_PKC primary key (dept_no)
) ;
comment on table employee is 'employee';
comment on column employee.emp_no is 'emp_no';
comment on column employee.first_name is 'first_name';
comment on column employee.last_name is 'last_name';
comment on column employee.birth_date is 'birth_date';
comment on column employee.gender is 'gender	 ''F''emale/''M''ale/''O''ther';
comment on column employee.lock_version is 'lock_version';
comment on table dept_emp is 'dept_emp';
comment on column dept_emp.emp_no is 'emp_no';
comment on column dept_emp.dept_no is 'dept_no';
comment on table department is 'department';
comment on column department.dept_no is 'dept_no';
comment on column department.dept_name is 'dept_name';
comment on column department.lock_version is 'lock_version'
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [ddl/create_tables] : [00:00:00.015]
[INFO ] ddl/create_tables count=0
[DEBUG] Loaded SQL template.[/uroborosql-sample/target/classes/sql/setup/insert_data.sql]
[DEBUG] Executed SQL[
insert into department (dept_name) values ('sales');
insert into department (dept_name) values ('export');
insert into department (dept_name) values ('accounting');
insert into department (dept_name) values ('personnel');
insert into employee (first_name, last_name, birth_date, gender) values ('Bob', 'Smith', '1970-01-02', 'M');
insert into employee (first_name, last_name, birth_date, gender) values ('Susan', 'Davis', '1969-02-10', 'F');
insert into employee (first_name, last_name, birth_date, gender) values ('John', 'Wilson', '1982-05-08', 'M');
insert into employee (first_name, last_name, birth_date, gender) values ('Sharon', 'Johnson', '1990-01-20', 'F');
insert into employee (first_name, last_name, birth_date, gender) values ('Stephen', 'Taylor', '2003-12-31', 'M');
insert into dept_emp (emp_no, dept_no) values (1, 1);
insert into dept_emp (emp_no, dept_no) values (2, 1);
insert into dept_emp (emp_no, dept_no) values (3, 2);
insert into dept_emp (emp_no, dept_no) values (4, 3);
insert into dept_emp (emp_no, dept_no) values (5, 4)
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [setup/insert_data] : [00:00:00.015]
[INFO ] setup/insert_data count=1
[INFO ] select department data (collect)
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=1, deptName=sales, lockVersion=0]
[INFO ] Department [deptNo=2, deptName=export, lockVersion=0]
[INFO ] Department [deptNo=3, deptName=accounting, lockVersion=0]
[INFO ] Department [deptNo=4, deptName=personnel, lockVersion=0]
[INFO ] select department data (collect) set param(dept_no=1)
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
WHERE
	"DEPT_NO" = ?/*deptNo.value*/
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptNo.value], Value[1], Class[Integer]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=1, deptName=sales, lockVersion=0]
[INFO ] select first employee data.(Optional)
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=1, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[INFO ] select employee data (stream)
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=1, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[INFO ] Employee [empNo=2, firstName=Susan, lastName=Davis, birthDate=1969-02-10, gender=F, lockVersion=0]
[INFO ] Employee [empNo=3, firstName=John, lastName=Wilson, birthDate=1982-05-08, gender=M, lockVersion=0]
[INFO ] Employee [empNo=4, firstName=Sharon, lastName=Johnson, birthDate=1990-01-20, gender=F, lockVersion=0]
[INFO ] Employee [empNo=5, firstName=Stephen, lastName=Taylor, birthDate=2003-12-31, gender=M, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
WHERE
	"BIRTH_DATE" >= ?/*birthDate.value*/
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[birthDate.value], Value[1990-01-01], Class[LocalDate]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=4, firstName=Sharon, lastName=Johnson, birthDate=1990-01-20, gender=F, lockVersion=0]
[INFO ] Employee [empNo=5, firstName=Stephen, lastName=Taylor, birthDate=2003-12-31, gender=M, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
WHERE
	"GENDER" IN (?)/*gender.valueList*/
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[gender.valueList], Value[[F]], Class[ArrayList]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=2, firstName=Susan, lastName=Davis, birthDate=1969-02-10, gender=F, lockVersion=0]
[INFO ] Employee [empNo=4, firstName=Sharon, lastName=Johnson, birthDate=1990-01-20, gender=F, lockVersion=0]
[INFO ] select employee data (collect) set param(emp_no=1)
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
WHERE
	"EMP_NO" = ?/*empNo*/
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=1, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[DEBUG] Executed SQL[
UPDATE /* mapping @ Employee */ "PUBLIC"."EMPLOYEE" SET 
	  "FIRST_NAME" = ?/*firstName*/	-- first_name
	, "LAST_NAME" = ?/*lastName*/	-- last_name
	, "BIRTH_DATE" = ?/*birthDate*/	-- birth_date
	, "GENDER" = ?/*gender*/	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION" = ?/*lockVersion*/ + 1	-- lock_version
WHERE
	    "EMP_NO" = ?/*empNo*/
	AND "LOCK_VERSION" = ?/*lockVersion*/
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[firstName], Value[Bob], Class[String]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[lastName], Value[Smith], Class[String]]
[DEBUG] Set the parameter.[INDEX[3], Parameter name[birthDate], Value[1971-12-01], Class[LocalDate]]
[DEBUG] Set the parameter.[INDEX[4], Parameter name[gender], Value[M], Class[Gender]]
[DEBUG] Set the parameter.[INDEX[5], Parameter name[lockVersion], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[6], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Set the parameter.[INDEX[7], Parameter name[lockVersion], Value[0], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] update employee count=1
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
WHERE
	"EMP_NO" = ?/*empNo*/
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=1, firstName=Bob, lastName=Smith, birthDate=1971-12-01, gender=M, lockVersion=1]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
WHERE
	"EMP_NO" = ?/*empNo*/
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo], Value[1], Class[Long]]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=1, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[INFO ] select department data (stream)
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=1, deptName=sales, lockVersion=0]
[INFO ] Department [deptNo=2, deptName=export, lockVersion=0]
[INFO ] Department [deptNo=3, deptName=accounting, lockVersion=0]
[INFO ] Department [deptNo=4, deptName=personnel, lockVersion=0]
[DEBUG] Executed SQL[
INSERT /* mapping @ Department */ INTO "PUBLIC"."DEPARTMENT"(
	  "DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*deptName*/
	, ?/*lockVersion*/
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptName], Value[production], Class[String]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[lockVersion], Value[0], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.001]
[INFO ] insert department count=1
[INFO ] select department data (stream)
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=1, deptName=sales, lockVersion=0]
[INFO ] Department [deptNo=2, deptName=export, lockVersion=0]
[INFO ] Department [deptNo=3, deptName=accounting, lockVersion=0]
[INFO ] Department [deptNo=4, deptName=personnel, lockVersion=0]
[INFO ] Department [deptNo=5, deptName=production, lockVersion=0]
[INFO ] delete tables with sql literal
[DEBUG] Executed SQL[
delete from department
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.002]
[INFO ] delete department count=4
[DEBUG] Executed SQL[
delete from employee
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.005]
[INFO ] delete employee count=5
[DEBUG] Executed SQL[
delete from dept_emp
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete dept_emp count=5
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
SELECT /* mapping @ DeptEmp */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
FROM "PUBLIC"."DEPT_EMP"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
	, "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] department batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ Department */ INTO "PUBLIC"."DEPARTMENT"(
	  "DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*deptName*/
	, ?/*lockVersion*/
)
]
[DEBUG] 5 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [null] : [00:00:00.034]
[INFO ] department count=5
[INFO ] employee batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ Employee */ INTO "PUBLIC"."EMPLOYEE"(
	  "FIRST_NAME"	-- first_name
	, "LAST_NAME"	-- last_name
	, "BIRTH_DATE"	-- birth_date
	, "GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*firstName*/
	, ?/*lastName*/
	, ?/*birthDate*/
	, ?/*gender*/
	, ?/*lockVersion*/
)
]
[DEBUG] 2 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
INSERT /* mapping @ Employee */ INTO "PUBLIC"."EMPLOYEE"(
	  "FIRST_NAME"	-- first_name
	, "LAST_NAME"	-- last_name
	, "BIRTH_DATE"	-- birth_date
	, "GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*firstName*/
	, ?/*lastName*/
	, ?/*birthDate*/
	, ?/*gender*/
	, ?/*lockVersion*/
)
]
[DEBUG] 1 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] employee count=3
[INFO ] dept_emp batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ DeptEmp */ INTO "PUBLIC"."DEPT_EMP"(
	  "EMP_NO"	-- emp_no
	, "DEPT_NO"	-- dept_no
) VALUES (
	  ?/*empNo*/
	, ?/*deptNo*/
)
]
[DEBUG] 5 items Added for batch process.
[DEBUG] Execute batch process.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] dept_emp count=5
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=6, deptName=sales, lockVersion=0]
[INFO ] Department [deptNo=7, deptName=export, lockVersion=0]
[INFO ] Department [deptNo=8, deptName=accounting, lockVersion=0]
[INFO ] Department [deptNo=9, deptName=personnel, lockVersion=0]
[INFO ] Department [deptNo=10, deptName=production, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=6, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[INFO ] Employee [empNo=7, firstName=Susan, lastName=Davis, birthDate=1969-02-10, gender=F, lockVersion=0]
[INFO ] Employee [empNo=8, firstName=John, lastName=Wilson, birthDate=1982-05-08, gender=M, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ DeptEmp */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
FROM "PUBLIC"."DEPT_EMP"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
	, "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] DeptEmp [deptNo=6, empNo=6]
[INFO ] DeptEmp [deptNo=7, empNo=6]
[INFO ] DeptEmp [deptNo=8, empNo=7]
[INFO ] DeptEmp [deptNo=9, empNo=7]
[INFO ] DeptEmp [deptNo=10, empNo=8]
[INFO ] delete tables with sql literal
[DEBUG] Executed SQL[
delete from department
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete department count=4
[DEBUG] Executed SQL[
delete from employee
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete employee count=5
[DEBUG] Executed SQL[
delete from dept_emp
]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] delete dept_emp count=5
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
SELECT /* mapping @ DeptEmp */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
FROM "PUBLIC"."DEPT_EMP"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
	, "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] department batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ Department */ INTO "PUBLIC"."DEPARTMENT"(
	  "DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*deptName$0*/
	, ?/*lockVersion$0*/
),
(
	  ?/*deptName$1*/
	, ?/*lockVersion$1*/
),
(
	  ?/*deptName$2*/
	, ?/*lockVersion$2*/
),
(
	  ?/*deptName$3*/
	, ?/*lockVersion$3*/
),
(
	  ?/*deptName$4*/
	, ?/*lockVersion$4*/
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[deptName$0], Value[sales], Class[String]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[lockVersion$0], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[3], Parameter name[deptName$1], Value[export], Class[String]]
[DEBUG] Set the parameter.[INDEX[4], Parameter name[lockVersion$1], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[5], Parameter name[deptName$2], Value[accounting], Class[String]]
[DEBUG] Set the parameter.[INDEX[6], Parameter name[lockVersion$2], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[7], Parameter name[deptName$3], Value[personnel], Class[String]]
[DEBUG] Set the parameter.[INDEX[8], Parameter name[lockVersion$3], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[9], Parameter name[deptName$4], Value[production], Class[String]]
[DEBUG] Set the parameter.[INDEX[10], Parameter name[lockVersion$4], Value[0], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] department count=5
[INFO ] employee batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ Employee */ INTO "PUBLIC"."EMPLOYEE"(
	  "FIRST_NAME"	-- first_name
	, "LAST_NAME"	-- last_name
	, "BIRTH_DATE"	-- birth_date
	, "GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*firstName$0*/
	, ?/*lastName$0*/
	, ?/*birthDate$0*/
	, ?/*gender$0*/
	, ?/*lockVersion$0*/
),
(
	  ?/*firstName$1*/
	, ?/*lastName$1*/
	, ?/*birthDate$1*/
	, ?/*gender$1*/
	, ?/*lockVersion$1*/
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[firstName$0], Value[Bob], Class[String]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[lastName$0], Value[Smith], Class[String]]
[DEBUG] Set the parameter.[INDEX[3], Parameter name[birthDate$0], Value[1970-01-02], Class[LocalDate]]
[DEBUG] Set the parameter.[INDEX[4], Parameter name[gender$0], Value[M], Class[Gender]]
[DEBUG] Set the parameter.[INDEX[5], Parameter name[lockVersion$0], Value[0], Class[Long]]
[DEBUG] Set the parameter.[INDEX[6], Parameter name[firstName$1], Value[Susan], Class[String]]
[DEBUG] Set the parameter.[INDEX[7], Parameter name[lastName$1], Value[Davis], Class[String]]
[DEBUG] Set the parameter.[INDEX[8], Parameter name[birthDate$1], Value[1969-02-10], Class[LocalDate]]
[DEBUG] Set the parameter.[INDEX[9], Parameter name[gender$1], Value[F], Class[Gender]]
[DEBUG] Set the parameter.[INDEX[10], Parameter name[lockVersion$1], Value[0], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[DEBUG] Executed SQL[
INSERT /* mapping @ Employee */ INTO "PUBLIC"."EMPLOYEE"(
	  "FIRST_NAME"	-- first_name
	, "LAST_NAME"	-- last_name
	, "BIRTH_DATE"	-- birth_date
	, "GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	-- lock_version
) VALUES (
	  ?/*firstName$0*/
	, ?/*lastName$0*/
	, ?/*birthDate$0*/
	, ?/*gender$0*/
	, ?/*lockVersion$0*/
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[firstName$0], Value[John], Class[String]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[lastName$0], Value[Wilson], Class[String]]
[DEBUG] Set the parameter.[INDEX[3], Parameter name[birthDate$0], Value[1982-05-08], Class[LocalDate]]
[DEBUG] Set the parameter.[INDEX[4], Parameter name[gender$0], Value[M], Class[Gender]]
[DEBUG] Set the parameter.[INDEX[5], Parameter name[lockVersion$0], Value[0], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] employee count=3
[INFO ] dept_emp batch insert.
[DEBUG] Executed SQL[
INSERT /* mapping @ DeptEmp */ INTO "PUBLIC"."DEPT_EMP"(
	  "EMP_NO"	-- emp_no
	, "DEPT_NO"	-- dept_no
) VALUES (
	  ?/*empNo$0*/
	, ?/*deptNo$0*/
),
(
	  ?/*empNo$1*/
	, ?/*deptNo$1*/
),
(
	  ?/*empNo$2*/
	, ?/*deptNo$2*/
),
(
	  ?/*empNo$3*/
	, ?/*deptNo$3*/
),
(
	  ?/*empNo$4*/
	, ?/*deptNo$4*/
)
]
[DEBUG] Set the parameter.[INDEX[1], Parameter name[empNo$0], Value[9], Class[Long]]
[DEBUG] Set the parameter.[INDEX[2], Parameter name[deptNo$0], Value[11], Class[Long]]
[DEBUG] Set the parameter.[INDEX[3], Parameter name[empNo$1], Value[9], Class[Long]]
[DEBUG] Set the parameter.[INDEX[4], Parameter name[deptNo$1], Value[12], Class[Long]]
[DEBUG] Set the parameter.[INDEX[5], Parameter name[empNo$2], Value[10], Class[Long]]
[DEBUG] Set the parameter.[INDEX[6], Parameter name[deptNo$2], Value[13], Class[Long]]
[DEBUG] Set the parameter.[INDEX[7], Parameter name[empNo$3], Value[10], Class[Long]]
[DEBUG] Set the parameter.[INDEX[8], Parameter name[deptNo$3], Value[14], Class[Long]]
[DEBUG] Set the parameter.[INDEX[9], Parameter name[empNo$4], Value[11], Class[Long]]
[DEBUG] Set the parameter.[INDEX[10], Parameter name[deptNo$4], Value[15], Class[Long]]
[DEBUG] Execute update SQL.
[DEBUG] SQL execution time [null] : [00:00:00.001]
[INFO ] dept_emp count=5
[DEBUG] Executed SQL[
SELECT /* mapping @ Department */
	  "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
	, "DEPT_NAME"	AS	"DEPT_NAME"	-- dept_name
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."DEPARTMENT"
ORDER BY
	  "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Department [deptNo=11, deptName=sales, lockVersion=0]
[INFO ] Department [deptNo=12, deptName=export, lockVersion=0]
[INFO ] Department [deptNo=13, deptName=accounting, lockVersion=0]
[INFO ] Department [deptNo=14, deptName=personnel, lockVersion=0]
[INFO ] Department [deptNo=15, deptName=production, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ Employee */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "FIRST_NAME"	AS	"FIRST_NAME"	-- first_name
	, "LAST_NAME"	AS	"LAST_NAME"	-- last_name
	, "BIRTH_DATE"	AS	"BIRTH_DATE"	-- birth_date
	, "GENDER"	AS	"GENDER"	-- gender	 'F'emale/'M'ale/'O'ther
	, "LOCK_VERSION"	AS	"LOCK_VERSION"	-- lock_version
FROM "PUBLIC"."EMPLOYEE"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] Employee [empNo=9, firstName=Bob, lastName=Smith, birthDate=1970-01-02, gender=M, lockVersion=0]
[INFO ] Employee [empNo=10, firstName=Susan, lastName=Davis, birthDate=1969-02-10, gender=F, lockVersion=0]
[INFO ] Employee [empNo=11, firstName=John, lastName=Wilson, birthDate=1982-05-08, gender=M, lockVersion=0]
[DEBUG] Executed SQL[
SELECT /* mapping @ DeptEmp */
	  "EMP_NO"	AS	"EMP_NO"	-- emp_no
	, "DEPT_NO"	AS	"DEPT_NO"	-- dept_no
FROM "PUBLIC"."DEPT_EMP"
ORDER BY
	  "EMP_NO" ASC NULLS LAST
	, "DEPT_NO" ASC NULLS LAST
]
[DEBUG] Execute search SQL.
[DEBUG] SQL execution time [null] : [00:00:00.000]
[INFO ] DeptEmp [deptNo=11, empNo=9]
[INFO ] DeptEmp [deptNo=12, empNo=9]
[INFO ] DeptEmp [deptNo=13, empNo=10]
[INFO ] DeptEmp [deptNo=14, empNo=10]
[INFO ] DeptEmp [deptNo=15, empNo=11]
[INFO ] EntityApiSample end.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 7.023 s
[INFO] Finished at: 2019-08-26T10:21:06+09:00
[INFO] ------------------------------------------------------------------------
