<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Why uroboroSQL?]]></title>
      <url>./uroborosql-doc/why_uroborosql/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li><a href="#uroboroSQLとは">uroboroSQLとは</a></li>
<li><a href="#uroboroSQLを使う理由？">uroboroSQLを使う理由？</a></li>
</ul>
<hr>
<h2 id="uroboroSQLとは"><a href="#uroboroSQLとは" class="headerlink" title="uroboroSQLとは"></a>uroboroSQLとは</h2><p>uroboroSQLは、Java8対応の2Way-SQLが利用可能なシンプルなSQL実行ライブラリです。</p>
<p>フューチャーアーキテクト社内にて、2006-2007年頃にS2Daoを参考に開発されて、プロジェクトで利用され、現在まで改善が続けられてきました。社内では、Webアプリケーションフレームワークや各種設計開発支援ツールと連携・統合される形で利用されています。</p>
<p>とはいえ、社内で秘伝のタレ化していることは否めず、開発フェーズでは、開発パートナーさんからも「ググれない」から、使い方がわからないいう声もちらほら。だったら、OSS化してしまえということのが公開のきっかけです。</p>
<h2 id="uroboroSQLを使う理由？"><a href="#uroboroSQLを使う理由？" class="headerlink" title="uroboroSQLを使う理由？"></a>uroboroSQLを使う理由？</h2><p>JavaからRDBにアクセスするとき、Java標準のJPA(Java Persistence API)の実装であるEclipseLink、OpenJPAはもとより、歴史のあるORMとしてHibernate、MyBatis、SpringJDBCといったグローバルで使われているものもありますし、日本でよく使われてきたS2Dao、S2JDBC、DBflute、Domaといったものもあります。</p>
<p>こういった数多のDB系ライブラリ・フレームワークの中で、解決したい領域もそれぞれですが、uroboroSQLは主にSQL中心の設計コンセプトを採用しています。Javaを中心に考えてSQLを組み立てるという思想ではなく、SQLに足りないところをJavaで補うという思想です。</p>
<p>これはエンタープライズシステムにおいて、ORマッパーやクエリビルダでは実装しきれない、分析関数の利用などの複雑かつDBプロダクト依存のSQLを使う場合に有効と考えています。</p>
<p>そのため、uroboroSQLはSQLは2Way-SQL方式で記述ができるものの、ORMでよくあるエンティティクラスとリレーションをたどって遅延ロードして子エンティティを取得するなどの機能は有していません。</p>
<p>その分、エンタープライズで培われたノウハウとして、区分値サポート、リトライ、フィルターによるカスタマイズなどの機能を充実させています。また、2Way-SQLに対して、カバレッジを取れるようにするという、品質視点での機能があるのも特徴です。</p>
<p><strong>SQLの能力を最大限活かしつつ、生産性と品質を高めたい</strong></p>
<p>それがuroboroSQLの最大の関心事なのです。</p>
<div style="font-size:130%; font-weight:bold;"><br>  <a href="../getting_started" style="float:right">Getting Started &#62;&#62;</a><br></div>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Getting Started]]></title>
      <url>./uroborosql-doc/getting_started/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li><a href="#環境設定">環境設定</a><ul>
<li><a href="#ビルドツールの設定">ビルドツールの設定</a></li>
<li><a href="#事前準備">事前準備</a></li>
</ul>
</li>
<li><a href="#サンプルプロジェクトの実行">サンプルプロジェクトの実行</a></li>
<li><a href="#サンプルプロジェクトの構成">サンプルプロジェクトの構成</a></li>
<li><a href="#SQLの実行方法">SQLの実行方法</a></li>
</ul>
<hr>
<h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><h3 id="ビルドツールの設定"><a href="#ビルドツールの設定" class="headerlink" title="ビルドツールの設定"></a>ビルドツールの設定</h3><p>uroboroSQLをMavenプロジェクトに組み込むには、<strong>pom.xml</strong>に以下の記述を加えて下さい。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jp.co.future<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>uroborosql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Gradleプロジェクトの場合は、<strong>build.gradle</strong>のdependencies内に以下の記述を加えて下さい。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: jp.co.future, name: uroborosql, version: <span class="number">0.1</span>.<span class="number">0</span></div></pre></td></tr></table></figure>
<h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>事前準備として、</p>
<ul>
<li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">JDK8</a></li>
<li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="external">Apache Maven</a></li>
</ul>
<p>をインストールしてください。</p>
<h2 id="サンプルプロジェクトの実行"><a href="#サンプルプロジェクトの実行" class="headerlink" title="サンプルプロジェクトの実行"></a>サンプルプロジェクトの実行</h2><p>uroboroSQLのサンプルアプリケーションであるuroborosql-sampleを使ってuroboroSQLを動かしてみましょう。</p>
<p>まず始めに<a href="https://github.com/future-architect/uroborosql-sample" target="_blank" rel="external">uroborosql-sample</a>から最新のソースコードを取得します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/future-architect/uroborosql-sample.git</div></pre></td></tr></table></figure></p>
<p>取得できたらcloneしたフォルダに移動します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> uroborosql-sample</div></pre></td></tr></table></figure></p>
<p>まずはサンプルアプリケーションを実行してみましょう。<br>サンプルアプリケーションは以下の起動コマンドで実行します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn -PrunMain</div></pre></td></tr></table></figure></p>
<p>これでサンプルアプリケーションが実行されます。（初回実行時は必要なライブラリをダウンロードするため時間がかかります）<br>アプリケーションの実行ログが出力され、Mavenが正常終了すれば成功です。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div></pre></td><td class="code"><pre><div class="line">[DEBUG] SQL定義ファイルの読み込みを開始します[/uroborosql-sample/target/classes/sql]</div><div class="line">[DEBUG] パッケージ[]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] パッケージ[ddl]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] パッケージ[department]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] パッケージ[employee]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] パッケージ[relation]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] パッケージ[setup]以下のSQL定義を読み込んでいます</div><div class="line">[DEBUG] Enum定数[名前：CLS_GENDER_MALE, 値：M] を定数パラメータとして追加しました。</div><div class="line">[DEBUG] Enum定数[名前：CLS_GENDER_FEMALE, 値：F] を定数パラメータとして追加しました。</div><div class="line">[DEBUG] Enum定数[名前：CLS_GENDER_OTHER, 値：O] を定数パラメータとして追加しました。</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">-- employee</div><div class="line">drop table if exists employee cascade;</div><div class="line">create table employee (</div><div class="line">  emp_no NUMBER(11) not null</div><div class="line">  , first_name VARCHAR(20) not null</div><div class="line">  , last_name VARCHAR(20) not null</div><div class="line">  , birth_date DATE not null</div><div class="line">  , gender CHAR(1) not null</div><div class="line">  , constraint employee_PKC primary key (emp_no)</div><div class="line">) ;</div><div class="line">-- dept_emp</div><div class="line">drop table if exists dept_emp cascade;</div><div class="line">create table dept_emp (</div><div class="line">  emp_no NUMBER(11) not null</div><div class="line">  , dept_no NUMBER(4) not null</div><div class="line">  , constraint dept_emp_PKC primary key (emp_no,dept_no)</div><div class="line">) ;</div><div class="line">-- department</div><div class="line">drop table if exists department cascade;</div><div class="line">create table department (</div><div class="line">  dept_no NUMBER(4) not null</div><div class="line">  , dept_name VARCHAR(100) not null</div><div class="line">  , constraint department_PKC primary key (dept_no)</div><div class="line">) ;</div><div class="line">comment on table employee is 'employee';</div><div class="line">comment on column employee.emp_no is 'emp_no';</div><div class="line">comment on column employee.first_name is 'first_name';</div><div class="line">comment on column employee.last_name is 'last_name';</div><div class="line">comment on column employee.birth_date is 'birth_date';</div><div class="line">comment on column employee.gender is 'gender     ''F''emale/''M''ale/''O''ther';</div><div class="line">comment on table dept_emp is 'dept_emp';</div><div class="line">comment on column dept_emp.emp_no is 'emp_no';</div><div class="line">comment on column dept_emp.dept_no is 'dept_no';</div><div class="line">comment on table department is 'department';</div><div class="line">comment on column department.dept_no is 'dept_no';</div><div class="line">comment on column department.dept_name is 'dept_name'</div><div class="line">]</div><div class="line">[DEBUG] SQLによる更新を実行します。</div><div class="line">[DEBUG] SQL実行時間 [ddl/create_tables] : [00:00:00.027]</div><div class="line">[INFO ] ddl/create_tables count=0</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">insert into department (dept_no, dept_name) values (1001, 'sales');</div><div class="line">insert into department (dept_no, dept_name) values (1002, 'export');</div><div class="line">insert into department (dept_no, dept_name) values (1003, 'accounting');</div><div class="line">insert into department (dept_no, dept_name) values (1004, 'personnel');</div><div class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (0001, 'Bob', 'Smith', '1970-01-02', 'M');</div><div class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (0002, 'Susan', 'Davis', '1969-02-10', 'F');</div><div class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (0003, 'John', 'Wilson', '1982-05-08', 'M');</div><div class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (0004, 'Sharon', 'Johnson', '1990-01-20', 'F');</div><div class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (0005, 'Stephen', 'Taylor', '2003-12-31', 'M');</div><div class="line">insert into dept_emp (emp_no, dept_no) values (0001, '1001');</div><div class="line">insert into dept_emp (emp_no, dept_no) values (0002, '1001');</div><div class="line">insert into dept_emp (emp_no, dept_no) values (0003, '1002');</div><div class="line">insert into dept_emp (emp_no, dept_no) values (0004, '1003');</div><div class="line">insert into dept_emp (emp_no, dept_no) values (0005, '1004')</div><div class="line">]</div><div class="line">[DEBUG] SQLによる更新を実行します。</div><div class="line">[DEBUG] SQL実行時間 [setup/insert_data] : [00:00:00.010]</div><div class="line">[INFO ] setup/insert_data count=1</div><div class="line">[INFO ] select department data (collect)</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(dept_no)], 判定結果：[false], パラメータ：[dept_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(dept_name)], 判定結果：[false], パラメータ：[dept_name:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        department/select_department</div><div class="line">*/</div><div class="line">        DEPT.DEPT_NO    AS      DEPT_NO</div><div class="line">,       DEPT.DEPT_NAME  AS      DEPT_NAME</div><div class="line">FROM</div><div class="line">        DEPARTMENT      DEPT</div><div class="line">WHERE</div><div class="line">        1                               =       1</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [department/select_department] : [00:00:00.004]</div><div class="line">[INFO ] &#123;DEPT_NO=1001,DEPT_NAME=sales&#125;</div><div class="line">[INFO ] &#123;DEPT_NO=1002,DEPT_NAME=export&#125;</div><div class="line">[INFO ] &#123;DEPT_NO=1003,DEPT_NAME=accounting&#125;</div><div class="line">[INFO ] &#123;DEPT_NO=1004,DEPT_NAME=personnel&#125;</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(dept_no)], 判定結果：[true], パラメータ：[dept_no:[1001]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(dept_name)], 判定結果：[false], パラメータ：[dept_name:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        department/select_department</div><div class="line">*/</div><div class="line">        DEPT.DEPT_NO    AS      DEPT_NO</div><div class="line">,       DEPT.DEPT_NAME  AS      DEPT_NAME</div><div class="line">FROM</div><div class="line">        DEPARTMENT      DEPT</div><div class="line">WHERE</div><div class="line">        1                               =       1</div><div class="line">AND     DEPT.DEPT_NO    =       ?/*dept_no*/</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [department/select_department] : [00:00:00.000]</div><div class="line">[INFO ] &#123;DEPT_NO=1001,DEPT_NAME=sales&#125;</div><div class="line">[INFO ] select employee data (stream)</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[false], パラメータ：[birth_date_from:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[false], パラメータ：[gender_list:[null]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[false], パラメータ：[female:[null],female:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO ] &#123;EMP_NO=1,FIRST_NAME=Bob,LAST_NAME=Smith,BIRTH_DATE=1970-01-02,GENDER=M&#125;</div><div class="line">[INFO ] &#123;EMP_NO=2,FIRST_NAME=Susan,LAST_NAME=Davis,BIRTH_DATE=1969-02-10,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=3,FIRST_NAME=John,LAST_NAME=Wilson,BIRTH_DATE=1982-05-08,GENDER=M&#125;</div><div class="line">[INFO ] &#123;EMP_NO=4,FIRST_NAME=Sharon,LAST_NAME=Johnson,BIRTH_DATE=1990-01-20,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=5,FIRST_NAME=Stephen,LAST_NAME=Taylor,BIRTH_DATE=2003-12-31,GENDER=M&#125;</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[true], パラメータ：[birth_date_from:[&#123;1990-01-01&#125;]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[false], パラメータ：[gender_list:[null]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[false], パラメータ：[female:[null],female:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line">WHERE</div><div class="line">EMP.BIRTH_DATE  &gt;=      ?/*birth_date_from*/</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO ] &#123;EMP_NO=4,FIRST_NAME=Sharon,LAST_NAME=Johnson,BIRTH_DATE=1990-01-20,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=5,FIRST_NAME=Stephen,LAST_NAME=Taylor,BIRTH_DATE=2003-12-31,GENDER=M&#125;</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[false], パラメータ：[birth_date_from:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[true], パラメータ：[gender_list:[&#123;F&#125;]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[false], パラメータ：[female:[null],female:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line">WHERE</div><div class="line">EMP.GENDER              IN      (?)/*gender_list*/</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO ] &#123;EMP_NO=2,FIRST_NAME=Susan,LAST_NAME=Davis,BIRTH_DATE=1969-02-10,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=4,FIRST_NAME=Sharon,LAST_NAME=Johnson,BIRTH_DATE=1990-01-20,GENDER=F&#125;</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[false], パラメータ：[birth_date_from:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[false], パラメータ：[gender_list:[null]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[true], パラメータ：[female:[true],female:[true]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line">WHERE</div><div class="line">EMP.GENDER              =       'F'/*#CLS_GENDER_FEMALE*/</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO ] &#123;EMP_NO=2,FIRST_NAME=Susan,LAST_NAME=Davis,BIRTH_DATE=1969-02-10,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=4,FIRST_NAME=Sharon,LAST_NAME=Johnson,BIRTH_DATE=1990-01-20,GENDER=F&#125;</div><div class="line">[INFO ] delete tables with sql literal</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">delete from dept_emp</div><div class="line">]</div><div class="line">[DEBUG] SQLによる更新を実行します。</div><div class="line">[DEBUG] SQL実行時間 [null] : [00:00:00.002]</div><div class="line">[INFO ] delete dept_emp count=5</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">delete from department</div><div class="line">]</div><div class="line">[DEBUG] SQLによる更新を実行します。</div><div class="line">[DEBUG] SQL実行時間 [null] : [00:00:00.000]</div><div class="line">[INFO ] delete department count=4</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">delete from employee</div><div class="line">]</div><div class="line">[DEBUG] SQLによる更新を実行します。</div><div class="line">[DEBUG] SQL実行時間 [null] : [00:00:00.000]</div><div class="line">[INFO ] delete employee count=5</div><div class="line">[INFO ] commit!</div><div class="line">[INFO ] create new transaction.</div><div class="line">[INFO ] department/insert_department batch insert.</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">INSERT</div><div class="line">/* department/insert_department */</div><div class="line">INTO</div><div class="line">        DEPARTMENT</div><div class="line">(</div><div class="line">        DEPT_NO</div><div class="line">,       DEPT_NAME</div><div class="line">) VALUES (</div><div class="line">        ?/*dept_no*/</div><div class="line">,       ?/*dept_name*/</div><div class="line">)</div><div class="line">]</div><div class="line">[DEBUG] 4件バッチ処理を追加しました。</div><div class="line">[DEBUG] バッチ処理を実行します。</div><div class="line">[DEBUG] SQL実行時間 [department/insert_department] : [00:00:00.015]</div><div class="line">[INFO ] department/insert_department count=&#123;1,1,1,1&#125;</div><div class="line">[INFO ] employee/insert_employee batch insert.</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">INSERT</div><div class="line">/* employee/insert_employee */</div><div class="line">INTO</div><div class="line">        EMPLOYEE</div><div class="line">(</div><div class="line">        EMP_NO</div><div class="line">,       FIRST_NAME</div><div class="line">,       LAST_NAME</div><div class="line">,       BIRTH_DATE</div><div class="line">,       GENDER</div><div class="line">) VALUES (</div><div class="line">        ?/*emp_no*/</div><div class="line">,       ?/*first_name*/</div><div class="line">,       ?/*last_name*/</div><div class="line">,       ?/*birth_date*/</div><div class="line">,       ?/*gender*/</div><div class="line">)</div><div class="line">]</div><div class="line">[DEBUG] 5件バッチ処理を追加しました。</div><div class="line">[DEBUG] バッチ処理を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/insert_employee] : [00:00:00.001]</div><div class="line">[INFO ] employee/insert_employee count=&#123;1,1,1,1,1&#125;</div><div class="line">[INFO ] relation/insert_dept_emp batch insert.</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">INSERT</div><div class="line">/* relation/insert_dept_emp */</div><div class="line">INTO</div><div class="line">        DEPT_EMP</div><div class="line">(</div><div class="line">        EMP_NO</div><div class="line">,       DEPT_NO</div><div class="line">) VALUES (</div><div class="line">        ?/*emp_no*/</div><div class="line">,       ?/*dept_no*/</div><div class="line">)</div><div class="line">]</div><div class="line">[DEBUG] 5件バッチ処理を追加しました。</div><div class="line">[DEBUG] バッチ処理を実行します。</div><div class="line">[DEBUG] SQL実行時間 [relation/insert_dept_emp] : [00:00:00.003]</div><div class="line">[INFO ] relation/insert_dept_emp count=</div><div class="line">[INFO ] employee/select_employee in transaction select</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[false], パラメータ：[birth_date_from:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[false], パラメータ：[gender_list:[null]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[false], パラメータ：[female:[null],female:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO ] &#123;EMP_NO=1,FIRST_NAME=Bob,LAST_NAME=Smith,BIRTH_DATE=1970-01-02,GENDER=M&#125;</div><div class="line">[INFO ] &#123;EMP_NO=2,FIRST_NAME=Susan,LAST_NAME=Davis,BIRTH_DATE=1969-02-10,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=3,FIRST_NAME=John,LAST_NAME=Wilson,BIRTH_DATE=1982-05-08,GENDER=M&#125;</div><div class="line">[INFO ] &#123;EMP_NO=4,FIRST_NAME=Sharon,LAST_NAME=Johnson,BIRTH_DATE=1990-01-20,GENDER=F&#125;</div><div class="line">[INFO ] &#123;EMP_NO=5,FIRST_NAME=Stephen,LAST_NAME=Taylor,BIRTH_DATE=2003-12-31,GENDER=M&#125;</div><div class="line">[INFO ] transaction rollback!</div><div class="line">[INFO ] employee/select_employee after transaction select. employee is empty.</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(emp_no)], 判定結果：[false], パラメータ：[emp_no:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(first_name)], 判定結果：[false], パラメータ：[first_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(last_name)], 判定結果：[false], パラメータ：[last_name:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_from)], 判定結果：[false], パラメータ：[birth_date_from:[null]]</div><div class="line">[DEBUG] 評価式：[SF.isNotEmpty(birth_date_to)], 判定結果：[false], パラメータ：[birth_date_to:[null]]</div><div class="line">[DEBUG] 評価式：[gender_list != null], 判定結果：[false], パラメータ：[gender_list:[null]]</div><div class="line">[DEBUG] 評価式：[female != null and female], 判定結果：[false], パラメータ：[female:[null],female:[null]]</div><div class="line">[DEBUG] 実行時SQL[</div><div class="line">SELECT</div><div class="line">/*</div><div class="line">        employee/select_employee</div><div class="line">*/</div><div class="line">        EMP.EMP_NO              AS      EMP_NO</div><div class="line">,       EMP.FIRST_NAME  AS      FIRST_NAME</div><div class="line">,       EMP.LAST_NAME   AS      LAST_NAME</div><div class="line">,       EMP.BIRTH_DATE  AS      BIRTH_DATE</div><div class="line">,       EMP.GENDER              AS      GENDER</div><div class="line">FROM</div><div class="line">        EMPLOYEE        EMP</div><div class="line"></div><div class="line">]</div><div class="line">[DEBUG] SQLによる検索を実行します。</div><div class="line">[DEBUG] SQL実行時間 [employee/select_employee] : [00:00:00.000]</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 7.571 s</div><div class="line">[INFO] Finished at: XXXX-XX-XXT00:00:00+09:00</div><div class="line">[INFO] Final Memory: 24M/981M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<h2 id="サンプルプロジェクトの構成"><a href="#サンプルプロジェクトの構成" class="headerlink" title="サンプルプロジェクトの構成"></a>サンプルプロジェクトの構成</h2><p>ではサンプルアプリケーションの構成を見ていきましょう。</p>
<figure class="highlight md"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">uroborosql-sample</div><div class="line">  ├─REPL</div><div class="line">  │  └─repl.properties</div><div class="line">  └─src</div><div class="line"><span class="code">     └─main</span></div><div class="line"><span class="code">        ├─java</span></div><div class="line"><span class="code">        │  └─jp</span></div><div class="line"><span class="code">        │      └─co</span></div><div class="line"><span class="code">        │          └─future</span></div><div class="line"><span class="code">        │              └─uroborosql</span></div><div class="line"><span class="code">        │                  └─sample</span></div><div class="line"><span class="code">        │                      └─Main.java</span></div><div class="line"><span class="code">        │                      └─type</span></div><div class="line"><span class="code">        │                          └─Gender.java</span></div><div class="line"><span class="code">        └─resources</span></div><div class="line"><span class="code">            ├─logback.xml</span></div><div class="line"><span class="code">            ├─data</span></div><div class="line"><span class="code">            │   ├─department.tsv</span></div><div class="line"><span class="code">            │   ├─dept_emp.tsv</span></div><div class="line"><span class="code">            │   └─employee.tsv</span></div><div class="line"><span class="code">            └─sql</span></div><div class="line"><span class="code">                ├─ddl</span></div><div class="line"><span class="code">                │   └─create_tables.sql</span></div><div class="line"><span class="code">                └─setup</span></div><div class="line"><span class="code">                │   └─insert_data.sql</span></div><div class="line"><span class="code">                ├─department</span></div><div class="line"><span class="code">                │   ├─insert_department.sql</span></div><div class="line"><span class="code">                │   └─select_department.sql</span></div><div class="line"><span class="code">                ├─employee</span></div><div class="line"><span class="code">                │   ├─insert_employee.sql</span></div><div class="line"><span class="code">                │   └─select_employee.sql</span></div><div class="line"><span class="code">                └─relation</span></div><div class="line"><span class="code">                    └─insert_dept_emp.sql</span></div></pre></td></tr></table></figure>
<p>主要なファイルの説明です</p>
<ul>
<li>Main.java<br>  uroborosql-sampleのメインプログラムです。</li>
<li>Gender.java<br>  性別を表すEnumクラスです。メインプログラムの中で使用します。</li>
<li>sqlフォルダ配下のSQL<br>  uroborosqlで実行するSQLファイルです。</li>
<li>dataフォルダ配下のTSV<br>  テーブルデータ作成用のTSVファイルです。Mainクラスの中でテーブルへの一括データ投入を行う際のデータとして利用します。</li>
<li>logback.xml<br>  ログ出力設定ファイルです。</li>
</ul>
<h2 id="SQLの実行方法"><a href="#SQLの実行方法" class="headerlink" title="SQLの実行方法"></a>SQLの実行方法</h2><p>Main.javaを見ていきましょう。</p>
<p>mainメソッドの中で最初にSqlConfigクラスを作成しています。<br>ここでは<a href="http://www.h2database.com/html/main.html" target="_blank" rel="external">H2DB</a>のメモリDBに接続するSqlConfigインスタンスを生成しています。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create SqlConfig</span></div><div class="line">SqlConfig config = createSqlConfig();</div><div class="line"></div><div class="line">... 中略 ...</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SqlConfig <span class="title">createSqlConfig</span><span class="params">()</span> </span>&#123;</div><div class="line">    SqlConfig config = DefaultSqlConfig.getConfig(<span class="string">"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"</span>, <span class="string">"sa"</span>, <span class="string">""</span>);</div><div class="line"></div><div class="line">    ... 中略 ...</div><div class="line"></div><div class="line">    <span class="keyword">return</span> config;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>次に生成したSqlConfigからuroboroSQLの中核となるクラスであるSqlAgentを生成します。<br>uroboroSQLのそれぞれの処理はSqlAgentを使って呼び出します。<br>SqlAgentはAutoClosableインタフェースを実装しているので、try-with-resources文で囲むことで処理終了時にクローズされます。<br>このときSqlAgentの中に保持するConnectionなどもクローズされるため、クローズ漏れによるメモリリークを防ぐことができます。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create SqlAgent. SqlAgent implements AutoClosable.</span></div><div class="line"><span class="keyword">try</span> (SqlAgent agent = config.createAgent()) &#123;</div><div class="line"></div><div class="line">... 中略 ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以降の処理はtry-with-resourcesの中で行います。</p>
<p>接続したDBにテーブルを作成と初期データの登録を行います。<br>uroboroSQLでは実行するSQLをファイルパスに似た表現（SQLパスと呼ぶ）で指定します。<br>下の例ではクラスパス上にあるsqlフォルダ配下のddl/create_tables.sqlを指定してSQL更新処理を実行します。</p>
<p>今回作成するテーブルの構成は以下です。<br><img src="erd.png" alt="ERD" title="テーブル構成"></p>
<p>更新処理を行う場合、<code>SqlAgent#update(&quot;[SQLパス]&quot;)</code>メソッドを使用してSqlUpdateを取得し、続けてバインドパラメータの設定や<br>Updateの実行を行います。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// create table :  テーブル作成</span></div><div class="line">agent.update(<span class="string">"ddl/create_tables"</span>).count();</div><div class="line"><span class="comment">// setup data : 初期データ挿入</span></div><div class="line">agent.update(<span class="string">"setup/insert_data"</span>).count();</div></pre></td></tr></table></figure>
<p>登録したデータを検索してみましょう。<br>検索を行う際は、<code>SqlAgent#query(&quot;[SQLパス]&quot;)</code>メソッドを使用してSqlQueryを取得し、続けてバインドパラメータの設定や<br>Queryの実行を行います。</p>
<p>uroboroSQLでは検索結果をいくつかの形式で取得することができます。</p>
<ul>
<li><code>SqlQuery#collect()</code><br>  検索結果の各行をMapに詰めたListの形式で取得する</li>
<li><code>SqlQuery#stream()</code><br>  検索結果をJava8で追加されたStreamの形式で取得する</li>
<li><code>SqlQuery#resultSet()</code><br>  検索結果のResultSetを取得する</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 検索結果の各行をMapに詰めたListの形式で取得する</span></div><div class="line">List&lt;Map&lt;String, Object&gt;&gt; departments = agent.query(<span class="string">"department/select_department"</span>).param(<span class="string">"dept_no"</span>, <span class="number">1001</span>).collect();</div><div class="line"></div><div class="line"><span class="comment">// 検索結果をJava8で追加されたStreamの形式で取得する</span></div><div class="line">agent.query(<span class="string">"employee/select_employee"</span>).paramList(<span class="string">"gender_list"</span>, Gender.Female).stream().forEachOrdered(m -&gt; log(toS(m)));</div></pre></td></tr></table></figure>
<p>ここで実行されるSQLは以下のようになっています。</p>
<ul>
<li>department/select_department.sql<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line"><span class="comment">/* _SQL_ID_ */</span></div><div class="line">	DEPT.DEPT_NO	<span class="keyword">AS</span>	DEPT_NO</div><div class="line">,	DEPT.DEPT_NAME	<span class="keyword">AS</span>	DEPT_NAME</div><div class="line"><span class="keyword">FROM</span></div><div class="line">	DEPARTMENT	DEPT</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">	<span class="number">1</span>				=	<span class="number">1</span></div><div class="line"><span class="comment">/*IF SF.isNotEmpty(dept_no)*/</span></div><div class="line"><span class="keyword">AND</span>	DEPT.DEPT_NO	=	<span class="comment">/*dept_no*/</span><span class="number">1</span></div><div class="line"><span class="comment">/*END*/</span></div><div class="line"><span class="comment">/*IF SF.isNotEmpty(dept_name)*/</span></div><div class="line"><span class="keyword">AND</span>	DEPT.DEPT_NAME	=	<span class="comment">/*dept_name*/</span><span class="string">'sample'</span></div><div class="line"><span class="comment">/*END*/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><code>/* _SQL_ID_ */</code> はSQLを特定するIDを付与するための予約語で、実行時にSQLファイルを特定するための文字列に変換されます。<br><code>/*IF*/ ... /*END*/</code>は条件分岐で、IFの後ろの評価結果が<code>True</code>となる場合に<code>/*IF*/</code>と<code>/*END*/</code>で囲まれた部分が出力されます。<br><code>/*dept_no*/</code>はバインドパラメータで、実行時に<code>?</code>に変換され、SqlQueryに設定したパラメータがSQLへバインドされます。<br><code>/*dept_no*/</code>の後ろの<code>1</code>はテスト用データです。このようにテスト用データをSQL文に記述しておくことで、このSQLを<br>SQLクライアントツールで実行する際にエラーにならずに文法の確認を行うことができます。</p>
<p>SQLで使用できる構文の詳細については<a href="">XXX</a>を参照してください。</p>
<p>処理結果のCommitやRollbackもSqlAgent経由で行います。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// commit</span></div><div class="line">agent.commit();</div><div class="line"></div><div class="line"><span class="comment">// rollback</span></div><div class="line">agent.rollback();</div></pre></td></tr></table></figure>
<p>uroboroSQLでは、これらの基本的な操作のほか、バッチ処理やトランザクション処理なども行うことができます。<br>詳細については<a href="">XXX</a>を参照してください。</p>
<div style="font-size:130%; font-weight:bold;"><br>  <a href="../why_uroborosql" style="float:left">&#60;&#60; Why uroboroSQL?</a><a href="../basics" style="float:right">基本操作 &#62;&#62;</a><br></div>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[基本操作]]></title>
      <url>./uroborosql-doc/basics/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li><a href="#検索">検索</a></li>
<li><a href="#挿入と更新と削除">挿入と更新と削除</a></li>
<li><a href="#動的SQLの構築">動的SQLの構築</a></li>
</ul>
<hr>
<p>ここでは、uroboroSQLの基本操作をまとめています。</p>
<h2 id="検索"><a href="#検索" class="headerlink" title="検索"></a>検索</h2><p>SELECT文を実行する際は、<code>executeQuery</code>メソッドを使用します。</p>
<h3 id="パラメーターをバインドする場合"><a href="#パラメーターをバインドする場合" class="headerlink" title="パラメーターをバインドする場合"></a>パラメーターをバインドする場合</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span></div><div class="line">    product_id = <span class="comment">/* product_id */</span><span class="string">'0010'</span></div></pre></td></tr></table></figure>
<p>パラメーターのバインドを行う場合は、<code>addParam</code>メソッドを用います。<code>addParam</code>メソッドは引数に<code>(パラメーター名, バインドするパラメーターの値)</code>を設定します。上記SQLを実行するには以下のように記述します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sqlContext.setSqlName(<span class="string">"product.selectaparam"</span>);</div><div class="line"></div><div class="line">String productId = <span class="string">"0010"</span></div><div class="line">sqlContext.addParam(<span class="string">"product_id"</span>, productId);</div><div class="line"></div><div class="line">ResultSet resultSet = sqlAgent.executeQuery(sqlContext);</div></pre></td></tr></table></figure></p>
<h3 id="複数のパラメーターをバインドする場合"><a href="#複数のパラメーターをバインドする場合" class="headerlink" title="複数のパラメーターをバインドする場合"></a>複数のパラメーターをバインドする場合</h3><p>また、以下のようなSQLに対し、複数のパラメーターをバインドすることも可能です。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * </div><div class="line"><span class="keyword">from</span> </div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span> </div><div class="line">    product_price = <span class="comment">/* product_price */</span><span class="number">120</span> </div><div class="line"><span class="keyword">and</span> product_category = <span class="comment">/* product_category_id */</span><span class="string">'07'</span></div></pre></td></tr></table></figure></p>
<p>この場合も以下の様に、<code>addParam</code>メソッドを使用することでバインドが完了します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">sqlContext.setSqlName(<span class="string">"product.selecttwoparams"</span>);</div><div class="line"></div><div class="line"><span class="keyword">int</span> productPrice = <span class="number">120</span>;</div><div class="line">String productCategoryId = <span class="string">"07"</span>;</div><div class="line">sqlContext.addParam(<span class="string">"product_price"</span>, productPrice);</div><div class="line">sqlContext.addParam(<span class="string">"product_category_id"</span>, productCategoryId);</div><div class="line"></div><div class="line">ResultSet resultSet = sqlAgent.executeQuery(sqlContext);</div></pre></td></tr></table></figure></p>
<p>バインド出来るパラメーターのデータ型については、<a href="/advanced/#バインド出来るパラメーターの型">高度な操作&gt;バインド出来るパラメーターの型</a>を参照して下さい。</p>
<h2 id="挿入と更新と削除"><a href="#挿入と更新と削除" class="headerlink" title="挿入と更新と削除"></a>挿入と更新と削除</h2><p>INSERT・UPDATE・DELETE文を実行する際は、<code>executeUpdate</code>メソッドを使用します。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">values</span> (</div><div class="line">    <span class="comment">/* product_id */</span><span class="string">'1234567890123'</span>,</div><div class="line">    <span class="comment">/* product_name */</span><span class="string">'note-A'</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>例えば挿入の場合、上記SQLを実行するには以下のように記述します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">sqlContext.setSqlName(<span class="string">"product.insert"</span>);</div><div class="line"></div><div class="line">sqlContext.addParam(<span class="string">"product_id"</span>, <span class="string">"1234567890123"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_name"</span>, <span class="string">"note-A"</span>);</div><div class="line"></div><div class="line">sqlAgent.executeUpdate(sqlContext);</div></pre></td></tr></table></figure></p>
<p>更新、削除の場合も同じ要領で記述します。</p>
<h2 id="動的SQLの構築"><a href="#動的SQLの構築" class="headerlink" title="動的SQLの構築"></a>動的SQLの構築</h2><p>SQLに対し条件分岐/ループ等の動的な制御を行いたい場合、コメント形式で記述することが可能です。</p>
<h3 id="条件分岐"><a href="#条件分岐" class="headerlink" title="条件分岐"></a>条件分岐</h3><p>条件分岐の制御はSQLコメント<code>/*IF 条件式*/</code>、<code>/*END*/</code>、<code>/*ELSEIF 条件式*/</code>、<code>/*ELSE*/</code>を用いて記述します。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></div><div class="line"><span class="comment">/*IF  product_category_id ==  "07"*/</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">120</span></div><div class="line"><span class="comment">/*ELSEIF product_category_id == "08"*/</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">200</span></div><div class="line"><span class="comment">/*ELSE*/</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">250</span></div><div class="line"><span class="comment">/*END*/</span></div></pre></td></tr></table></figure></p>
<p>上のSQLでは、パラメーター<code>product_category_id</code>の値によって動的にSQLの処理が制御されています。<br>つまり、<code>product_category_id</code>が”07”である場合、<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">120</span></div></pre></td></tr></table></figure></p>
<p>“08”ならば<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">200</span></div></pre></td></tr></table></figure></p>
<p>それ以外の場合は<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span> <span class="number">1</span> = <span class="number">1</span></div><div class="line"><span class="keyword">and</span> product_price = <span class="number">250</span></div></pre></td></tr></table></figure></p>
<p>との処理が実行されます。</p>
<h3 id="範囲の有効-無効の設定"><a href="#範囲の有効-無効の設定" class="headerlink" title="範囲の有効/無効の設定"></a>範囲の有効/無効の設定</h3><p>例えば、以下の条件分岐の制御をかけたSQLの実行を考えてみます。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span></div><div class="line"><span class="comment">/*IF product_category_id == "07"*/</span></div><div class="line">    product_price = <span class="number">120</span></div><div class="line"><span class="comment">/*END*/</span></div></pre></td></tr></table></figure></p>
<p>この時、<code>product_category_id</code>として”08”をバインドした場合、このSQLは<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">where</span></div></pre></td></tr></table></figure></p>
<p>となり、<code>where</code>句に入る条件式が不在なため不正なSQLとなってしまいます。<br>この問題に対しては、<code>where</code>句を<code>BEGIN</code>コメントと<code>END</code>コメントで囲むことで対処出来ます。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div><div class="line"><span class="comment">/*BEGIN*/</span></div><div class="line"><span class="keyword">where</span></div><div class="line"><span class="comment">/*IF product_category_id == "07"*/</span></div><div class="line">    product_price = <span class="number">120</span></div><div class="line"><span class="comment">/*END*/</span></div><div class="line"><span class="comment">/*END*/</span></div></pre></td></tr></table></figure></p>
<p><code>product_category_id</code>が”08”である場合、このSQLは<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span></div><div class="line">    *</div><div class="line"><span class="keyword">from</span></div><div class="line">    ms_products</div></pre></td></tr></table></figure></p>
<p>と、<code>BEGIN</code>と<code>END</code>に囲まれた<code>IF</code>の条件式が<code>false</code>になるため、囲まれた<code>where</code>句そのものが削除される処理が実行されます。</p>
<div style="font-size:130%; font-weight:bold;"><br>  <a href="../getting_started" style="float:left">&#60;&#60; Getting Started</a><a href="../advanced" style="float:right">高度な操作 &#62;&#62;</a><br></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[高度な操作]]></title>
      <url>./uroborosql-doc/advanced/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li><a href="#バインド出来るパラメーターの型">バインド出来るパラメーターの型</a></li>
<li><a href="#バッチ実行">バッチ実行</a></li>
<li><a href="#ストアドプロシージャの実行">ストアドプロシージャの実行</a></li>
<li><a href="#トランザクション">トランザクション</a></li>
<li><a href="#エラーハンドリング">エラーハンドリング </a></li>
<li><a href="#ストリームAPI">ストリームAPI</a></li>
<li><a href="#ログ">ログ</a></li>
<li><a href="#式言語">式言語</a></li>
</ul>
<hr>
<h2 id="バインド出来るパラメーターの型"><a href="#バインド出来るパラメーターの型" class="headerlink" title="バインド出来るパラメーターの型"></a>バインド出来るパラメーターの型</h2><p>uroboroSQLでバインド出来るパラメーターの型は、下記の通りです。</p>
<ul>
<li>プリミティブ型とそのラッパー型（ただし char と java.lang.Character は除く）</li>
<li>java.math.BigDecimal</li>
<li>java.math.BigInteger</li>
<li>java.lang.String</li>
<li>byte[ ]</li>
<li>java.sql.Date</li>
<li>java.sql.Time</li>
<li>java.sql.Timestamp</li>
<li>java.sql.Array</li>
<li>java.sql.Ref</li>
<li>java.sql.Blob</li>
<li>java.sql.Clob</li>
<li>java.sql.SQLXML</li>
<li>java.sql.Struct</li>
<li>列挙型(enum)</li>
<li>java.util.Date</li>
<li>java.util.Optional</li>
<li>java.util.OptionalInt</li>
<li>java.util.OptionalLong</li>
<li>java.util.OptionalDouble</li>
<li>java.time.LocalDateTime</li>
<li>java.time.OffsetDateTime</li>
<li>java.time.ZonedDateTime</li>
<li>java.time.LocalDate</li>
<li>java.time.LocalTime</li>
<li>java.time.OffsetTime</li>
<li>java.time.Year</li>
<li>java.time.YearMonth</li>
<li>java.time.MonthDay</li>
<li>java.time.Month</li>
<li>java.time.DayOfWeek</li>
</ul>
<h2 id="バッチ実行"><a href="#バッチ実行" class="headerlink" title="バッチ実行"></a>バッチ実行</h2><p>複数の挿入/更新/削除処理を実行する場合、<code>addBatch</code>と<code>executeBatch</code>メソッドを使用することでバッチ更新を行うことが出来ます。<br>例として、以下のSQLを実行するケースを考えてみます。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span></div><div class="line">    ms_products</div><div class="line"><span class="keyword">values</span>(</div><div class="line">    <span class="comment">/* product_id */</span><span class="string">'0040'</span>,</div><div class="line">    <span class="comment">/* product_category_id */</span><span class="string">'09'</span>,</div><div class="line">    <span class="comment">/* product_name */</span><span class="string">'コーラ'</span>,</div><div class="line">    <span class="comment">/* product_price */</span><span class="number">120</span></div><div class="line">)</div></pre></td></tr></table></figure></p>
<p>挿入処理を行いたいデータが複数存在する場合、以下の様に記述をすることでバッチ更新が実行されます。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sqlContext.addParam(<span class="string">"product_id"</span>, <span class="string">"0040"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_category_id"</span>, <span class="string">"09"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_name"</span>, <span class="string">"コーラ"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_price"</span>, <span class="number">120</span>);</div><div class="line">sqlContext.addBatch();</div><div class="line"></div><div class="line">sqlContext.addParam(<span class="string">"product_id"</span>, <span class="string">"0041"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_category_id"</span>, <span class="string">"09"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_name"</span>, <span class="string">"サイダー"</span>);</div><div class="line">sqlContext.addParam(<span class="string">"product_price"</span>, <span class="number">120</span>);</div><div class="line">sqlContext.addBatch();</div><div class="line"></div><div class="line">sqlAgent.executeBatch(sqlContext);</div></pre></td></tr></table></figure></p>
<h2 id="ストアドプロシージャの実行"><a href="#ストアドプロシージャの実行" class="headerlink" title="ストアドプロシージャの実行"></a>ストアドプロシージャの実行</h2><p><code>executeProcedure</code>メソッドを利用することで、ストアドプロシージャを実行することが出来ます。<br>例えば、<code>product_id</code>で商品の有無を確認するストアドプロシージャ<code>product_id_exists_check</code>を実行する以下SQLを考えます。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">call</span> product_id_exists_check(<span class="comment">/*product_id*/</span><span class="string">'0010'</span>, <span class="comment">/*check_out*/</span>)</div></pre></td></tr></table></figure></p>
<p>この時には、以下の様に記述をすることでストアドプロシージャを実行することが出来ます。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sqlContext.addParam(<span class="string">"product_id"</span>,<span class="string">"0010"</span> );</div><div class="line">sqlContext.addOutParam(<span class="string">"check_out"</span>,Types.NUMERIC);</div><div class="line"></div><div class="line">Map&lt;String, Object&gt; result = sqlAgent.executeProcedure(sqlContext);</div></pre></td></tr></table></figure></p>
<p><code>addOutParam</code>メソッドにより、<code>check_out</code>を戻り値として返されるパラメーターとして設定をしています。このプロシージャの実行結果は<code>result.get(&quot;check_out&quot;)</code>により取得が可能です。</p>
<h2 id="トランザクション"><a href="#トランザクション" class="headerlink" title="トランザクション"></a>トランザクション</h2><h2 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h2><p>エラーが発生した際、エラーコードの種類によるリトライを設定することが出来ます。<br>リトライするエラーコード、最大リトライ回数、リトライ時の待機時間を下記のように指定します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; sqlRetryCodeList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</div><div class="line">sqlRetryCodeList.add(<span class="string">"54"</span>);</div><div class="line">sqlRetryCodeList.add(<span class="string">"60"</span>);</div><div class="line">agentFactory.setSqlRetryCodeList(sqlRetryCodeList); <span class="comment">// リトライ対象とするSQLエラーコード。デフォルトは指定なし。</span></div><div class="line"></div><div class="line">agentFactory.setDefaultMaxRetryCount(<span class="number">3</span>); <span class="comment">// 最大リトライ回数。デフォルトは0。</span></div><div class="line"></div><div class="line">agentFactory.setDefaultSqlRetryWaitTime(<span class="number">1000</span>); <span class="comment">// リトライ時の待機時間(ms)。デフォルトは0。</span></div></pre></td></tr></table></figure></p>
<h2 id="ストリームAPI"><a href="#ストリームAPI" class="headerlink" title="ストリームAPI"></a>ストリームAPI</h2><p>実行したSQLの結果を取得したい際には、ストリームAPIを利用することが出来ます。  </p>
<h2 id="ログ"><a href="#ログ" class="headerlink" title="ログ"></a>ログ</h2><p>uroboroSQLではログ出力ライブラリとしてLogbackを使用しています。Logbackの詳細は<a href="http://logback.qos.ch/manual/index_ja.html" target="_blank" rel="external">公式のドキュメント</a>を参照して下さい。<br>クラス毎で出力されるログ内容は以下表の通りです。</p>
<table>
<thead>
<tr>
<th style="text-align:center">クラス名</th>
<th style="text-align:center">TRACE</th>
<th style="text-align:center">DEBUG</th>
<th style="text-align:center">INFO</th>
<th style="text-align:center">WARN</th>
<th style="text-align:center">ERROR</th>
<th style="text-align:center">FATAL</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">AbstractAgent</td>
<td style="text-align:center">変換前SQL</td>
<td style="text-align:center">実行時SQL</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">DebugSqlFilter</td>
<td style="text-align:center">-</td>
<td style="text-align:center">パラメーター/<br\>対象データ数/<br\>実行結果</br\></br\></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">IfNode</td>
<td style="text-align:center">-</td>
<td style="text-align:center">評価式/<br\>判定結果/<br\>パラメーター</br\></br\></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">Parameter</td>
<td style="text-align:center">-</td>
<td style="text-align:center">パラメーターの設定</td>
<td style="text-align:center">-</td>
<td style="text-align:center">サブパラメーター値にNULLを設定</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SecretColumnSqlFilter</td>
<td style="text-align:center">-</td>
<td style="text-align:center">バッチ処理追加件数/<br\>ストアドプロシージャ出力パラメーター</br\></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SqlAgent</td>
<td style="text-align:center">ステートメントのクローズ</td>
<td style="text-align:center">処理実行アナウンス/<br\>リトライ実行アナウンス/<br\>SQL実行時間</br\></br\></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">エラーメッセージ</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SqlContext</td>
<td style="text-align:center">-</td>
<td style="text-align:center">バッチ処理追加件数/<br\>ストアドプロシージャ出力パラメーター</br\></td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SqlContextFactory</td>
<td style="text-align:center">-</td>
<td style="text-align:center">定数パラメーター</td>
<td style="text-align:center">-</td>
<td style="text-align:center">定数名の重複</td>
<td style="text-align:center">エラーメッセージ</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td style="text-align:center">SqlLoader</td>
<td style="text-align:center">SQL定義ファイルの読み込み完了</td>
<td style="text-align:center">SQL定義ファイルの読み込み開始/読み込み中</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">デフォルトファイルパスの設定/<br\>デフォルト拡張子/<br\>空のSQLキャッシュの返却</br\></br\></td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<h2 id="式言語"><a href="#式言語" class="headerlink" title="式言語"></a>式言語</h2><h3 id="リテラル"><a href="#リテラル" class="headerlink" title="リテラル"></a>リテラル</h3><p>以下のリテラルが使用できます。</p>
<ul>
<li>“a”(java.lang.String)</li>
<li>‘a’(char)</li>
<li>1(int)</li>
<li>1L(long)</li>
<li>0.1F(float)</li>
<li>0.1D(double)</li>
<li>0.1B(java.math.BigDecimal)</li>
<li>1H(java.math.BigInteger)</li>
<li>true, false(Boolean)</li>
<li>null</li>
</ul>
<h3 id="演算子"><a href="#演算子" class="headerlink" title="演算子"></a>演算子</h3><p>以下の演算子が使用できます。</p>
<h4 id="算術演算子"><a href="#算術演算子" class="headerlink" title="算術演算子"></a>算術演算子</h4><ul>
<li>e1 + e2(足し算)</li>
<li>e1 - e2 (引き算)</li>
<li>e1 * e2 (掛け算)</li>
<li>e1 / e2 (割り算)</li>
<li>e1 % e2 (余り)</li>
</ul>
<h4 id="比較演算子"><a href="#比較演算子" class="headerlink" title="比較演算子"></a>比較演算子</h4><ul>
<li>e1 eq e2, e1 == e2 (等しい)<br>→ e1・e2のいずれかがnullの場合、両方ともnullの時のみe1とe2は等しい。<br>→ e1・e2が同じオブジェクトの場合、またはequals()メソッドにより等しいと判断される場合、e1とe2は等しい。<br>→ e1・e2が数値の場合、倍精度浮動小数点数が等しい時のみe1とe2は等しい。<br>→ その以外の場合、e1とe2は等しくない。</li>
<li>e1 neq e2, e1 != e2 (等しくない)</li>
<li>e1 lt e2, e1 &lt; e2 (小なり)</li>
<li>e1 lte e2, e1 &lt;= e2 (小なりイコール)</li>
<li>e1 gt e2, e1 &gt; e2 (大なり)</li>
<li>e1 gte e2, e1 &gt;= e2 (大なりイコール)</li>
</ul>
<h4 id="論理演算子"><a href="#論理演算子" class="headerlink" title="論理演算子"></a>論理演算子</h4><ul>
<li>e1 or e2, e1 || e2 (論理和)</li>
<li>e1 and e2, e1 &amp;&amp; e2 (論理積)</li>
<li>not e, ! e (論理否定)</li>
</ul>
<h4 id="連結演算子"><a href="#連結演算子" class="headerlink" title="連結演算子"></a>連結演算子</h4><ul>
<li>e1 + e2 (文字列連結)</li>
</ul>
<h3 id="メソッド・フィールドの呼び出し"><a href="#メソッド・フィールドの呼び出し" class="headerlink" title="メソッド・フィールドの呼び出し"></a>メソッド・フィールドの呼び出し</h3><p>以下のようにメソッド・フィールドの呼び出しができます。</p>
<ul>
<li>e.method(args) (メソッドの呼び出し)</li>
<li>e.property (フィールドの呼び出し)</li>
</ul>
<div style="font-size:130%; font-weight:bold;"><br><a href="../basics" style="float:left">&#60;&#60; 基本操作</a><a href="../developer_guide" style="float:right">開発者ガイド &#62;&#62;</a><br></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[開発者ガイド]]></title>
      <url>./uroborosql-doc/developer_guide/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li>コネクションの切り替え</li>
<li>操作のフィルタリング</li>
<li>SQLファイルのキャッシュ</li>
<li>springフレームワークとの統合</li>
</ul>
<hr>
<div style="font-size:130%; font-weight:bold;"><br><a href="../advanced" style="float:left">&#60;&#60; 高度な操作</a><a href="../about_uroborosql" style="float:right">uroboroSQLについて &#62;&#62;</a><br></div>]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[uroboroSQLについて]]></title>
      <url>./uroborosql-doc/about_uroborosql/</url>
      <content type="html"><![CDATA[<hr>
<ul>
<li>リリースノート</li>
<li>FAQ</li>
</ul>
<hr>
<div style="font-size:130%; font-weight:bold;"><br><a href="../developer_guide" style="float:left">&#60;&#60; 開発者ガイド</a><br></div>]]></content>
      
        
    </entry>
    
  
  
    
  
</search>
