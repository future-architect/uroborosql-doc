<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Why uroboroSQL?</title>
      <link href="/uroborosql-doc/why_uroborosql/"/>
      <url>/uroborosql-doc/why_uroborosql/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="#uroboroSQLとは">uroboroSQLとは</a></li><li><a href="#uroboroSQLを使う理由？">uroboroSQLを使う理由？</a></li></ul><hr><h2 id="uroboroSQLとは"><a href="#uroboroSQLとは" class="headerlink" title="uroboroSQLとは"></a>uroboroSQLとは</h2><p>uroboroSQLは、Java8対応の2Way-SQLが利用可能なシンプルなSQL実行ライブラリです。</p><p>フューチャーアーキテクト社内にて、2006-2007年頃にS2Daoを参考に開発されて、プロジェクトで利用され、現在まで改善が続けられてきました。社内では、Webアプリケーションフレームワークや各種設計開発支援ツールと連携・統合される形で利用されています。</p><p>とはいえ、社内で秘伝のタレ化していることは否めず、開発フェーズでは、開発パートナーさんからも「ググれない」から、使い方がわからないいう声もちらほら。だったら、OSS化してしまえということのが公開のきっかけです。</p><h2 id="uroboroSQLを使う理由？"><a href="#uroboroSQLを使う理由？" class="headerlink" title="uroboroSQLを使う理由？"></a>uroboroSQLを使う理由？</h2><p>JavaからRDBにアクセスするとき、Java標準のJPA(Java Persistence API)の実装であるEclipseLink、OpenJPAはもとより、歴史のあるORMとしてHibernate、MyBatis、SpringJDBCといったグローバルで使われているものもありますし、日本でよく使われてきたS2Dao、S2JDBC、DBflute、Domaといったものもあります。</p><p>こういった数多のDB系ライブラリ・フレームワークの中で、解決したい領域もそれぞれですが、uroboroSQLは主にSQL中心の設計コンセプトを採用しています。Javaを中心に考えてSQLを組み立てるという思想ではなく、SQLに足りないところをJavaで補うという思想です。</p><p>これはエンタープライズシステムにおいて、ORマッパーやクエリビルダでは実装しきれない、hint句による実行計画の指定や分析関数の利用など複雑かつDBプロダクト依存のSQLを使う場合に有効と考えています。</p><p>そのため、uroboroSQLはSQLは2Way-SQL方式で記述ができるものの、ORMでよくあるエンティティクラスとリレーションをたどって遅延ロードして子エンティティを取得するなどの機能は有していません。（単純なエンティティクラスへのマッピングは提供しています）</p><p>その分、エンタープライズで培われたノウハウとして、区分値サポート、リトライ、フィルターによるカスタマイズなどの機能を充実させています。また、2Way-SQLのIF分岐に対してカバレッジを取れるようにするという、品質視点での機能があるのも特徴です。</p><p><strong>SQLの能力を最大限活かしつつ、生産性と品質を高めたい</strong></p><p>それがuroboroSQLの最大の関心事なのです。</p><div style="font-size:130%; font-weight:bold;"><br>  <a href="../getting_started" style="float:right">Getting Started &#62;&#62;</a><br></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started</title>
      <link href="/uroborosql-doc/getting_started/"/>
      <url>/uroborosql-doc/getting_started/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="#環境設定">環境設定</a><ul><li><a href="#ビルドツールの設定">ビルドツールの設定</a></li><li><a href="#事前準備">事前準備</a></li></ul></li><li><a href="#サンプルプロジェクトの実行">サンプルプロジェクトの実行</a></li><li><a href="#サンプルプロジェクトの構成">サンプルプロジェクトの構成</a></li><li><a href="#SQLの実行方法">SQLの実行方法</a></li><li><a href="#SQL-REPL">SQL-REPL</a></li></ul><hr><h2 id="環境設定"><a href="#環境設定" class="headerlink" title="環境設定"></a>環境設定</h2><h3 id="ビルドツールの設定"><a href="#ビルドツールの設定" class="headerlink" title="ビルドツールの設定"></a>ビルドツールの設定</h3><p>uroboroSQLをMavenプロジェクトに組み込むには、<strong>pom.xml</strong>に以下の記述を加えて下さい。<br>uroboroSQLは<a href="https://search.maven.org/#search%7Cga%7C1%7Curoborosql" target="_blank" rel="noopener">Maven Central Repository</a>で公開されています。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jp.co.future<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>uroborosql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Gradleプロジェクトの場合は、<strong>build.gradle</strong>のdependencies内に以下の記述を加えて下さい。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'jp.co.future'</span>, name: <span class="string">'uroborosql'</span>, version: <span class="string">'0.6.1'</span></span><br></pre></td></tr></table></figure><h2 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h2><p>事前準備として、</p><ul><li><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">JDK8</a></li><li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">Apache Maven</a></li></ul><p>をインストールしてください。</p><h2 id="サンプルプロジェクトの実行"><a href="#サンプルプロジェクトの実行" class="headerlink" title="サンプルプロジェクトの実行"></a>サンプルプロジェクトの実行</h2><p>uroboroSQLのサンプルアプリケーションであるuroborosql-sampleを使ってuroboroSQLを動かしてみましょう。</p><p>まず始めに<a href="https://github.com/future-architect/uroborosql-sample" target="_blank" rel="noopener">uroborosql-sample</a>から最新のソースコードを取得します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/future-architect/uroborosql-sample.git</span><br></pre></td></tr></table></figure></p><p>取得できたらcloneしたフォルダに移動します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> uroborosql-sample</span><br></pre></td></tr></table></figure></p><p>まずはサンプルアプリケーションを実行してみましょう。<br>サンプルアプリケーションは以下の起動コマンドで実行します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -PrunMain</span><br></pre></td></tr></table></figure></p><p>これでサンプルアプリケーションが実行されます。（初回実行時は必要なライブラリをダウンロードするため時間がかかります）<br>アプリケーションの実行ログが出力され、Mavenが正常終了すれば成功です。<br>色々ログが流れますが、この中でDB接続からテーブル作成、データの挿入、検索、バッチ更新、トランザクション、といった一連の処理が実行されています。</p><p>Main.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jp.co.future.uroborosql.sample;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UncheckedIOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Path;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDate;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.SqlAgent;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.SqlAgentFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.UroboroSQL;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.config.SqlConfig;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.context.SqlContextFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.sample.entity.Department;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.sample.entity.Employee;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.sample.type.Gender;</span><br><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.utils.CaseFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * uroboroSQL Sample Application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> H.Sugimoto</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="comment">/** ロガー */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(Main.class);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// create SqlConfig</span></span><br><span class="line">    SqlConfig config = UroboroSQL</span><br><span class="line">        .builder(<span class="string">"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"</span>, <span class="string">"sa"</span>, <span class="string">""</span>)</span><br><span class="line">        <span class="comment">// SqlContextFactoryの設定（Enum定数パッケージ設定の追加）</span></span><br><span class="line">        .setSqlContextFactory(</span><br><span class="line">            <span class="keyword">new</span> SqlContextFactoryImpl().setEnumConstantPackageNames(Arrays.asList(Gender.class.getPackage()</span><br><span class="line">                .getName())))</span><br><span class="line">        <span class="comment">// SqlAgentFactoryの設定（Queryの戻り値のMapのキー文字列のデフォルトCaseFormat設定の追加）</span></span><br><span class="line">        .setSqlAgentFactory(<span class="keyword">new</span> SqlAgentFactoryImpl().setDefaultMapKeyCaseFormat(CaseFormat.CAMEL_CASE))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create SqlAgent. SqlAgent implements AutoClosable.</span></span><br><span class="line">    <span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create table :  テーブル作成</span></span><br><span class="line">      <span class="keyword">int</span> createCount = agent.update(<span class="string">"ddl/create_tables"</span>).count();</span><br><span class="line">      log(<span class="string">"ddl/create_tables count=&#123;&#125;"</span>, createCount);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// setup data : 初期データ挿入</span></span><br><span class="line">      <span class="keyword">int</span> setupCount = agent.update(<span class="string">"setup/insert_data"</span>).count();</span><br><span class="line">      log(<span class="string">"setup/insert_data count=&#123;&#125;"</span>, setupCount);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// select department data (collect) : 部署データ検索（collect API）</span></span><br><span class="line">      log(<span class="string">"select department data (collect)"</span>);</span><br><span class="line">      <span class="comment">// no parameter : バインドパラメータ指定なしで検索</span></span><br><span class="line">      List&lt;Map&lt;String, Object&gt;&gt; departments = agent.query(<span class="string">"department/select_department"</span>).collect();</span><br><span class="line">      departments.forEach(data -&gt; log(toS(data)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add bind parameter : バインドパラメータを設定して検索</span></span><br><span class="line">      log(<span class="string">"select department data (collect) set param(dept_no=1001)"</span>);</span><br><span class="line">      departments = agent.query(<span class="string">"department/select_department"</span>).param(<span class="string">"dept_no"</span>, <span class="number">1001</span>).collect();</span><br><span class="line">      departments.forEach(data -&gt; log(toS(data)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// with Entity : エンティティによる部署データ検索</span></span><br><span class="line">      log(<span class="string">"select department data with Entity (collect)"</span>);</span><br><span class="line">      <span class="comment">// no parameter : 条件指定なしで検索</span></span><br><span class="line">      List&lt;Department&gt; departmentEntities = agent.query(Department.class).collect();</span><br><span class="line">      departmentEntities.forEach(data -&gt; log(toS(data)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add bind parameter : 条件を設定して検索</span></span><br><span class="line">      log(<span class="string">"select department data with Entity (collect) set param(deptNo=1001)"</span>);</span><br><span class="line">      departmentEntities = agent.query(Department.class).param(<span class="string">"deptNo"</span><span class="comment">/* camelCase */</span>, <span class="number">1001</span>).collect();</span><br><span class="line">      departmentEntities.forEach(data -&gt; log(toS(data)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// find department by dept_no key : キー（dept_no）を指定して、部署データ１件取得（find API）</span></span><br><span class="line">      log(<span class="string">"select department data by key (find)"</span>);</span><br><span class="line">      Department department = agent.find(Department.class, <span class="number">1002</span>).orElse(<span class="keyword">null</span>);</span><br><span class="line">      log(toS(department));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// find first : findFirstを使用した先頭1件検索</span></span><br><span class="line">      log(<span class="string">"select first employee data.(Optional)"</span>);</span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).findFirst().ifPresent(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// select employee data (stream) : 従業員データ検索（stream API）</span></span><br><span class="line">      log(<span class="string">"select employee data (stream)"</span>);</span><br><span class="line">      <span class="comment">// no parameter : バインドパラメータ指定なしで検索（BEGIN-ENDで囲まれた範囲内のIF条件がすべてfalseのため、BEGIN-ENDの中が削除される）</span></span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add bind date parameter : バインドパラメータ（日付型）を指定して検索</span></span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).param(<span class="string">"birth_date_from"</span>, LocalDate.of(<span class="number">1990</span>, <span class="number">1</span>, <span class="number">1</span>)).stream()</span><br><span class="line">          .forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// add bind list parameter : バインドパラメータ（IN句用）を指定して検索</span></span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).paramList(<span class="string">"gender_list"</span>, Gender.FEMALE).stream()</span><br><span class="line">          .forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// use sql enum constant : SQL上でEnum定数を使用した検索</span></span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).param(<span class="string">"female"</span>, <span class="keyword">true</span>).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// with Entity : エンティティによる従業員データ検索（stream API）</span></span><br><span class="line">      log(<span class="string">"select employee data with Entity (stream)"</span>);</span><br><span class="line">      <span class="comment">// no parameter : バインドパラメータ指定なしで検索</span></span><br><span class="line">      agent.query(Employee.class).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line">      <span class="comment">// use LocalDate parameter : LocalDateを使用した検索</span></span><br><span class="line">      agent.query(Employee.class).param(<span class="string">"birthDate"</span>, LocalDate.of(<span class="number">1970</span>, <span class="number">1</span>, <span class="number">2</span>)).stream()</span><br><span class="line">          .forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line">      <span class="comment">// use enum parameter : Enumを使用した検索</span></span><br><span class="line">      agent.query(Employee.class).param(<span class="string">"gender"</span>, Gender.FEMALE).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">      log(<span class="string">"delete tables with sql literal"</span>);</span><br><span class="line">      <span class="comment">// update with sql literal</span></span><br><span class="line">      log(<span class="string">"delete dept_emp count=&#123;&#125;"</span>, agent.updateWith(<span class="string">"delete from dept_emp"</span>).count());</span><br><span class="line">      log(<span class="string">"delete department count=&#123;&#125;"</span>, agent.updateWith(<span class="string">"delete from department"</span>).count());</span><br><span class="line">      log(<span class="string">"delete employee count=&#123;&#125;"</span>, agent.updateWith(<span class="string">"delete from employee"</span>).count());</span><br><span class="line"></span><br><span class="line">      log(<span class="string">"commit!"</span>);</span><br><span class="line">      agent.commit();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// transaction (requiredNew)</span></span><br><span class="line">      agent.requiresNew(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"create new transaction."</span>);</span><br><span class="line">        <span class="comment">// batch insert (new v0.5.0)</span></span><br><span class="line">        log(<span class="string">"department/insert_department batch insert."</span>);</span><br><span class="line">        <span class="comment">// department</span></span><br><span class="line">        <span class="keyword">int</span> deptCount = agent.batch(<span class="string">"department/insert_department"</span>)</span><br><span class="line">            .paramStream(getDataByFile(Paths.get(<span class="string">"src/main/resources/data/department.tsv"</span>))).count();</span><br><span class="line">        log(<span class="string">"department/insert_department count=&#123;&#125;"</span>, deptCount);</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"employee/insert_employee batch insert."</span>);</span><br><span class="line">        <span class="comment">// employee</span></span><br><span class="line">        <span class="comment">// execute by 2 rows</span></span><br><span class="line">        <span class="keyword">int</span> empCount = agent.batch(<span class="string">"employee/insert_employee"</span>)</span><br><span class="line">            .paramStream(getDataByFile(Paths.get(<span class="string">"src/main/resources/data/employee.tsv"</span>)))</span><br><span class="line">            .by((ctx, row) -&gt; ctx.batchCount() == <span class="number">2</span>).count();</span><br><span class="line">        log(<span class="string">"employee/insert_employee count=&#123;&#125;"</span>, empCount);</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"relation/insert_dept_emp batch insert."</span>);</span><br><span class="line">        <span class="comment">// dept_emp</span></span><br><span class="line">        <span class="comment">// log message when batch execute.</span></span><br><span class="line">        <span class="keyword">int</span> deptEmpCount = agent.batch(<span class="string">"relation/insert_dept_emp"</span>)</span><br><span class="line">            .paramStream(getDataByFile(Paths.get(<span class="string">"src/main/resources/data/dept_emp.tsv"</span>)))</span><br><span class="line">            .batchWhen((agt, ctx) -&gt; log(<span class="string">"batch execute."</span>)).count();</span><br><span class="line">        log(<span class="string">"relation/insert_dept_emp count=&#123;&#125;"</span>, deptEmpCount);</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"employee/select_employee in transaction select"</span>);</span><br><span class="line">        agent.query(<span class="string">"employee/select_employee"</span>).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"transaction rollback!"</span>);</span><br><span class="line">        agent.setRollbackOnly();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      agent.requiresNew(() -&gt; &#123;</span><br><span class="line">        <span class="comment">// insert with Entity</span></span><br><span class="line">        log(<span class="string">"insert with Entity"</span>);</span><br><span class="line">        Department informationDept = <span class="keyword">new</span> Department();</span><br><span class="line">        informationDept.setDeptNo(<span class="number">1005</span>);</span><br><span class="line">        informationDept.setDeptName(<span class="string">"information"</span>);</span><br><span class="line">        agent.insert(informationDept);</span><br><span class="line"></span><br><span class="line">        log(toS(agent.find(Department.class, <span class="number">1005</span>).get()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// update with Entity</span></span><br><span class="line">        log(<span class="string">"update with Entity"</span>);</span><br><span class="line">        informationDept.setDeptName(<span class="string">"Information System"</span>);</span><br><span class="line">        agent.update(informationDept);</span><br><span class="line"></span><br><span class="line">        log(toS(agent.find(Department.class, <span class="number">1005</span>).get()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// delete with Entity</span></span><br><span class="line">        log(<span class="string">"delete with Entity"</span>);</span><br><span class="line">        agent.delete(informationDept);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!agent.find(Department.class, <span class="number">1005</span>).isPresent()) &#123;</span><br><span class="line">          log(<span class="string">"deptNo = 1005 deleted!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        log(<span class="string">"transaction rollback!"</span>);</span><br><span class="line">        agent.setRollbackOnly();</span><br><span class="line">      &#125;);</span><br><span class="line">      log(<span class="string">"employee/select_employee after transaction select. employee is empty."</span>);</span><br><span class="line">      agent.query(<span class="string">"employee/select_employee"</span>).stream().forEachOrdered(m -&gt; log(toS(m)));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Read TSV file data and convert to List Object.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> filePath TSV file path.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> Data List</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Stream&lt;Map&lt;String, Object&gt;&gt; getDataByFile(<span class="keyword">final</span> Path filePath) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      List&lt;String&gt; lines = Files.readAllLines(filePath);</span><br><span class="line">      String[] header = lines.get(<span class="number">0</span>).split(<span class="string">"\\t"</span>);</span><br><span class="line">      <span class="keyword">return</span> lines.stream()</span><br><span class="line">          .skip(<span class="number">1</span>)</span><br><span class="line">          .map(s -&gt; s.split(<span class="string">"\\t"</span>))</span><br><span class="line">          .map(data -&gt; IntStream.range(<span class="number">0</span>, header.length)</span><br><span class="line">              .&lt;Map&lt;String, Object&gt;&gt; collect(HashMap::<span class="keyword">new</span>, (row, i) -&gt; row.put(header[i], data[i]),</span><br><span class="line">                  Map::putAll));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> UncheckedIOException(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toS</span><span class="params">(<span class="keyword">final</span> Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Map) &#123;</span><br><span class="line">      Map&lt;String, Object&gt; map = (Map&lt;String, Object&gt;) obj;</span><br><span class="line">      <span class="keyword">return</span> map.entrySet().stream()</span><br><span class="line">          .map(e -&gt; e.getKey() + <span class="string">"="</span> + e.getValue())</span><br><span class="line">          .collect(Collectors.joining(<span class="string">","</span>, <span class="string">"&#123;"</span>, <span class="string">"&#125;"</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> obj.toString();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(<span class="keyword">final</span> String format, <span class="keyword">final</span> Object... arguments)</span> </span>&#123;</span><br><span class="line">    log.info(format, arguments);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>実行ログ<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br></pre></td><td class="code"><pre><span class="line">[DEBUG] <span class="built_in">Start</span> loading SQL template.[C:\git\uroborosql-sample\target\classes\sql]</span><br><span class="line">[DEBUG] Loading SQL template.[]</span><br><span class="line">[DEBUG] Loading SQL template.[ddl]</span><br><span class="line">[DEBUG] Loading SQL template.[department]</span><br><span class="line">[DEBUG] Loading SQL template.[employee]</span><br><span class="line">[DEBUG] Loading SQL template.[relation]</span><br><span class="line">[DEBUG] Loading SQL template.[setup]</span><br><span class="line">[DEBUG] Enum [name：CLS_GENDER_MALE, value：M] added to parameter.</span><br><span class="line">[DEBUG] Enum [name：CLS_GENDER_FEMALE, value：F] added to parameter.</span><br><span class="line">[DEBUG] Enum [name：CLS_GENDER_OTHER, value：O] added to parameter.</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">-- employee</span><br><span class="line">drop table <span class="keyword">if</span> exists employee cascade;</span><br><span class="line">create table employee (</span><br><span class="line">  emp_no NUMBER(<span class="number">11</span>) <span class="keyword">not</span> null</span><br><span class="line">  , first_name VARCHAR(<span class="number">20</span>) <span class="keyword">not</span> null</span><br><span class="line">  , last_name VARCHAR(<span class="number">20</span>) <span class="keyword">not</span> null</span><br><span class="line">  , birth_date <span class="built_in">DATE</span> <span class="keyword">not</span> null</span><br><span class="line">  , gender CHAR(<span class="number">1</span>) <span class="keyword">not</span> null</span><br><span class="line">  , lock_version NUMBER(<span class="number">10</span>) <span class="keyword">not</span> null default <span class="number">0</span></span><br><span class="line">  , constraint employee_PKC primary key (emp_no)</span><br><span class="line">) ;</span><br><span class="line">-- dept_emp</span><br><span class="line">drop table <span class="keyword">if</span> exists dept_emp cascade;</span><br><span class="line">create table dept_emp (</span><br><span class="line">  emp_no NUMBER(<span class="number">11</span>) <span class="keyword">not</span> null</span><br><span class="line">  , dept_no NUMBER(<span class="number">4</span>) <span class="keyword">not</span> null</span><br><span class="line">  , constraint dept_emp_PKC primary key (emp_no,dept_no)</span><br><span class="line">) ;</span><br><span class="line">-- department</span><br><span class="line">drop table <span class="keyword">if</span> exists department cascade;</span><br><span class="line">create table department (</span><br><span class="line">  dept_no NUMBER(<span class="number">4</span>) <span class="keyword">not</span> null</span><br><span class="line">  , dept_name VARCHAR(<span class="number">100</span>) <span class="keyword">not</span> null</span><br><span class="line">  , lock_version NUMBER(<span class="number">10</span>) <span class="keyword">not</span> null default <span class="number">0</span></span><br><span class="line">  , constraint department_PKC primary key (dept_no)</span><br><span class="line">) ;</span><br><span class="line">comment on table employee is 'employee';</span><br><span class="line">comment on column employee.emp_no is 'emp_no';</span><br><span class="line">comment on column employee.first_name is 'first_name';</span><br><span class="line">comment on column employee.last_name is 'last_name';</span><br><span class="line">comment on column employee.birth_date is 'birth_date';</span><br><span class="line">comment on column employee.gender is 'gender   ''F''emale/''M''ale/''O''ther';</span><br><span class="line">comment on column employee.lock_version is 'lock_version';</span><br><span class="line">comment on table dept_emp is 'dept_emp';</span><br><span class="line">comment on column dept_emp.emp_no is 'emp_no';</span><br><span class="line">comment on column dept_emp.dept_no is 'dept_no';</span><br><span class="line">comment on table department is 'department';</span><br><span class="line">comment on column department.dept_no is 'dept_no';</span><br><span class="line">comment on column department.dept_name is 'dept_name';</span><br><span class="line">comment on column department.lock_version is 'lock_version'</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [ddl/create_tables] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">018</span>]</span><br><span class="line">[INFO ] ddl/create_tables count=<span class="number">0</span></span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1001</span>, 'sales');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1002</span>, 'export');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1003</span>, 'accounting');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1004</span>, 'personnel');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0001</span>, 'Bob', 'Smith', '<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>', 'M');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0002</span>, 'Susan', 'Davis', '<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>', 'F');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0003</span>, 'John', 'Wilson', '<span class="number">1982</span>-<span class="number">05</span>-<span class="number">08</span>', 'M');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0004</span>, 'Sharon', 'Johnson', '<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>', 'F');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0005</span>, 'Stephen', 'Taylor', '<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>', 'M');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0001</span>, '<span class="number">1001</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0002</span>, '<span class="number">1001</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0003</span>, '<span class="number">1002</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0004</span>, '<span class="number">1003</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0005</span>, '<span class="number">1004</span>')</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [setup/insert_data] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">007</span>]</span><br><span class="line">[INFO ] setup/insert_data count=<span class="number">1</span></span><br><span class="line">[INFO ] select department data (collect)</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_no)], Result：[false], Parameter：[dept_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_name)], Result：[false], Parameter：[dept_name:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* department/select_department */</span><br><span class="line">  DEPT.DEPT_NO    AS  DEPT_NO</span><br><span class="line">, DEPT.DEPT_NAME    AS  DEPT_NAME</span><br><span class="line">, DEPT.LOCK_VERSION AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  DEPARTMENT  DEPT</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/select_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">005</span>]</span><br><span class="line">[INFO ] &#123;deptNo=<span class="number">1001</span>,deptName=sales,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;deptNo=<span class="number">1002</span>,deptName=export,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;deptNo=<span class="number">1003</span>,deptName=accounting,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;deptNo=<span class="number">1004</span>,deptName=personnel,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] select department data (collect) <span class="built_in">set</span> param(dept_no=<span class="number">1001</span>)</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_no)], Result：[true], Parameter：[dept_no:[<span class="number">1001</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_name)], Result：[false], Parameter：[dept_name:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* department/select_department */</span><br><span class="line">  DEPT.DEPT_NO    AS  DEPT_NO</span><br><span class="line">, DEPT.DEPT_NAME    AS  DEPT_NAME</span><br><span class="line">, DEPT.LOCK_VERSION AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  DEPARTMENT  DEPT</span><br><span class="line">WHERE</span><br><span class="line">DEPT.DEPT_NO  = ?/*dept_no*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[dept_no], Value[<span class="number">1001</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/select_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;deptNo=<span class="number">1001</span>,deptName=sales,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] select department data with Entity (collect)</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[false], Parameter：[deptNo:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1001</span>, deptName=sales, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1002</span>, deptName=export, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1003</span>, deptName=accounting, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1004</span>, deptName=personnel, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] select department data with Entity (collect) <span class="built_in">set</span> param(deptNo=<span class="number">1001</span>)</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[true], Parameter：[deptNo:[<span class="number">1001</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1001</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1001</span>, deptName=sales, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] select department data by key (<span class="built_in">find</span>)</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[true], Parameter：[deptNo:[<span class="number">1002</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1002</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1002</span>, deptName=export, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] select first employee data.(Optional)</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">1</span>,firstName=Bob,lastName=Smith,birthDate=<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] select employee data (stream)</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">1</span>,firstName=Bob,lastName=Smith,birthDate=<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">2</span>,firstName=Susan,lastName=Davis,birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">3</span>,firstName=John,lastName=Wilson,birthDate=<span class="number">1982</span>-<span class="number">05</span>-<span class="number">08</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">4</span>,firstName=Sharon,lastName=Johnson,birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">5</span>,firstName=Stephen,lastName=Taylor,birthDate=<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[true], Parameter：[birth_date_from:[<span class="number">1990</span>,<span class="number">1</span>,<span class="number">1</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line">WHERE</span><br><span class="line">EMP.BIRTH_DATE  &gt;=  ?/*birth_date_from*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[birth_date_from], Value[<span class="number">1990</span>-<span class="number">01</span>-<span class="number">01</span>], Class[LocalDate]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">4</span>,firstName=Sharon,lastName=Johnson,birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">5</span>,firstName=Stephen,lastName=Taylor,birthDate=<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[true], Parameter：[gender_list:[&#123;F&#125;]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line">WHERE</span><br><span class="line">EMP.GENDER    IN  (?)/*gender_list*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[gender_list], Value[[Ljava.lang.Object;@<span class="number">69</span>e9510a], Class[Object[]]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">2</span>,firstName=Susan,lastName=Davis,birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">4</span>,firstName=Sharon,lastName=Johnson,birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[true], Parameter：[female:[true],female:[true]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line">WHERE</span><br><span class="line">EMP.GENDER    = 'F'/*#CLS_GENDER_FEMALE*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">2</span>,firstName=Susan,lastName=Davis,birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">4</span>,firstName=Sharon,lastName=Johnson,birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] select employee data with Entity (stream)</span><br><span class="line">[DEBUG] Evaluation Expression：[empNo != null], Result：[false], Parameter：[empNo:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(firstName)], Result：[false], Parameter：[firstName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(lastName)], Result：[false], Parameter：[lastName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[birthDate != null], Result：[false], Parameter：[birthDate:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(gender)], Result：[false], Parameter：[gender:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Employee */</span><br><span class="line">   EMP_NO AS  EMP_NO  -- emp_no</span><br><span class="line">  , FIRST_NAME  AS  FIRST_NAME  -- first_name</span><br><span class="line">  , LAST_NAME AS  LAST_NAME -- last_name</span><br><span class="line">  , BIRTH_DATE  AS  BIRTH_DATE  -- birth_date</span><br><span class="line">  , GENDER  AS  GENDER  -- gender  'F'emale/'M'ale/'O'ther</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.EMPLOYEE</span><br><span class="line">ORDER BY </span><br><span class="line">   EMP_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">1</span>, firstName=Bob, lastName=Smith, birthDate=<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>, gender=M, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">2</span>, firstName=Susan, lastName=Davis, birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>, gender=F, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">3</span>, firstName=John, lastName=Wilson, birthDate=<span class="number">1982</span>-<span class="number">05</span>-<span class="number">08</span>, gender=M, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">4</span>, firstName=Sharon, lastName=Johnson, birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>, gender=F, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">5</span>, firstName=Stephen, lastName=Taylor, birthDate=<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>, gender=M, lockVersion=<span class="number">0</span>]</span><br><span class="line">[DEBUG] Evaluation Expression：[empNo != null], Result：[false], Parameter：[empNo:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(firstName)], Result：[false], Parameter：[firstName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(lastName)], Result：[false], Parameter：[lastName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[birthDate != null], Result：[true], Parameter：[birthDate:[<span class="number">1970</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(gender)], Result：[false], Parameter：[gender:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Employee */</span><br><span class="line">   EMP_NO AS  EMP_NO  -- emp_no</span><br><span class="line">  , FIRST_NAME  AS  FIRST_NAME  -- first_name</span><br><span class="line">  , LAST_NAME AS  LAST_NAME -- last_name</span><br><span class="line">  , BIRTH_DATE  AS  BIRTH_DATE  -- birth_date</span><br><span class="line">  , GENDER  AS  GENDER  -- gender  'F'emale/'M'ale/'O'ther</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.EMPLOYEE</span><br><span class="line">WHERE</span><br><span class="line">  BIRTH_DATE = ?/*birthDate*/</span><br><span class="line">ORDER BY </span><br><span class="line">   EMP_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[birthDate], Value[<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>], Class[LocalDate]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">1</span>, firstName=Bob, lastName=Smith, birthDate=<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>, gender=M, lockVersion=<span class="number">0</span>]</span><br><span class="line">[DEBUG] Evaluation Expression：[empNo != null], Result：[false], Parameter：[empNo:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(firstName)], Result：[false], Parameter：[firstName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(lastName)], Result：[false], Parameter：[lastName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[birthDate != null], Result：[false], Parameter：[birthDate:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(gender)], Result：[true], Parameter：[gender:[F,FEMALE,<span class="number">1</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Employee */</span><br><span class="line">   EMP_NO AS  EMP_NO  -- emp_no</span><br><span class="line">  , FIRST_NAME  AS  FIRST_NAME  -- first_name</span><br><span class="line">  , LAST_NAME AS  LAST_NAME -- last_name</span><br><span class="line">  , BIRTH_DATE  AS  BIRTH_DATE  -- birth_date</span><br><span class="line">  , GENDER  AS  GENDER  -- gender  'F'emale/'M'ale/'O'ther</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.EMPLOYEE</span><br><span class="line">WHERE</span><br><span class="line">  GENDER = ?/*gender*/</span><br><span class="line">ORDER BY </span><br><span class="line">   EMP_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[gender], Value[F], Class[Gender]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">2</span>, firstName=Susan, lastName=Davis, birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>, gender=F, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] Employee [empNo=<span class="number">4</span>, firstName=Sharon, lastName=Johnson, birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>, gender=F, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] delete tables with sql literal</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">delete from dept_emp</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] delete dept_emp count=<span class="number">5</span></span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">delete from department</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] delete department count=<span class="number">4</span></span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">delete from employee</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] delete employee count=<span class="number">5</span></span><br><span class="line">[INFO ] commit!</span><br><span class="line">[INFO ] create new transaction.</span><br><span class="line">[INFO ] department/insert_department batch insert.</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* department/insert_department */</span><br><span class="line">INTO</span><br><span class="line">  DEPARTMENT</span><br><span class="line">(</span><br><span class="line">  DEPT_NO</span><br><span class="line">, DEPT_NAME</span><br><span class="line">, LOCK_VERSION</span><br><span class="line">) VALUES (</span><br><span class="line">  ?/*dept_no*/</span><br><span class="line">, ?/*dept_name*/</span><br><span class="line">, <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="number">4</span> items Added <span class="keyword">for</span> batch process.</span><br><span class="line">[DEBUG] Execute batch process.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/insert_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">001</span>]</span><br><span class="line">[INFO ] department/insert_department count=<span class="number">4</span></span><br><span class="line">[INFO ] employee/insert_employee batch insert.</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* employee/insert_employee */</span><br><span class="line">INTO</span><br><span class="line">  EMPLOYEE</span><br><span class="line">(</span><br><span class="line">  EMP_NO</span><br><span class="line">, FIRST_NAME</span><br><span class="line">, LAST_NAME</span><br><span class="line">, BIRTH_DATE</span><br><span class="line">, GENDER</span><br><span class="line">, LOCK_VERSION</span><br><span class="line">) VALUES (</span><br><span class="line">  ?/*emp_no*/</span><br><span class="line">, ?/*first_name*/</span><br><span class="line">, ?/*last_name*/</span><br><span class="line">, ?/*birth_date*/</span><br><span class="line">, ?/*gender*/</span><br><span class="line">, <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="number">2</span> items Added <span class="keyword">for</span> batch process.</span><br><span class="line">[DEBUG] Execute batch process.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/insert_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* employee/insert_employee */</span><br><span class="line">INTO</span><br><span class="line">  EMPLOYEE</span><br><span class="line">(</span><br><span class="line">  EMP_NO</span><br><span class="line">, FIRST_NAME</span><br><span class="line">, LAST_NAME</span><br><span class="line">, BIRTH_DATE</span><br><span class="line">, GENDER</span><br><span class="line">, LOCK_VERSION</span><br><span class="line">) VALUES (</span><br><span class="line">  ?/*emp_no*/</span><br><span class="line">, ?/*first_name*/</span><br><span class="line">, ?/*last_name*/</span><br><span class="line">, ?/*birth_date*/</span><br><span class="line">, ?/*gender*/</span><br><span class="line">, <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="number">2</span> items Added <span class="keyword">for</span> batch process.</span><br><span class="line">[DEBUG] Execute batch process.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/insert_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* employee/insert_employee */</span><br><span class="line">INTO</span><br><span class="line">  EMPLOYEE</span><br><span class="line">(</span><br><span class="line">  EMP_NO</span><br><span class="line">, FIRST_NAME</span><br><span class="line">, LAST_NAME</span><br><span class="line">, BIRTH_DATE</span><br><span class="line">, GENDER</span><br><span class="line">, LOCK_VERSION</span><br><span class="line">) VALUES (</span><br><span class="line">  ?/*emp_no*/</span><br><span class="line">, ?/*first_name*/</span><br><span class="line">, ?/*last_name*/</span><br><span class="line">, ?/*birth_date*/</span><br><span class="line">, ?/*gender*/</span><br><span class="line">, <span class="number">0</span></span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="number">1</span> items Added <span class="keyword">for</span> batch process.</span><br><span class="line">[DEBUG] Execute batch process.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/insert_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] employee/insert_employee count=<span class="number">5</span></span><br><span class="line">[INFO ] relation/insert_dept_emp batch insert.</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* relation/insert_dept_emp */</span><br><span class="line">INTO</span><br><span class="line">  DEPT_EMP</span><br><span class="line">(</span><br><span class="line">  EMP_NO</span><br><span class="line">, DEPT_NO</span><br><span class="line">) VALUES (</span><br><span class="line">  ?/*emp_no*/</span><br><span class="line">, ?/*dept_no*/</span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="number">5</span> items Added <span class="keyword">for</span> batch process.</span><br><span class="line">[DEBUG] Execute batch process.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [relation/insert_dept_emp] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] batch execute.</span><br><span class="line">[INFO ] relation/insert_dept_emp count=<span class="number">5</span></span><br><span class="line">[INFO ] employee/select_employee <span class="keyword">in</span> transaction select</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">1</span>,firstName=Bob,lastName=Smith,birthDate=<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">2</span>,firstName=Susan,lastName=Davis,birthDate=<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">3</span>,firstName=John,lastName=Wilson,birthDate=<span class="number">1982</span>-<span class="number">05</span>-<span class="number">08</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">4</span>,firstName=Sharon,lastName=Johnson,birthDate=<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>,gender=F,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] &#123;empNo=<span class="number">5</span>,firstName=Stephen,lastName=Taylor,birthDate=<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>,gender=M,lockVersion=<span class="number">0</span>&#125;</span><br><span class="line">[INFO ] transaction rollback!</span><br><span class="line">[INFO ] insert with Entity</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">INSERT /* mapping @ Department */ INTO PUBLIC.DEPARTMENT(</span><br><span class="line">   DEPT_NO</span><br><span class="line">  , DEPT_NAME</span><br><span class="line">  , LOCK_VERSION</span><br><span class="line">) VALUES (</span><br><span class="line">   ?/*deptNo*/</span><br><span class="line">  , ?/*deptName*/</span><br><span class="line">  , ?/*lockVersion*/</span><br><span class="line">)</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Long]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">2</span>], Parameter name[deptName], Value[information], Class[String]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">3</span>], Parameter name[lockVersion], Value[<span class="number">0</span>], Class[Long]]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[true], Parameter：[deptNo:[<span class="number">1005</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1005</span>, deptName=information, lockVersion=<span class="number">0</span>]</span><br><span class="line">[INFO ] update with Entity</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">UPDATE /* mapping @ Department */ PUBLIC.DEPARTMENT SET </span><br><span class="line">   DEPT_NO = ?/*deptNo*/</span><br><span class="line">  , DEPT_NAME = ?/*deptName*/</span><br><span class="line">  , LOCK_VERSION = ?/*lockVersion*/ + 1</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">  AND LOCK_VERSION = ?/*lockVersion*/</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Long]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">2</span>], Parameter name[deptName], Value[Information System], Class[String]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">3</span>], Parameter name[lockVersion], Value[<span class="number">0</span>], Class[Long]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">4</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Long]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">5</span>], Parameter name[lockVersion], Value[<span class="number">0</span>], Class[Long]]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[true], Parameter：[deptNo:[<span class="number">1005</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] Department [deptNo=<span class="number">1005</span>, deptName=Information System, lockVersion=<span class="number">1</span>]</span><br><span class="line">[INFO ] delete with Entity</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">DELETE /* mapping @ Department */ FROM PUBLIC.DEPARTMENT</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[DEBUG] Evaluation Expression：[deptNo != null], Result：[true], Parameter：[deptNo:[<span class="number">1005</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(deptName)], Result：[false], Parameter：[deptName:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[lockVersion != null], Result：[false], Parameter：[lockVersion:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* mapping @ Department */</span><br><span class="line">   DEPT_NO  AS  DEPT_NO -- dept_no</span><br><span class="line">  , DEPT_NAME AS  DEPT_NAME -- dept_name</span><br><span class="line">  , LOCK_VERSION  AS  LOCK_VERSION  -- lock_version</span><br><span class="line">FROM PUBLIC.DEPARTMENT</span><br><span class="line">WHERE</span><br><span class="line">  DEPT_NO = ?/*deptNo*/</span><br><span class="line">ORDER BY </span><br><span class="line">   DEPT_NO</span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[deptNo], Value[<span class="number">1005</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [null] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO ] deptNo = <span class="number">1005</span> deleted!!</span><br><span class="line">[INFO ] transaction rollback!</span><br><span class="line">[INFO ] employee/select_employee after transaction select. employee is empty.</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(emp_no)], Result：[false], Parameter：[emp_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(first_name)], Result：[false], Parameter：[first_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(last_name)], Result：[false], Parameter：[last_name:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_from)], Result：[false], Parameter：[birth_date_from:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(birth_date_to)], Result：[false], Parameter：[birth_date_to:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[gender_list != null], Result：[false], Parameter：[gender_list:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[female != null and female], Result：[false], Parameter：[female:[null],female:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* employee/select_employee */</span><br><span class="line">  EMP.EMP_NO      AS  EMP_NO</span><br><span class="line">, EMP.FIRST_NAME    AS  FIRST_NAME</span><br><span class="line">, EMP.LAST_NAME   AS  LAST_NAME</span><br><span class="line">, EMP.BIRTH_DATE    AS  BIRTH_DATE</span><br><span class="line">, EMP.GENDER      AS  GENDER</span><br><span class="line">, EMP.LOCK_VERSION  AS  LOCK_VERSION</span><br><span class="line">FROM</span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [employee/select_employee] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">000</span>]</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] BUILD SUCCESS</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br><span class="line">[INFO] Total <span class="built_in">time</span>: <span class="number">1</span>.<span class="number">510</span> s</span><br><span class="line">[INFO] Finished <span class="built_in">at</span>: XXXX-XX-XXT13:<span class="number">56</span>:<span class="number">04</span>+<span class="number">09</span>:<span class="number">00</span></span><br><span class="line">[INFO] Final Memory: <span class="number">15</span>M/<span class="number">361</span>M</span><br><span class="line">[INFO] ------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></p><h2 id="サンプルプロジェクトの構成"><a href="#サンプルプロジェクトの構成" class="headerlink" title="サンプルプロジェクトの構成"></a>サンプルプロジェクトの構成</h2><p>ではサンプルアプリケーションの構成を見ていきましょう。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">uroborosql-sample</span><br><span class="line">  ├─REPL</span><br><span class="line">  │  └─repl.properties</span><br><span class="line">  └─src</span><br><span class="line"><span class="code">     └─main</span></span><br><span class="line"><span class="code">        ├─java</span></span><br><span class="line"><span class="code">        │  └─jp</span></span><br><span class="line"><span class="code">        │      └─co</span></span><br><span class="line"><span class="code">        │          └─future</span></span><br><span class="line"><span class="code">        │              └─uroborosql</span></span><br><span class="line"><span class="code">        │                  └─sample</span></span><br><span class="line"><span class="code">        │                      └─Main.java</span></span><br><span class="line"><span class="code">        │                      └─entity</span></span><br><span class="line"><span class="code">        │                      │   └─Department.java</span></span><br><span class="line"><span class="code">        │                      │   └─Employee.java</span></span><br><span class="line"><span class="code">        │                      └─type</span></span><br><span class="line"><span class="code">        │                          └─Gender.java</span></span><br><span class="line"><span class="code">        └─resources</span></span><br><span class="line"><span class="code">            ├─logback.xml</span></span><br><span class="line"><span class="code">            ├─data</span></span><br><span class="line"><span class="code">            │   ├─department.tsv</span></span><br><span class="line"><span class="code">            │   ├─dept_emp.tsv</span></span><br><span class="line"><span class="code">            │   └─employee.tsv</span></span><br><span class="line"><span class="code">            └─sql</span></span><br><span class="line"><span class="code">                ├─ddl</span></span><br><span class="line"><span class="code">                │   └─create_tables.sql</span></span><br><span class="line"><span class="code">                └─setup</span></span><br><span class="line"><span class="code">                │   └─insert_data.sql</span></span><br><span class="line"><span class="code">                ├─department</span></span><br><span class="line"><span class="code">                │   ├─insert_department.sql</span></span><br><span class="line"><span class="code">                │   └─select_department.sql</span></span><br><span class="line"><span class="code">                ├─employee</span></span><br><span class="line"><span class="code">                │   ├─insert_employee.sql</span></span><br><span class="line"><span class="code">                │   └─select_employee.sql</span></span><br><span class="line"><span class="code">                └─relation</span></span><br><span class="line"><span class="code">                    └─insert_dept_emp.sql</span></span><br></pre></td></tr></table></figure><p>主要なファイルの説明です</p><table><thead><tr><th style="text-align:left">ファイル</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">Main.java</td><td style="text-align:left">uroborosql-sampleのメインプログラムです。</td></tr><tr><td style="text-align:left">Department.java / Employee.java</td><td style="text-align:left">テーブル構造を表すEntityクラスです。メインプログラムの中で使用します。</td></tr><tr><td style="text-align:left">Gender.java</td><td style="text-align:left">性別を表すEnumクラスです。メインプログラムの中で使用します。</td></tr><tr><td style="text-align:left">sqlフォルダ配下のSQL</td><td style="text-align:left">uroborosqlで実行するSQLファイルです。</td></tr><tr><td style="text-align:left">dataフォルダ配下のTSV</td><td style="text-align:left">テーブルデータ作成用のTSVファイルです。Mainクラスの中でテーブルへの一括データ投入を行う際のデータとして利用します。</td></tr><tr><td style="text-align:left">logback.xml</td><td style="text-align:left">ログ出力設定ファイルです。</td></tr></tbody></table><h2 id="SQLの実行方法"><a href="#SQLの実行方法" class="headerlink" title="SQLの実行方法"></a>SQLの実行方法</h2><p>Main.javaを見ていきましょう。</p><p>mainメソッドの中で最初にSqlConfigクラスを作成しています。<br>ここでは<a href="http://www.h2database.com/html/main.html" target="_blank" rel="noopener">H2DB</a>のメモリDBに接続するSqlConfigインスタンスを生成しています。<br>SqlConfigの生成にはUroboroSQLクラスによるBuilderAPIを使用します。</p><ul><li>基本的な呼出方法（DBへの接続情報のみ指定）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create SqlConfig</span></span><br><span class="line">SqlConfig config = UroboroSQL.builder(<span class="string">"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"</span>, <span class="string">"sa"</span>, <span class="string">""</span>).build();</span><br></pre></td></tr></table></figure><ul><li>設定のカスタマイズ（定数の指定や検索結果の取得方法変更）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create SqlConfig</span></span><br><span class="line">SqlConfig config = UroboroSQL</span><br><span class="line">    .builder(<span class="string">"jdbc:h2:mem:test;DB_CLOSE_DELAY=-1"</span>, <span class="string">"sa"</span>, <span class="string">""</span>)</span><br><span class="line">      <span class="comment">// SqlContextFactoryの設定（Enum定数パッケージ設定の追加）</span></span><br><span class="line">      .setSqlContextFactory(<span class="keyword">new</span> SqlContextFactoryImpl()</span><br><span class="line">        .setEnumConstantPackageNames(Arrays.asList(Gender.class.getPackage().getName())))</span><br><span class="line">      <span class="comment">// SqlAgentFactoryの設定（Queryの戻り値のMapのキー文字列のデフォルトCaseFormat設定の追加）</span></span><br><span class="line">      .setSqlAgentFactory(<span class="keyword">new</span> SqlAgentFactoryImpl().setDefaultMapKeyCaseFormat(CaseFormat.CAMEL_CASE))</span><br><span class="line">    .build();</span><br></pre></td></tr></table></figure><p>SqlConfig生成時のカスタマイズの詳細については <a href="../advanced">高度な操作</a>を参照してください。</p><p>次に生成したSqlConfigからuroboroSQLの中核となるクラスであるSqlAgentを生成します。<br>uroboroSQLのそれぞれの処理はSqlAgentを使って呼び出します。<br>SqlAgentはAutoClosableインタフェースを実装しているので、try-with-resources文で囲むことで処理終了時にクローズされます。<br>このときSqlAgentの中に保持するConnectionなどもクローズされるため、クローズ漏れによるメモリリークを防ぐことができます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create SqlAgent. SqlAgent implements AutoClosable.</span></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// ここにSQL発行の処理を実装する</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以降の処理はtry-with-resourcesの中で行います。</p><p>接続したDBにテーブルを作成と初期データの登録を行います。<br>uroboroSQLでは実行するSQLをファイルパスに似た表現（<code>SQL名</code>と呼ぶ）で指定します。<br>下の例ではクラスパス上にあるsqlフォルダ配下のddl/create_tables.sqlを指定してSQL更新処理を実行します。</p><p>更新処理を行う場合、<code>SqlAgent#update(&quot;[SQL名]&quot;)</code>メソッドを使用してSqlUpdateを取得し、続けてバインドパラメータの設定や<br>Updateの実行を行います。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create table :  テーブル作成</span></span><br><span class="line">agent.update(<span class="string">"ddl/create_tables"</span>).count();</span><br><span class="line"><span class="comment">// setup data : 初期データ挿入</span></span><br><span class="line">agent.update(<span class="string">"setup/insert_data"</span>).count();</span><br></pre></td></tr></table></figure><p>ddl/create_tables.sqlで作成したテーブルの構成は以下になります。<br><img src="erd.png" alt="ERD" title="テーブル構成"></p><p>登録したデータを検索してみましょう。<br>検索を行う際は、<code>SqlAgent#query(&quot;[SQL名]&quot;)</code>メソッドを使用してSqlQueryを取得し、続けてバインドパラメータの設定や<br>Queryの実行を行います。</p><p>uroboroSQLでは検索結果をいくつかの形式で取得することができます。</p><table><thead><tr><th style="text-align:left">メソッド</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">SqlQuery#collect()</td><td style="text-align:left">検索結果の各行をMapに詰めたListの形式で取得する</td></tr><tr><td style="text-align:left">SqlQuery#stream()</td><td style="text-align:left">検索結果をJava8で追加されたStreamの形式で取得する</td></tr><tr><td style="text-align:left">SqlQuery#resultSet()</td><td style="text-align:left">検索結果のResultSetを取得する</td></tr><tr><td style="text-align:left">SqlQuery#first()</td><td style="text-align:left">検索結果の１件目を取得する。取得できない場合はRuntimeException</td></tr><tr><td style="text-align:left">SqlQuery#findFirst()</td><td style="text-align:left">検索結果の１件目を取得する。戻り値はOptional</td></tr></tbody></table><p>例えば、以下のように呼び出します。</p><ul><li>検索結果の各行をMapに詰めたListの形式で取得する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; departments = agent.query(<span class="string">"department/select_department"</span>)</span><br><span class="line">  .param(<span class="string">"dept_no"</span>, <span class="number">1001</span>)</span><br><span class="line">  .collect();</span><br></pre></td></tr></table></figure><ul><li>検索結果をJava8で追加されたStreamの形式で取得する</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">agent.query(<span class="string">"employee/select_employee"</span>)</span><br><span class="line">  .paramList(<span class="string">"gender_list"</span>, Gender.FEMALE, Gender.MALE)</span><br><span class="line">  .stream().forEach(m -&gt; log(toS(m)));</span><br></pre></td></tr></table></figure><p>ここで実行されるSQLは以下のようになっています。</p><ul><li>department/select_department.sql</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="comment">/* _SQL_ID_ */</span></span><br><span class="line">  DEPT.DEPT_NO  <span class="keyword">AS</span>  DEPT_NO</span><br><span class="line">,  DEPT.DEPT_NAME  <span class="keyword">AS</span>  DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  DEPARTMENT  DEPT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">1</span>        =  <span class="number">1</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(dept_no)*/</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT.DEPT_NO  =  <span class="comment">/*dept_no*/</span><span class="number">1</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(dept_name)*/</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT.DEPT_NAME  =  <span class="comment">/*dept_name*/</span><span class="string">'sample'</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><ul><li><code>/* _SQL_ID_ */</code> はSQLを特定するID(SQL_IDといいます)を付与するための予約語で、実行時にSQLファイルを特定するための文字列に変換されます。</li><li><code>/*IF*/ ... /*END*/</code>は条件分岐で、IFの後ろの評価結果が<code>True</code>となる場合に<code>/*IF*/</code>と<code>/*END*/</code>で囲まれた部分が出力されます。</li><li><code>/*dept_no*/</code>はバインドパラメータで、実行時に<code>?</code>に変換され、SqlQueryに設定したパラメータがSQLへバインドされます。</li><li><code>/*dept_no*/</code>の後ろの<code>1</code>はテスト用データです。このようにテスト用データをSQL文に記述しておくことで、このSQLを<br>SQLクライアントツールで実行する際にエラーにならずに文法の確認を行うことができます。</li></ul><p>SQLで使用できる構文の詳細については<a href="../basics/#2WaySQL">2WaySQL</a>を参照してください。</p><p>処理結果のCommitやRollbackもSqlAgent経由で行います。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// commit</span></span><br><span class="line">agent.commit();</span><br><span class="line"></span><br><span class="line"><span class="comment">// rollback</span></span><br><span class="line">agent.rollback();</span><br></pre></td></tr></table></figure><p>uroboroSQLでは、これらの基本的な操作のほか、バッチ処理やトランザクション処理なども行うことができます。<br>詳細については<a href="../basics/#基本操作">基本操作</a>を参照してください。</p><h2 id="SQL-REPL"><a href="#SQL-REPL" class="headerlink" title="SQL-REPL"></a>SQL-REPL</h2><p>ここまではJavaアプリケーションからuroboroSQLを利用する場合の説明でした。<br>uroboroSQLにはもう一つ特徴的な機能として、SQLを対話しながら実行するためのREPL機能を提供しています。</p><p>今度はこのREPL機能を利用してみましょう。</p><p>REPLを起動するためには<code>jp.co.future.uroborosql.client.SqlREPL</code>クラスを実行する必要があります。<br>サンプルアプリケーションでSqlREPLクラスを実行するためには以下のコマンドを実行します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -PREPL</span><br></pre></td></tr></table></figure></p><p>実行すると以下のようにタイトル表示とコマンド説明、設定値の情報が表示され、そのあとコマンド入力状態になります。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">===========================================================</span><br><span class="line">                 _                    ____   ___  _</span><br><span class="line"> _   _ _ __ ___ | |__   ___  _ __ ___/ ___| / _ \| |</span><br><span class="line">| | | | '__/ _ \| '_ \ / _ \| '__/ _ \___ \| | | | |</span><br><span class="line">| |_| | | | (_) | |_) | (_) | | | (_) |__) | |_| | |___</span><br><span class="line"> \__,_|_|  \___/|_.__/ \___/|_|  \___/____/ \__\_\_____|</span><br><span class="line"></span><br><span class="line">uroboroSQL SQL REPL <span class="built_in">ver</span>.<span class="number">0</span>.<span class="number">5</span>.<span class="number">0</span></span><br><span class="line">===========================================================</span><br><span class="line"></span><br><span class="line">Commands :</span><br><span class="line">        query   : execute query from loaded sql file.</span><br><span class="line">                ex1) query [sql file name]&lt;Enter&gt; : Execute SQL without parameter.</span><br><span class="line">                ex2) query [sql file name] param1=val1 param2=val2 ...&lt;Enter&gt; : Execute SQL with the specified parameters.</span><br><span class="line">        update  : execute update from loaded sql file.</span><br><span class="line">                ex1) update [sql file name]&lt;Enter&gt; : Execute SQL without parameter.</span><br><span class="line">                ex2) update [sql file name] param1=val1 param2=val2 ...&lt;Enter&gt; : Execute SQL with the specified parameters.</span><br><span class="line">        view    : view sql file.</span><br><span class="line">                ex) view [sql file name]&lt;Enter&gt; : Show sql file contents.</span><br><span class="line">        list    : list loaded sql files.</span><br><span class="line">                ex1) list&lt;Enter&gt; : Show all loaded sql file(s).</span><br><span class="line">                ex2) list keyword&lt;Enter&gt; : Show loaded sql file(s) filter by keyword.</span><br><span class="line">        history : list command history.</span><br><span class="line">                ex1) history&lt;Enter&gt; : Show all command history.</span><br><span class="line">                ex2) history keyword&lt;Enter&gt; : Show command history filter by keyword.</span><br><span class="line">        driver  : list loaded drivers.</span><br><span class="line">        reload  : reload sql files.</span><br><span class="line">        <span class="built_in">cls</span>     : clear screen.</span><br><span class="line">        <span class="built_in">help</span>    : show this message.</span><br><span class="line">        <span class="keyword">exit</span>    : <span class="keyword">exit</span> SQL REPL. `CTRL+C` is an alias.</span><br><span class="line"></span><br><span class="line">[Properties]</span><br><span class="line">db.url=jdbc:h2:file:./target/db/repldb;</span><br><span class="line">sql.additionalClassPath=src/main/resources;$&#123;user.home&#125;/.m2/repository/com/h2database/h2/<span class="number">1</span>.<span class="number">4</span>.<span class="number">192</span>/h2-<span class="number">1</span>.<span class="number">4</span>.<span class="number">192</span>.jar</span><br><span class="line">db.user=sa</span><br><span class="line">db.password=</span><br><span class="line"></span><br><span class="line">uroborosql &gt;</span><br></pre></td></tr></table></figure><p>まずは<code>help[Enter]</code>と入力してみましょう。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; <span class="built_in">help</span>[Enter]</span><br><span class="line"><span class="function">HELP:</span></span><br><span class="line"><span class="function">===========================================================</span></span><br><span class="line"><span class="function">                 <span class="title">_</span>                    <span class="title">____</span>   <span class="title">___</span>  <span class="title">_</span></span></span><br><span class="line"><span class="function"> <span class="title">_</span>   <span class="title">_</span> <span class="title">_</span> <span class="title">__</span> <span class="title">___</span> | |<span class="title">__</span>   <span class="title">___</span>  <span class="title">_</span> <span class="title">__</span> <span class="title">___</span>/ <span class="title">___</span>| / <span class="title">_</span> \| |</span></span><br><span class="line"><span class="function">| | | | '<span class="title">__</span>/ <span class="title">_</span> \| '<span class="title">_</span> \ / <span class="title">_</span> \| '<span class="title">__</span>/ <span class="title">_</span> \<span class="title">___</span> \| | | | |</span></span><br><span class="line"><span class="function">| |<span class="title">_</span>| | | | (<span class="title">_</span>) | |<span class="title">_</span>) | (<span class="title">_</span>) | | | (<span class="title">_</span>) |<span class="title">__</span>) | |<span class="title">_</span>| | |<span class="title">___</span></span></span><br><span class="line"><span class="function"> \<span class="title">__</span>,<span class="title">_</span>|<span class="title">_</span>|  \<span class="title">___</span>/|<span class="title">_.__</span>/ \<span class="title">___</span>/|<span class="title">_</span>|  \<span class="title">___</span>/<span class="title">____</span>/ \<span class="title">__</span>\<span class="title">_</span>\<span class="title">_____</span>|</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">uroboroSQL</span> <span class="title">SQL</span> <span class="title">REPL</span> <span class="title">ver</span>.0.5.0</span></span><br><span class="line"><span class="function">===========================================================</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Commands</span> :</span></span><br><span class="line"><span class="function">        <span class="title">query</span>   : <span class="title">execute</span> <span class="title">query</span> <span class="title">from</span> <span class="title">loaded</span> <span class="title">sql</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex1</span>) <span class="title">query</span> [<span class="title">sql</span> <span class="title">file</span> <span class="title">name</span>]&lt;<span class="title">Enter</span>&gt; : <span class="title">Execute</span> <span class="title">SQL</span> <span class="title">without</span> <span class="title">parameter</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex2</span>) <span class="title">query</span> [<span class="title">sql</span> <span class="title">file</span> <span class="title">name</span>] <span class="title">param1</span>=<span class="title">val1</span> <span class="title">param2</span>=<span class="title">val2</span> ...&lt;<span class="title">Enter</span>&gt; : <span class="title">Execute</span> <span class="title">SQL</span> <span class="title">with</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">parameters</span>.</span></span><br><span class="line"><span class="function">        <span class="title">update</span>  : <span class="title">execute</span> <span class="title">update</span> <span class="title">from</span> <span class="title">loaded</span> <span class="title">sql</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex1</span>) <span class="title">update</span> [<span class="title">sql</span> <span class="title">file</span> <span class="title">name</span>]&lt;<span class="title">Enter</span>&gt; : <span class="title">Execute</span> <span class="title">SQL</span> <span class="title">without</span> <span class="title">parameter</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex2</span>) <span class="title">update</span> [<span class="title">sql</span> <span class="title">file</span> <span class="title">name</span>] <span class="title">param1</span>=<span class="title">val1</span> <span class="title">param2</span>=<span class="title">val2</span> ...&lt;<span class="title">Enter</span>&gt; : <span class="title">Execute</span> <span class="title">SQL</span> <span class="title">with</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">parameters</span>.</span></span><br><span class="line"><span class="function">        <span class="title">view</span>    : <span class="title">view</span> <span class="title">sql</span> <span class="title">file</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex</span>) <span class="title">view</span> [<span class="title">sql</span> <span class="title">file</span> <span class="title">name</span>]&lt;<span class="title">Enter</span>&gt; : <span class="title">Show</span> <span class="title">sql</span> <span class="title">file</span> <span class="title">contents</span>.</span></span><br><span class="line"><span class="function">        <span class="title">list</span>    : <span class="title">list</span> <span class="title">loaded</span> <span class="title">sql</span> <span class="title">files</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex1</span>) <span class="title">list</span>&lt;<span class="title">Enter</span>&gt; : <span class="title">Show</span> <span class="title">all</span> <span class="title">loaded</span> <span class="title">sql</span> <span class="title">file</span>(<span class="title">s</span>).</span></span><br><span class="line"><span class="function">                <span class="title">ex2</span>) <span class="title">list</span> <span class="title">keyword</span>&lt;<span class="title">Enter</span>&gt; : <span class="title">Show</span> <span class="title">loaded</span> <span class="title">sql</span> <span class="title">file</span>(<span class="title">s</span>) <span class="title">filter</span> <span class="title">by</span> <span class="title">keyword</span>.</span></span><br><span class="line"><span class="function">        <span class="title">history</span> : <span class="title">list</span> <span class="title">command</span> <span class="title">history</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex1</span>) <span class="title">history</span>&lt;<span class="title">Enter</span>&gt; : <span class="title">Show</span> <span class="title">all</span> <span class="title">command</span> <span class="title">history</span>.</span></span><br><span class="line"><span class="function">                <span class="title">ex2</span>) <span class="title">history</span> <span class="title">keyword</span>&lt;<span class="title">Enter</span>&gt; : <span class="title">Show</span> <span class="title">command</span> <span class="title">history</span> <span class="title">filter</span> <span class="title">by</span> <span class="title">keyword</span>.</span></span><br><span class="line"><span class="function">        <span class="title">driver</span>  : <span class="title">list</span> <span class="title">loaded</span> <span class="title">drivers</span>.</span></span><br><span class="line"><span class="function">        <span class="title">reload</span>  : <span class="title">reload</span> <span class="title">sql</span> <span class="title">files</span>.</span></span><br><span class="line"><span class="function">        <span class="title">cls</span>     : <span class="title">clear</span> <span class="title">screen</span>.</span></span><br><span class="line"><span class="function">        <span class="title">help</span>    : <span class="title">show</span> <span class="title">this</span> <span class="title">message</span>.</span></span><br><span class="line"><span class="function">        <span class="title">exit</span>    : <span class="title">exit</span> <span class="title">SQL</span> <span class="title">REPL</span>. `<span class="title">CTRL</span>+<span class="title">C</span>` <span class="title">is</span> <span class="title">an</span> <span class="title">alias</span>.</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">uroborosql</span> &gt;</span></span><br></pre></td></tr></table></figure></p><p>ヘルプが表示され、使用できるコマンドの一覧が表示されます。</p><p>REPLを立ち上げた状態では接続したDB（H2DB メモリDB）には何もない状態なので、まずはテーブルを作成します。<br>サンプルアプリケーションで利用できるSQLファイルを確認しましょう。</p><p><code>list[Enter]</code>と入力します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; list[Enter]</span><br><span class="line"><span class="function">LIST:</span></span><br><span class="line"><span class="function"><span class="title">ddl</span>/<span class="title">create_tables</span></span></span><br><span class="line"><span class="function"><span class="title">employee</span>/<span class="title">select_employee</span></span></span><br><span class="line"><span class="function"><span class="title">employee</span>/<span class="title">insert_employee</span></span></span><br><span class="line"><span class="function"><span class="title">department</span>/<span class="title">insert_department</span></span></span><br><span class="line"><span class="function"><span class="title">setup</span>/<span class="title">insert_data</span></span></span><br><span class="line"><span class="function"><span class="title">department</span>/<span class="title">select_department</span></span></span><br><span class="line"><span class="function"><span class="title">relation</span>/<span class="title">insert_dept_emp</span></span></span><br><span class="line"><span class="function"><span class="title">uroborosql</span> &gt;</span></span><br></pre></td></tr></table></figure></p><p>ロード済みのSQLファイルのSQL名がわかります。<br>テーブルを作成するために<code>ddl/create_tables</code>を実行します。<br><code>ddl/create_tables</code>はDDLなので実行するためには<code>update</code>コマンドを使用します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&gt; update ddl/create_tables[Enter]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">-- employee</span><br><span class="line">drop table <span class="keyword">if</span> exists employee cascade;</span><br><span class="line">create table employee (</span><br><span class="line">  emp_no NUMBER(<span class="number">11</span>) <span class="keyword">not</span> null</span><br><span class="line">  , first_name VARCHAR(<span class="number">20</span>) <span class="keyword">not</span> null</span><br><span class="line">  , last_name VARCHAR(<span class="number">20</span>) <span class="keyword">not</span> null</span><br><span class="line">  , birth_date <span class="built_in">DATE</span> <span class="keyword">not</span> null</span><br><span class="line">  , gender CHAR(<span class="number">1</span>) <span class="keyword">not</span> null</span><br><span class="line">  , constraint employee_PKC primary key (emp_no)</span><br><span class="line">) ;</span><br><span class="line">-- dept_emp</span><br><span class="line">drop table <span class="keyword">if</span> exists dept_emp cascade;</span><br><span class="line">create table dept_emp (</span><br><span class="line">  emp_no NUMBER(<span class="number">11</span>) <span class="keyword">not</span> null</span><br><span class="line">  , dept_no NUMBER(<span class="number">4</span>) <span class="keyword">not</span> null</span><br><span class="line">  , constraint dept_emp_PKC primary key (emp_no,dept_no)</span><br><span class="line">) ;</span><br><span class="line">-- department</span><br><span class="line">drop table <span class="keyword">if</span> exists department cascade;</span><br><span class="line">create table department (</span><br><span class="line">  dept_no NUMBER(<span class="number">4</span>) <span class="keyword">not</span> null</span><br><span class="line">  , dept_name VARCHAR(<span class="number">100</span>) <span class="keyword">not</span> null</span><br><span class="line">  , constraint department_PKC primary key (dept_no)</span><br><span class="line">) ;</span><br><span class="line">comment on table employee is 'employee';</span><br><span class="line">comment on column employee.emp_no is 'emp_no';</span><br><span class="line">comment on column employee.first_name is 'first_name';</span><br><span class="line">comment on column employee.last_name is 'last_name';</span><br><span class="line">comment on column employee.birth_date is 'birth_date';</span><br><span class="line">comment on column employee.gender is 'gender     ''F''emale/''M''ale/''O''ther';</span><br><span class="line">comment on table dept_emp is 'dept_emp';</span><br><span class="line">comment on column dept_emp.emp_no is 'emp_no';</span><br><span class="line">comment on column dept_emp.dept_no is 'dept_no';</span><br><span class="line">comment on table department is 'department';</span><br><span class="line">comment on column department.dept_no is 'dept_no';</span><br><span class="line">comment on column department.dept_name is 'dept_name'</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [ddl/create_tables] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">008</span>]</span><br><span class="line">update sql[ddl/create_tables] end. row count=<span class="number">0</span></span><br><span class="line">uroborosql &gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p><code>ddl/create_tables</code>が実行され、DBにテーブルが作成されました。<br>続いて初期データを投入しましょう。</p><p><code>setup/insert_data</code>を実行します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&gt; update setup/insert_data[Enter]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1001</span>, 'sales');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1002</span>, 'export');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1003</span>, 'accounting');</span><br><span class="line">insert into department (dept_no, dept_name) values (<span class="number">1004</span>, 'personnel');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0001</span>, 'Bob', 'Smith', '<span class="number">1970</span>-<span class="number">01</span>-<span class="number">02</span>', 'M');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0002</span>, 'Susan', 'Davis', '<span class="number">1969</span>-<span class="number">02</span>-<span class="number">10</span>', 'F');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0003</span>, 'John', 'Wilson', '<span class="number">1982</span>-<span class="number">05</span>-<span class="number">08</span>', 'M');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0004</span>, 'Sharon', 'Johnson', '<span class="number">1990</span>-<span class="number">01</span>-<span class="number">20</span>', 'F');</span><br><span class="line">insert into employee (emp_no, first_name, last_name, birth_date, gender) values (<span class="number">0005</span>, 'Stephen', 'Taylor', '<span class="number">2003</span>-<span class="number">12</span>-<span class="number">31</span>', 'M');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0001</span>, '<span class="number">1001</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0002</span>, '<span class="number">1001</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0003</span>, '<span class="number">1002</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0004</span>, '<span class="number">1003</span>');</span><br><span class="line">insert into dept_emp (emp_no, dept_no) values (<span class="number">0005</span>, '<span class="number">1004</span>')</span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute update SQL.</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [setup/insert_data] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">003</span>]</span><br><span class="line">update sql[setup/insert_data] end. row count=<span class="number">1</span></span><br><span class="line">uroborosql &gt;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p><p>これで書くテーブルに初期データが挿入されました。<br>では、挿入したデータを検索してみましょう。</p><p>検索を行う場合は<code>query</code>コマンドを使用します。<br><code>query</code>の後に実行するSQLを指定します。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt; query department/select_department[Enter]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_no)], Result：[false], Parameter：[dept_no:[null]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_name)], Result：[false], Parameter：[dept_name:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* department/select_department */</span><br><span class="line">        DEPT.DEPT_NO    AS      DEPT_NO</span><br><span class="line">,       DEPT.DEPT_NAME  AS      DEPT_NAME</span><br><span class="line">FROM</span><br><span class="line">        DEPARTMENT      DEPT</span><br><span class="line">WHERE</span><br><span class="line">        <span class="number">1</span>                               =       <span class="number">1</span></span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[INFO ]</span><br><span class="line">+-------+----------+</span><br><span class="line">|DEPT_NO|DEPT_NAME |</span><br><span class="line">+-------+----------+</span><br><span class="line">|   <span class="number">1001</span>|sales     |</span><br><span class="line">|   <span class="number">1002</span>|export    |</span><br><span class="line">|   <span class="number">1003</span>|accounting|</span><br><span class="line">|   <span class="number">1004</span>|personnel |</span><br><span class="line">+-------+----------+</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/select_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">009</span>]</span><br><span class="line">query sql[department/select_department] end.</span><br><span class="line">uroborosql &gt;</span><br></pre></td></tr></table></figure></p><p>ここではバインドパラメータを指定しなかったため、絞込み条件のないSQLが実行され検索結果として4件のデータが取得できました。</p><p>REPLでは上の結果のように、</p><ul><li>実行するSQL</li><li>バインドパラメータ</li><li>SQL文の中の評価式とその評価結果</li><li>検索結果</li><li>実行時間</li></ul><p>が表示されるので、どういう風にSQLが実行されたのかが良く分かるようになっています。</p><p>次にバインドパラメータを指定して検索してみましょう。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span></span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_no)], Result：[true], Parameter：[dept_no:[<span class="number">1001</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_name)], Result：[false], Parameter：[dept_name:[null]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* department/select_department */</span><br><span class="line">        DEPT.DEPT_NO    AS      DEPT_NO</span><br><span class="line">,       DEPT.DEPT_NAME  AS      DEPT_NAME</span><br><span class="line">FROM</span><br><span class="line">        DEPARTMENT      DEPT</span><br><span class="line">WHERE</span><br><span class="line">        <span class="number">1</span>                               =       <span class="number">1</span></span><br><span class="line">AND     DEPT.DEPT_NO    =       ?/*dept_no*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[dept_no], Value[<span class="number">1001</span>], Class[Integer]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[INFO ]</span><br><span class="line">+-------+---------+</span><br><span class="line">|DEPT_NO|DEPT_NAME|</span><br><span class="line">+-------+---------+</span><br><span class="line">|   <span class="number">1001</span>|sales    |</span><br><span class="line">+-------+---------+</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/select_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">001</span>]</span><br><span class="line">query sql[department/select_department] end.</span><br><span class="line">uroborosql &gt;</span><br></pre></td></tr></table></figure></p><p><code>dept_no</code>に1001を指定して検索しています。<br>この時、SQL文の評価式である/*IF SF.isNotEmpty(dept_no)*/が<code>true</code>となりSQLのWHERE句にDEPT_NOの条件が追加されバインドパラメータがバインドされます。<br>その結果、検索結果は1件になっています。</p><p>このようにSQL名の後ろに<code>バインドパラメータ名</code>=<code>値</code>という形でバインドパラメータを記述することでバインドパラメータを指定してSQLを実行することができます。</p><p>バインドパラメータが複数ある場合は<code>バインドパラメータ名1</code>=<code>値1</code> <code>バインドパラメータ名2</code>=<code>値2</code> … という風に各パラメータの間を空白で区切って指定してください。</p><ul><li>バインドパラメータを複数指定する例<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span> dept_name=sales</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_no)], Result：[true], Parameter：[dept_no:[<span class="number">1001</span>]]</span><br><span class="line">[DEBUG] Evaluation Expression：[SF.isNotEmpty(dept_name)], Result：[true], Parameter：[dept_name:[&#123;s,a,l,e,s&#125;,<span class="number">0</span>]]</span><br><span class="line">[DEBUG] Executed SQL[</span><br><span class="line">SELECT /* department/select_department */</span><br><span class="line">        DEPT.DEPT_NO    AS      DEPT_NO</span><br><span class="line">,       DEPT.DEPT_NAME  AS      DEPT_NAME</span><br><span class="line">FROM</span><br><span class="line">        DEPARTMENT      DEPT</span><br><span class="line">WHERE</span><br><span class="line">        <span class="number">1</span>                               =       <span class="number">1</span></span><br><span class="line">AND     DEPT.DEPT_NO    =       ?/*dept_no*/</span><br><span class="line">AND     DEPT.DEPT_NAME  =       ?/*dept_name*/</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">1</span>], Parameter name[dept_no], Value[<span class="number">1001</span>], Class[Integer]]</span><br><span class="line">[DEBUG] <span class="built_in">Set</span> the parameter.[INDEX[<span class="number">2</span>], Parameter name[dept_name], Value[sales], Class[String]]</span><br><span class="line">[DEBUG] Execute search SQL.</span><br><span class="line">[INFO ]</span><br><span class="line">+-------+---------+</span><br><span class="line">|DEPT_NO|DEPT_NAME|</span><br><span class="line">+-------+---------+</span><br><span class="line">|   <span class="number">1001</span>|sales    |</span><br><span class="line">+-------+---------+</span><br><span class="line">[DEBUG] SQL execution <span class="built_in">time</span> [department/select_department] : [<span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>.<span class="number">001</span>]</span><br><span class="line">query sql[department/select_department] end.</span><br><span class="line">uroborosql &gt;</span><br></pre></td></tr></table></figure></li></ul><p>REPLではコード補完を利用することができます。<br>コード補完を使用することで選択できる情報が適宜補完され、ストレスなくREPLの操作を行うことができます。</p><p>例えば、以下のコマンドを実行する際、<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span> dept_name=sales</span><br></pre></td></tr></table></figure></p><p>Tabキーを押下することで、選択可能な候補が表示され、選択肢が特定できる場合はコードが補完されます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">uroborosql &gt; q</span><br><span class="line">↓ [Tab]を入力</span><br><span class="line">uroborosql &gt; query    // 一意に特定できる場合は補完される</span><br><span class="line">↓　[Space]de[Tab]を入力</span><br><span class="line">department/insert_department  department/select_department    // 選択可能なSQL名候補の表示</span><br><span class="line">uroborosql &gt; query department/    // 特定できるところまでが補完される</span><br><span class="line">↓　s[Tab]を入力</span><br><span class="line">uroborosql &gt; query department/select_department　　　// 一意に特定できたため、SQL名がコード補完される</span><br><span class="line">↓　[Space][Tab]を入力</span><br><span class="line">dept_no     dept_name　// 選択可能なバインドパラメータ候補の表示</span><br><span class="line">↓　dept_no=<span class="number">1001</span>を入力</span><br><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span></span><br><span class="line">↓　[Space][Tab]を入力</span><br><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span> dept_name  　　// すでに選択されたバインドパラメータは選択候補にならず、dept_nameが特定できるため補完される</span><br><span class="line">↓　=salesを入力</span><br><span class="line">uroborosql &gt; query department/select_department dept_no=<span class="number">1001</span> dept_name=sales</span><br></pre></td></tr></table></figure><p>REPLを終了する場合はコマンド<code>quit</code>,もしくは<code>exit</code>を入力してください。<br><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; quit[Enter]</span><br><span class="line">SQL REPL end.</span><br></pre></td></tr></table></figure></p><p>終了メッセージが表示されてREPLが終了します。</p><p>さて、ここまでREPLの操作を説明してきましたが、DB接続情報やSQLファイルの場所はどこで指定していたのでしょうか。<br>実は<code>jp.co.future.uroborosql.client.SqlREPL</code>を実行する際、引数としてプロパティファイルを指定します。このプロパティファイルにDB接続情報やSQLファイルの場所などREPLを実行するのに必要な情報が記載されています。</p><p>pom.xmlのREPL実行部分<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>repl<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>java<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">workingDirectory</span>&gt;</span>$&#123;basedir&#125;<span class="tag">&lt;/<span class="name">workingDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>jp.co.future.uroborosql.client.SqlREPL<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">argument</span>&gt;</span>REPL/repl.properties<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>process-classes<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>初期設定ではプロパティファイルの場所は<code>REPL/repl.properties</code>になっています。<br>REPL/repl.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.url=jdbc:h2:file:./target/db/repldb;</span><br><span class="line">db.user=sa</span><br><span class="line">db.password=</span><br><span class="line"></span><br><span class="line">sql.additionalClassPath=$&#123;user.home&#125;/.m2/repository/com/h2database/h2/1.4.192/h2-1.4.192.jar</span><br></pre></td></tr></table></figure></p><table><thead><tr><th style="text-align:left">プロパティ名</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">db.url</td><td style="text-align:left">DB接続URL</td></tr><tr><td style="text-align:left">db.userDB接続ユーザ</td></tr><tr><td style="text-align:left">db.password</td><td style="text-align:left">DB接続パスワード</td></tr><tr><td style="text-align:left">sql.additionalClassPath</td><td style="text-align:left">REPL起動時に起動時クラスパス以外でクラスパスに追加する場所。<code>;</code>で区切ることで複数指定可。SQLファイルのルート（sqlフォルダの親フォルダ）をクラスパスに追加することで、自動的にSQLファイルがロードされます。合わせて接続するDBのJDBCドライバを含むJarを指定することで動的にJDBCドライバを読み込みます。</td></tr></tbody></table><p>このプロパティファイルを変更することでいろいろなDBに接続することができるようになります。</p><p>これまで見てきたようにREPLを利用することで簡単にSQL実行や動作確認ができるので、SQL開発には欠かせないツールになります。<br>色々なSQLを記述してREPLで試してみてください。</p><p>これで <em>Getting Started</em> は終了です。</p><p>uroboroSQLで使用するSQLの文法や基本的な操作については<a href="../basics/">基本操作</a>を参照してください。</p><div style="font-size:130%; font-weight:bold;"><br>  <a href="../why_uroborosql" style="float:left">&#60;&#60; Why uroboroSQL?</a><a href="../basics" style="float:right">基本操作 &#62;&#62;</a><br></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本操作</title>
      <link href="/uroborosql-doc/basics/"/>
      <url>/uroborosql-doc/basics/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="#前提知識">前提知識</a><ul><li><a href="#2WaySQL">2WaySQL</a></li><li><a href="#OGNL式言語">OGNL式言語</a></li></ul></li><li><a href="#基本操作">基本操作</a><ul><li><a href="#DB接続">DB接続</a></li><li><a href="#SqlAgentインスタンスの取得">SqlAgentインスタンスの取得</a></li><li><a href="#SQLファイルの管理">SQLファイルの管理</a></li><li><a href="#共通API">共通API</a></li><li><a href="#検索">検索</a></li><li><a href="#更新">更新</a></li><li><a href="#バッチ更新">バッチ更新</a></li><li><a href="#プロシージャの実行">プロシージャの実行</a></li><li><a href="#DAOインタフェース">DAOインタフェース</a></li></ul></li><li><a href="#トランザクション">トランザクション</a><ul><li><a href="#トランザクションの開始と終了">トランザクションの開始と終了</a></li><li><a href="#コミットとロールバック">コミットとロールバック</a></li><li><a href="#セーブポイント">セーブポイント</a></li></ul></li></ul><hr><p>この章では、uroboroSQLの基本操作をまとめています。</p><h2 id="前提知識"><a href="#前提知識" class="headerlink" title="前提知識"></a>前提知識</h2><p>基本操作について説明する前にuroboroSQLを利用する上で必要になる以下の２つの項目について説明します。</p><ul><li><a href="#2WaySQL">2WaySQL</a></li><li><a href="#OGNL式言語">OGNL式言語</a></li></ul><h2 id="2WaySQL"><a href="#2WaySQL" class="headerlink" title="2WaySQL"></a>2WaySQL</h2><p>2WaySQLは普通のSQL文をファイルに保存したものです。<br>そのままSQLクライアントツールで実行することもできますし、uroboroSQLで読み込んで実行することも出来ます。<br>（２つの実行方法があることから<strong>2Way</strong>SQLと呼ばれます）</p><h3 id="基本文法"><a href="#基本文法" class="headerlink" title="基本文法"></a>基本文法</h3><h3 id="バインドパラメータ"><a href="#バインドパラメータ" class="headerlink" title="バインドパラメータ"></a>バインドパラメータ</h3><p>SQLにバインドするパラメータを <code>/*parameter name*/</code>の形式で指定することができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  DEPARTMENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  DEPT_NO    =  <span class="comment">/*dept_no*/</span><span class="number">10</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT_NAME  =  <span class="comment">/*dept_name*/</span><span class="string">'Sales'</span></span><br></pre></td></tr></table></figure><p>上の例では、<code>/*dept_no*/</code>, <code>/*dept_name*/</code> がバインドパラメータで、uroboroSQLから実行される際はこの部分が<code>?</code>に置き換わり、後ろの<code>10</code>や<code>&#39;Sales&#39;</code>が削除されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  DEPARTMENT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  DEPT_NO    =  ?<span class="comment">/*dept_no*/</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT_NAME  =  ?<span class="comment">/*dept_name*/</span></span><br></pre></td></tr></table></figure><p>List型の値をIN句のバインドパラメータとして指定することもできます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">/*IF gender_list != null*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.GENDER  <span class="keyword">IN</span>  <span class="comment">/*gender_list*/</span>(<span class="string">'M'</span>)</span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>上の例に<code>gender_list</code>として{“M”, “F”}を指定すると以下のように変換されます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">/*IF gender_list != null*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.GENDER  <span class="keyword">IN</span>  (?, ?)<span class="comment">/*gender_list*/</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>バインドパラメータに指定できるJava型は以下になります。</p><h4 id="バインド出来るパラメータの型"><a href="#バインド出来るパラメータの型" class="headerlink" title="バインド出来るパラメータの型"></a>バインド出来るパラメータの型</h4><ul><li>プリミティブ型とそのラッパー型（ただし char と java.lang.Character は除く）</li><li>java.math.BigDecimal</li><li>java.math.BigInteger</li><li>java.lang.String</li><li>byte[]</li><li>java.sql.Date</li><li>java.sql.Time</li><li>java.sql.Timestamp</li><li>java.sql.Array</li><li>java.sql.Ref</li><li>java.sql.Blob</li><li>java.sql.Clob</li><li>java.sql.SQLXML</li><li>java.sql.Struct</li><li>列挙型(enum)</li><li>java.util.Date</li><li>java.util.Optional</li><li>java.util.OptionalInt</li><li>java.util.OptionalLong</li><li>java.util.OptionalDouble</li><li>java.time.LocalDateTime</li><li>java.time.OffsetDateTime</li><li>java.time.ZonedDateTime</li><li>java.time.LocalDate</li><li>java.time.LocalTime</li><li>java.time.OffsetTime</li><li>java.time.Year</li><li>java.time.YearMonth</li><li>java.time.MonthDay</li><li>java.time.Month</li><li>java.time.DayOfWeek</li></ul><h3 id="置換文字列"><a href="#置換文字列" class="headerlink" title="置換文字列"></a>置換文字列</h3><p>置換文字列を使うと動的に変更することができます。</p><p>置換文字列は <code>/*$parameter name*/</code> もしくは <code>/*#parameter name*/</code>と記述します。<br> <code>/*#parameter name*/</code> と記述した場合は、置換文字列の前後を<code>&#39;</code>(シングルクォート)で囲みます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span>    <span class="comment">/*$table_name*/</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  GENDER  =  <span class="comment">/*#gender*/</span></span><br></pre></td></tr></table></figure><p>上の例では、<code>table_name</code>や<code>gender</code>に設定した値でSQLが置換されます。</p><blockquote><p>置換文字列はバインドパラメータではなく発行されるSQLを構築する時点で置換される点に注意してください。<br>データベースによってはSQL文が動的に変わることで解析結果のキャッシュが適用されず、<br>解析処理が都度実行されることでCPUに負荷をかける可能性があります。</p></blockquote><ul><li><code>table_name</code>に<code>employee</code>, <code>gender</code>に<code>M</code>を設定した場合<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span>  employee</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  GENDER  =  <span class="string">'M'</span></span><br></pre></td></tr></table></figure></li></ul><p>という風に置換されたSQLが発行されることになります。</p><blockquote><p>置換文字列はSQLインジェクションを防ぐため、変換の際にシングルクォート<code>&#39;</code>を<code>&#39;&#39;</code>にエスケープします。__</p></blockquote><h3 id="条件分岐"><a href="#条件分岐" class="headerlink" title="条件分岐"></a>条件分岐</h3><p>/*IF*/, /*ELIF*/, /*ELSE*/, /*END*/ を使用してSQLを動的に変更することができます。</p><p>IF, ELIF の評価式としてOGNL式言語を利用します。<br>（ OGNL式言語の説明は<a href="#OGNL式言語">こちら</a> )<br>また、標準でSF関数(<em>S</em>tring <em>F</em>unction)を使うことができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(birth_date_from) and SF.isNotEmpty(birth_date_to)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  <span class="keyword">BETWEEN</span>  <span class="comment">/*birth_date_from*/</span><span class="string">'1990-01-01'</span>  <span class="keyword">AND</span>  <span class="comment">/*birth_date_to*/</span><span class="string">'1999-12-31'</span></span><br><span class="line"><span class="comment">/*ELIF SF.isNotEmpty(birth_date_from)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  &gt;=    <span class="comment">/*birth_date_from*/</span><span class="string">'1990-01-01'</span></span><br><span class="line"><span class="comment">/*ELIF SF.isNotEmpty(birth_date_to)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  &lt;    <span class="comment">/*birth_date_to*/</span><span class="string">'1999-12-31'</span></span><br><span class="line"><span class="comment">/*ELSE*/</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>上の例ではIFの評価式として<code>SF.isNotEmpty()</code>を使用してバインドパラメータが<code>null</code>または<code>&quot;&quot;</code>でないことを評価しています。</p><p>バインドパラメータとして<code>birth_date_from</code>に<code>2000-01-01</code>, <code>birth_date_to</code>に<code>2010-12-31</code>を指定した場合、生成されるSQLは以下のようになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  EMP.BIRTH_DATE  <span class="keyword">BETWEEN</span>  ?<span class="comment">/*birth_date_from*/</span>  <span class="keyword">AND</span>  ?<span class="comment">/*birth_date_to*/</span></span><br></pre></td></tr></table></figure><p>そしてバインドパラメータが解決された結果、以下のSQLが実行されます。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  EMP.BIRTH_DATE  <span class="keyword">BETWEEN</span>  <span class="string">'2000-01-01'</span><span class="comment">/*birth_date_from*/</span>  <span class="keyword">AND</span>  <span class="string">'2010-12-31'</span><span class="comment">/*birth_date_to*/</span></span><br></pre></td></tr></table></figure></p><p>ここでEMP.BIRTH_DATEの前にあった<code>AND</code>が消えていることに注目してください。<br>uroboroSQLでは動的SQLを生成する際、WHERE句の後ろに<code>AND</code>や<code>OR</code>が来る場合はそれを削除してSQL文として正しい状態にします。</p><p>ただし、上の加工前SQLのようにSQL文として不正な状態になってしまうのでSQLクライアントツールからは実行できないという欠点もあります。<br>このようにSQL文として不正になることを防ぐために、WHERE句のあとに他に影響を与えない評価を入れる方法があります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">1</span>        =    <span class="number">1</span>  // &lt;<span class="comment">-- 必ずtrueとなる評価を入れる</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(birth_date_from) and SF.isNotEmpty(birth_date_to)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  <span class="keyword">BETWEEN</span>  <span class="comment">/*birth_date_from*/</span><span class="string">'1990-01-01'</span>  <span class="keyword">AND</span>  <span class="comment">/*birth_date_to*/</span><span class="string">'1999-12-31'</span></span><br><span class="line"><span class="comment">/*ELIF SF.isNotEmpty(birth_date_from)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  &gt;=    <span class="comment">/*birth_date_from*/</span><span class="string">'1990-01-01'</span></span><br><span class="line"><span class="comment">/*ELIF SF.isNotEmpty(birth_date_to)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.BIRTH_DATE  &lt;    <span class="comment">/*birth_date_to*/</span><span class="string">'1999-12-31'</span></span><br><span class="line"><span class="comment">/*ELSE*/</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><h3 id="範囲の有効化"><a href="#範囲の有効化" class="headerlink" title="範囲の有効化"></a>範囲の有効化</h3><p>/*BEGIN*/, /*END*/ で囲まれた範囲は、その中の/*IF*/, /*ELIF*/のうち、どれか1つでも真(true)になった場合に出力されます。<br>範囲内の全ての評価式が偽（false）の場合、/*BEGIN*/, /*END*/ で囲まれた範囲は出力されません。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="comment">/*BEGIN*/</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(first_name)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.FIRST_NAME  =  <span class="comment">/*first_name*/</span><span class="string">'Bob'</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(last_name)*/</span></span><br><span class="line"><span class="keyword">AND</span>  EMP.LAST_NAME  =  <span class="comment">/*last_name*/</span><span class="string">'Smith'</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>上の例で、バインドパラメータ <code>first_name</code>に<code>Willson</code>, <code>last_name</code>に<code>null</code>を指定した場合は以下のようになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  EMP.FIRST_NAME  =  ?<span class="comment">/*first_name*/</span></span><br></pre></td></tr></table></figure><p>バインドパラメータ <code>first_name</code>, <code>last_name</code>ともに<code>null</code>を指定した場合は以下のようになります。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br></pre></td></tr></table></figure><p>/*BEGIN*/,/*END*/で囲まれたWHEREが出力されていないことがわかります。</p><h3 id="不要なカンマの除去"><a href="#不要なカンマの除去" class="headerlink" title="不要なカンマの除去"></a>不要なカンマの除去</h3><p>IF分岐を使って動的なSQLを構築する場合、カンマの有無が問題になる場合があります。<br>例えば以下のSQLでバインドパラメータ<code>detail=true</code>が指定された場合、<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="comment">/*IF detail*/</span></span><br><span class="line">,  FIRST_NAME</span><br><span class="line">,  LAST_NAME</span><br><span class="line">,  BIRTH_DATE</span><br><span class="line">,  GENDER</span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line">,  EMP_NO</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line"><span class="comment">/*IF detail*/</span></span><br><span class="line">,  BIRTH_DATE</span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line">,  EMP_NO</span><br></pre></td></tr></table></figure></p><p>生成されるSQLは以下になります。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">,  FIRST_NAME</span><br><span class="line">,  LAST_NAME</span><br><span class="line">,  BIRTH_DATE</span><br><span class="line">,  GENDER</span><br><span class="line">,  EMP_NO</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">,  BIRTH_DATE</span><br><span class="line">,  EMP_NO</span><br></pre></td></tr></table></figure></p><p>ここで<code>SELECT句</code>の直後や<code>ORDER BY句</code>の直後にカンマがあるとSQL文として不正になり、SQLの実行に失敗します。<br>これを避けるためuroboroSQLでは、生成後のSQLに含まれる不要なカンマを除去するようになっています。</p><p>実際に生成されるSQLは以下になります。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  FIRST_NAME     <span class="comment">-- 先頭のカンマが除去される</span></span><br><span class="line">,  LAST_NAME</span><br><span class="line">,  BIRTH_DATE</span><br><span class="line">,  GENDER</span><br><span class="line">,  EMP_NO</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">  BIRTH_DATE     <span class="comment">-- 先頭のカンマが除去される</span></span><br><span class="line">,  EMP_NO</span><br></pre></td></tr></table></figure></p><p>カンマが除去されるのは、以下の予約語の直後にカンマが出現した場合です。</p><ul><li>SELECT</li><li>ORDER BY</li><li>GROUP BY</li><li>(</li><li>SET</li></ul><h2 id="OGNL式言語"><a href="#OGNL式言語" class="headerlink" title="OGNL式言語"></a>OGNL式言語</h2><p>uroboroSQLでは、条件分岐の式として<a href="https://github.com/jkuhnert/ognl" target="_blank" rel="noopener">OGNL式言語</a>を利用することができます。<br>条件分岐の式として使用する場合、評価結果が真偽値(true/false)になるように記述してください。</p><p>以下にOGNLの基本文法を提示します。<br>OGNL文法の詳細は<a href="https://commons.apache.org/proper/commons-ognl/language-guide.html" target="_blank" rel="noopener">こちら</a>を参照してください。</p><h3 id="リテラル"><a href="#リテラル" class="headerlink" title="リテラル"></a>リテラル</h3><p>以下のリテラルが使用できます。</p><ul><li>“a”(java.lang.String)</li><li>‘a’(char)</li><li>1(int)</li><li>1L(long)</li><li>0.1F(float)</li><li>0.1D(double)</li><li>0.1B(java.math.BigDecimal)</li><li>1H(java.math.BigInteger)</li><li>true, false(Boolean)</li><li>null</li></ul><h3 id="演算子"><a href="#演算子" class="headerlink" title="演算子"></a>演算子</h3><p>以下の演算子が使用できます。</p><h4 id="算術演算子"><a href="#算術演算子" class="headerlink" title="算術演算子"></a>算術演算子</h4><ul><li>e1 + e2(足し算)</li><li>e1 - e2 (引き算)</li><li>e1 * e2 (掛け算)</li><li>e1 / e2 (割り算)</li><li>e1 % e2 (余り)</li></ul><h4 id="比較演算子"><a href="#比較演算子" class="headerlink" title="比較演算子"></a>比較演算子</h4><ul><li>e1 eq e2, e1 == e2 (等しい)  <ul><li>e1・e2のいずれかがnullの場合、両方ともnullの時のみe1とe2は等しい</li><li>e1・e2が同じオブジェクトの場合、またはequals()メソッドにより等しいと判断される場合、e1とe2は等しい</li><li>e1・e2が数値の場合、倍精度浮動小数点数が等しい時のみe1とe2は等しい</li><li>その以外の場合、e1とe2は等しくない</li></ul></li><li>e1 neq e2, e1 != e2 (等しくない)</li><li>e1 lt e2, e1 &lt; e2 (小なり)</li><li>e1 lte e2, e1 &lt;= e2 (小なりイコール)</li><li>e1 gt e2, e1 &gt; e2 (大なり)</li><li>e1 gte e2, e1 &gt;= e2 (大なりイコール)</li></ul><h4 id="論理演算子"><a href="#論理演算子" class="headerlink" title="論理演算子"></a>論理演算子</h4><ul><li>e1 or e2, e1 || e2 (論理和)</li><li>e1 and e2, e1 &amp;&amp; e2 (論理積)</li><li>not e, ! e (論理否定)</li></ul><h4 id="連結演算子"><a href="#連結演算子" class="headerlink" title="連結演算子"></a>連結演算子</h4><ul><li>e1 + e2 (文字列連結)</li></ul><h4 id="メソッド・フィールドの呼び出し"><a href="#メソッド・フィールドの呼び出し" class="headerlink" title="メソッド・フィールドの呼び出し"></a>メソッド・フィールドの呼び出し</h4><p>以下のようにメソッド・フィールドの呼び出しができます。</p><ul><li>e.method(args) (メソッドの呼び出し)</li><li>e.property (フィールドの呼び出し)</li></ul><h4 id="StringFunction-SF"><a href="#StringFunction-SF" class="headerlink" title="StringFunction(SF)"></a>StringFunction(SF)</h4><p>uroboroSQLではOGNL式を利用する際、標準でStringFunction（SF）を使用することができます。<br>OGNL式と合わせてStringFunctionクラスのメソッドを呼び出すことができます。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*IF SF.isNotEmpty(emp_no)*/</span></span><br><span class="line">   <span class="comment">-- emp_noがnull または ""でない場合に処理される</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><p>StringFunctionが提供するメソッドの一覧です。</p><table><thead><tr><th style="text-align:left">メソッド名</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">booean SF.isEmpty(String str)</td><td style="text-align:left">対象文字列が空文字であること判定する</td></tr><tr><td style="text-align:left">boolean SF.isNotEmpty(String str)</td><td style="text-align:left">対象文字列が空文字でないことを判定する</td></tr><tr><td style="text-align:left">boolean SF.isBlank(String str)</td><td style="text-align:left">対象文字列が空文字、もしくは空白であること判定する</td></tr><tr><td style="text-align:left">boolean SF.isNotBlank(String str)</td><td style="text-align:left">対象文字列が空文字、もしくは空白でないこと判定する</td></tr><tr><td style="text-align:left">String SF.trim(String str)</td><td style="text-align:left">文字列の前後の空白を除去する。nullを渡した場合は結果もnullとなる</td></tr><tr><td style="text-align:left">String SF.trimToEmpty(String str)</td><td style="text-align:left">文字列の前後の空白を除去する。nullを渡した場合は空文字となる</td></tr><tr><td style="text-align:left">String SF.left(String str, int len)</td><td style="text-align:left">文字列の先頭から指定した文字数の文字列を取得する</td></tr><tr><td style="text-align:left">String SF.right(String str, int len)</td><td style="text-align:left">文字列の最後から指定した文字数の文字列を取得する</td></tr><tr><td style="text-align:left">String SF.mid(String str, int pos, int len)</td><td style="text-align:left">文字列の指定した位置から指定した文字数の文字列を取得する</td></tr><tr><td style="text-align:left">String SF.rightPad(String str, int size)</td><td style="text-align:left">文字列の末尾に空白を埋めて指定された長さにする</td></tr><tr><td style="text-align:left">String SF.rightPad(String str, int size, char padChar)</td><td style="text-align:left">文字列の末尾に指定した埋め込み文字を埋めて指定された長さにする</td></tr><tr><td style="text-align:left">String SF.leftPad(String str, int size)</td><td style="text-align:left">文字列の先頭に空白を埋めて指定された長さにする</td></tr><tr><td style="text-align:left">String SF.leftPad(String str, int size, char padChar)</td><td style="text-align:left">文字列の先頭に指定した埋め込み文字を埋めて指定された長さにする</td></tr><tr><td style="text-align:left">String[] SF.split(String str)</td><td style="text-align:left">文字列を空白で区切って配列に格納します。<br>nullが入力された場合はnullを返します</td></tr><tr><td style="text-align:left">String[] SF.split(String str, char separatorChar)</td><td style="text-align:left">文字列を指定した区切り文字で区切って配列に格納します。<br>nullが入力された場合はnullを返します</td></tr><tr><td style="text-align:left">String[] SF.split(String str, String separatorChars, int max)</td><td style="text-align:left">文字列を指定した区切り文字で区切って配列に格納します。<br>nullが入力された場合はnullを返します</td></tr><tr><td style="text-align:left">String SF.capitalize(String str)</td><td style="text-align:left">文字列の先頭文字を大文字にする</td></tr><tr><td style="text-align:left">String SF.uncapitalize(String str)</td><td style="text-align:left">文字列の先頭を小文字にする</td></tr></tbody></table><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>uroboroSQLを利用した基本的なDB操作を説明します。</p><h3 id="DB接続"><a href="#DB接続" class="headerlink" title="DB接続"></a>DB接続</h3><p>まず最初にSQLを発行するDBへの接続を行います。<br>DBに接続するためには<code>SqlConfig</code>インタフェースのインスタンスを生成する必要があります。</p><p><code>SqlConfig</code>インスタンスは<code>UroboroSQL</code>クラスのビルダーメソッドを使用して生成します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JDBC接続を行うSqlConfigの生成</span></span><br><span class="line"><span class="comment">// SqlConfig config = UroboroSQL.builder(url, user, password).build();</span></span><br><span class="line">SqlConfig config = UroboroSQL.builder(<span class="string">"jdbc:h2:mem:uroborosql"</span>, <span class="string">"sa"</span>, <span class="string">""</span>).build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataSourceを使用したDB接続を行うSqlConfigの生成</span></span><br><span class="line"><span class="comment">// SqlConfig config = UroboroSQL.builder(datasource).build();</span></span><br><span class="line">Context context = <span class="keyword">new</span> InitialContext();</span><br><span class="line">DataSource dataSource = context.lookup(<span class="string">"java:comp/env/jdbc/datasource"</span>);</span><br><span class="line">SqlConfig config = UroboroSQL.builder(dataSource).build();</span><br></pre></td></tr></table></figure><p><code>UroboroSQL</code>クラスを使って<code>SqlConfig</code>インスタンスを生成する際、uroboroSQLの動作を変更する各種の設定も合わせて行うことができます。<br>設定の詳細については<a href="../advanced">高度な操作</a>を参照してください。</p><blockquote><p><code>SqlConfig</code>インスタンスはアプリケーションで接続先毎に１つ保持するようにしてください。<br>SQL発行の都度生成すると、不要なインスタンスの生成やSQLロード処理が実行されます。</p></blockquote><h3 id="SqlAgentインスタンスの取得"><a href="#SqlAgentインスタンスの取得" class="headerlink" title="SqlAgentインスタンスの取得"></a>SqlAgentインスタンスの取得</h3><p>次にすべての操作の基点となる<code>SqlAgent</code>インタフェースのインスタンスを取得します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// この中でSQLの操作を行う</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SQLの操作はすべてこの<code>SqlAgent</code>インスタンスを使って行うことになります。</p><p><code>SqlAgent</code>インタフェースは<code>java.lang.AutoClosable</code>インタフェースを実装しており、上の例のように<code>try-with-resources</code>の中で宣言することで、終了時に自動的にclose処理が呼び出され、中で保持しているConnectionなどのリソースオブジェクトも正しくクローズされます。</p><h3 id="SQLファイルの管理"><a href="#SQLファイルの管理" class="headerlink" title="SQLファイルの管理"></a>SQLファイルの管理</h3><p>uroboroSQLではSQL文の書かれたファイルのパスを指定してSQLを実行することができます。<br>その際、SQLファイルはクラスパスから参照できる場所に配置されている必要があります。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line"><span class="code">    └─main</span></span><br><span class="line"><span class="code">        └─resources</span></span><br><span class="line"><span class="code">            └─sql</span></span><br><span class="line"><span class="code">                ├─department</span></span><br><span class="line"><span class="code">                │    ├─insert_department.sql</span></span><br><span class="line"><span class="code">                │    └─select_department.sql</span></span><br><span class="line"><span class="code">                └─employee</span></span><br><span class="line"><span class="code">                     ├─insert_employee.sql</span></span><br><span class="line"><span class="code">                     └─select_employee.sql</span></span><br></pre></td></tr></table></figure><p>上のようなフォルダ構成の場合で、<code>src/main/resources/</code>がクラスパスに指定されている場合、<br>その下のsqlフォルダをルートフォルダとした相対パスでSQLファイルを指定することができます。  </p><p>それぞれのSQLファイルは以下のような<code>SQL名</code>となります</p><ul><li><code>insert_department.sql</code> -&gt; <code>department/insert_department</code></li><li><code>select_department.sql</code> -&gt; <code>department/select_department</code></li><li><code>insert_employee.sql</code> -&gt; <code>employee/insert_employee</code></li><li><code>select_employee.sql</code> -&gt; <code>employee/select_employee</code></li></ul><p>また、SQLファイルはjarの中にリソースとして含めることもできます。<br>その場合、リソースのルート直下のsqlフォルダをルートフォルダとした相対パスでSQLファイルを指定することができます。<br>SQLファイルのルートフォルダ（初期値：sql)は変更することができます。<br>変更方法の詳細は <a href="../advanced/#SQLファイルルートフォルダの設定">SQLファイルルートフォルダの設定</a> を参照してください。</p><h3 id="共通API"><a href="#共通API" class="headerlink" title="共通API"></a>共通API</h3><p>検索(<code>SqlQuery</code>)、更新(<code>SqlUpdate</code>)、バッチ更新(<code>SqlBatch</code>)、プロシージャ実行(<code>Procedure</code>)を行うクラスは、バインドパラメータや置換文字列の設定を行うためのAPI(<code>SqlFluent</code>)を実装しています。</p><p>バインドパラメータや置換文字列の設定はこのAPIを利用して設定を行ってください。<br>流れるAPI(Fluent API)を採用しているため、値の設定は連続して行うことができるようになっています。</p><p>パラメータ設定例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; department = agent.query(<span class="string">"department/select_department"</span>)</span><br><span class="line">  .param(<span class="string">"dept_no"</span>, <span class="number">1001</span>)</span><br><span class="line">  .param(<span class="string">"dept_name"</span>, <span class="string">"sales"</span>)</span><br><span class="line">  .first();</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:left">主なメソッド</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">SqlQuery#param(String key, Object value)</td><td style="text-align:left">バインドパラメータや置換文字列として使用するキーと値のセットを設定する</td></tr><tr><td style="text-align:left">SqlQuery#paramList(String key, Object… value)</td><td style="text-align:left">IN句のバインドパラメータに使用するキーと値のセットを設定する</td></tr><tr><td style="text-align:left">SqlQuery#paramMap(Map&lt;String, ?&gt; paramMap)</td><td style="text-align:left">引数のMapのKey/Valueのセットをパラメータに設定する</td></tr><tr><td style="text-align:left">SqlQuery#paramBean(Object bean)</td><td style="text-align:left">引数として渡されたObjectのフィールド名と値のセットをパラメータに設定する</td></tr></tbody></table><p>他にもパラメータの型に応じたパラメータ設定メソッドが提供されています。</p><h3 id="検索"><a href="#検索" class="headerlink" title="検索"></a>検索</h3><p>SQLを検索する方法は大きく２つあります。</p><ol><li><code>SQL名</code>を指定して検索</li><li><code>SQL文の文字列</code>を指定して検索</li></ol><p>1つ目の<code>SQL名</code>を指定する場合は、<a href="#SQLファイルの管理">SQLファイルの管理</a>で説明した<code>SQL名</code>を用いてSQLファイルを指定し、<code>SqlQuery</code>インタフェースのインスタンスを取得します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 検索結果の先頭１件をMapで取得</span></span><br><span class="line">Map&lt;String, Object&gt; employee = agent.query(<span class="string">"employee/select_employee"</span>)</span><br><span class="line">    .param(<span class="string">"emp_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .first();</span><br></pre></td></tr></table></figure><p>2つ目の<code>SQL文の文字列</code>を指定する場合は、<code>SqlAgent#queryWith(&quot;[SQL文字列]&quot;)</code>を使用して<code>SqlQuery</code>インタフェースのインスタンスを取得します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// employeeテーブルの各行の名前の一覧を取得</span></span><br><span class="line">List&lt;String&gt; names = agent.queryWith(<span class="string">"select first_name, last_name where employee"</span>)</span><br><span class="line">    .stream()</span><br><span class="line">    .map(row -&gt; row.get(<span class="string">"first_name"</span>) + <span class="string">" "</span> + row.get(<span class="string">"last_name"</span>))</span><br><span class="line">    .collect(Collectors.toList());</span><br></pre></td></tr></table></figure></p><p><code>SQLQuery</code>インタフェースの主なAPIは以下になります。</p><h3 id="検索結果の取得"><a href="#検索結果の取得" class="headerlink" title="検索結果の取得"></a>検索結果の取得</h3><p>uroboroSQLを利用すると検索結果をいろいろな形で取得できます。<br>下記のSQLを例に説明します。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- department/select_department.sql</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="comment">/* _SQL_ID_ */</span></span><br><span class="line">  DEPT.DEPT_NO  <span class="keyword">AS</span>  DEPT_NO</span><br><span class="line">,  DEPT.DEPT_NAME  <span class="keyword">AS</span>  DEPT_NAME</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  DEPARTMENT  DEPT</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  <span class="number">1</span>        =  <span class="number">1</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(dept_no)*/</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT.DEPT_NO  =  <span class="comment">/*dept_no*/</span><span class="number">1</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br><span class="line"><span class="comment">/*IF SF.isNotEmpty(dept_name)*/</span></span><br><span class="line"><span class="keyword">AND</span>  DEPT.DEPT_NAME  =  <span class="comment">/*dept_name*/</span><span class="string">'sample'</span></span><br><span class="line"><span class="comment">/*END*/</span></span><br></pre></td></tr></table></figure><h3 id="リスト取得-collect"><a href="#リスト取得-collect" class="headerlink" title="リスト取得(collect)"></a>リスト取得(collect)</h3><ul><li>List&lt;Map&lt;String, Object&gt;&gt; SqlQuery#collect()</li><li>List&lt;Map&lt;String, Object&gt;&gt; SqlQuery#collect(CaseFormat)</li><li>List&lt;T&gt; SqlQuery#collect(Class&lt;T&gt;)</li></ul><p>検索結果をMapやエンティティクラスのListとして取得します。</p><p>個々のMapにはキー：カラムラベル名、値：カラムの値　の形で1行分のデータが格納されます。  </p><blockquote><p><code>SqlQuery#collect()</code>では検索結果をすべてメモリ上に格納するため、大量データの検索を行う場合は後述の<code>SqlQuery#strem()</code>の利用を検討してください。</p></blockquote><p>例 (引数なし)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; departments =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).collect();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果(departments)</span></span><br><span class="line">[</span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1001</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"sales"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1002</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"export"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1003</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"accounting"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1004</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"personnel"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>引数にCaseFormatを指定することで、Mapのキー名の書式を変更することができます。</p><p>例 (CaseFormat指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  List&lt;Map&lt;String, Object&gt;&gt; departments =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).collect(CaseFormat.CAMEL_CASE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果(departments)</span></span><br><span class="line">[</span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1001</span>, <span class="string">"deptName"</span>=<span class="string">"sales"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1002</span>, <span class="string">"deptName"</span>=<span class="string">"export"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1003</span>, <span class="string">"deptName"</span>=<span class="string">"accounting"</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1004</span>, <span class="string">"deptName"</span>=<span class="string">"personnel"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><p>CaseFormatを指定しない場合はデフォルトのCaseFormat（初期設定ではUPPER_SNAKE_CASE）で加工した値になります。<br>デフォルトのCaseFormatはSqlConfig生成時に変更することができます。<br>デフォルトCaseFormatの設定の詳細は <a href="../advanced/#SqlAgentの挙動設定">SqlAgentの挙動設定</a> を参照してください。<br>引数にエンティティクラスを指定すると、検索結果をエンティティクラスのインスタンスのListで取得することができます。</p><p>例 (Class指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Entity that can be mapped to department table</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> deptNo;</span><br><span class="line">  <span class="keyword">private</span> String deptName;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDeptNo</span><span class="params">()</span> </span>&#123;　<span class="keyword">return</span> <span class="keyword">this</span>.deptNo;　&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptNo</span><span class="params">(<span class="keyword">long</span> deptNo)</span> </span>&#123;　<span class="keyword">this</span>.deptNo = deptNo;　&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getDeptName</span><span class="params">()</span> </span>&#123;　<span class="keyword">return</span> <span class="keyword">this</span>.deptName;　&#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDeptName</span><span class="params">(String deptName)</span> </span>&#123;　<span class="keyword">this</span>.deptName = deptName;　&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">・・・</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  List&lt;Department&gt; departments =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).collect(Department.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先頭取得（first"><a href="#先頭取得（first" class="headerlink" title="先頭取得（first)"></a>先頭取得（first)</h3><ul><li>Map&lt;String, Object&gt; SqlQuery#first()</li><li>Map&lt;String, Object&gt; SqlQuery#first(CaseFormat)</li><li>T SqlQuery#first(Class&lt;T&gt;)</li></ul><p>検索結果の1件目を取得します。<br>結果を取得できない（検索結果が0件）場合、<code>jp.co.future.uroborosql.exception.DataNotFoundException</code>をスローします。<br>メモリ上には最大1件分のデータしか格納しないため、検索結果が大量になる場合でもメモリ使用量を気にせず呼び出すことができます。</p><p>例 (引数なし)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Map&lt;String, Object&gt; department =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).first();</span><br><span class="line">&#125; <span class="keyword">catch</span> (DataNotFoundException ex) &#123;</span><br><span class="line">  ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果(department)</span></span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1001</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"sales"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にCaseFormatを指定することで、Mapのキー名の書式を変更することができます。</p><p>例 (CaseFormat指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Map&lt;String, Object&gt; department =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).first(CaseFormat.CAMEL_CASE);</span><br><span class="line">&#125; <span class="keyword">catch</span> (DataNotFoundException ex) &#123;</span><br><span class="line">  ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果(department)</span></span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1001</span>, <span class="string">"deptName"</span>=<span class="string">"sales"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にエンティティクラスを指定すると、検索結果をエンティティクラスのインスタンスの形で取得することができます。</p><p>例 (Class指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Department department =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).first(Department.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (DataNotFoundException ex) &#123;</span><br><span class="line">  ex.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="先頭取得（findFirst"><a href="#先頭取得（findFirst" class="headerlink" title="先頭取得（findFirst)"></a>先頭取得（findFirst)</h3><ul><li>Optional&lt;Map&lt;String, Object&gt;&gt; SqlQuery#findFirst()</li><li>Optional&lt;Map&lt;String, Object&gt;&gt; SqlQuery#findFirst(CaseFormat)</li><li>Optional&lt;T&gt; SqlQuery#findFirst(Class&lt;T&gt;)</li></ul><p>検索結果の1件目をOptionalの形式で取得します。<br>メモリ上には最大1件分のデータしか格納しないため、検索結果が大量になる場合でもメモリ使用量を気にせず呼び出すことができます。</p><p>例 (引数なし)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Optional&lt;Map&lt;String, Object&gt;&gt; department =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).findFirst();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果(department)</span></span><br><span class="line"> &#123;<span class="string">"DEPT_NO"</span>=<span class="number">1001</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"sales"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にCaseFormatを指定することで、Mapのキー名の書式を変更することができます。</p><p>例 (CaseFormat指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Optional&lt;Map&lt;String, Object&gt;&gt; department =</span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).findFirst(CaseFormat.CAMEL_CASE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果(department)</span></span><br><span class="line"> &#123;<span class="string">"deptNo"</span>=<span class="number">1001</span>, <span class="string">"deptName"</span>=<span class="string">"sales"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にエンティティクラスを指定すると、検索結果をエンティティクラスのインスタンスの形で取得することができます。</p><p>例 (Class指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Department department = </span><br><span class="line">    agent.query(<span class="string">"department/select_department"</span>).findFirst(Department.class).orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Stream取得-stream"><a href="#Stream取得-stream" class="headerlink" title="Stream取得(stream)"></a>Stream取得(stream)</h3><ul><li>Stream&lt;Map&lt;String, Object&gt;&gt; SqlQuery#stream()</li><li>Stream&lt;Map&lt;String, Object&gt;&gt; SqlQuery#stream(CaseFormat)</li><li>Stream&lt;T&gt; SqlQuery#stream(Class&lt;T&gt;)</li><li>Stream&lt;T&gt; SqlQuery#stream(ResultSetConverter&lt;T&gt;)</li></ul><p>検索結果をJava8で追加された<code>java.util.stream.Stream</code>の形式で取得します。</p><p>Streamによる順次読み込みと終端操作までの遅延処理により、メモリ効率の良い操作が可能になります。</p><p>例 (引数なし)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  agent.query(<span class="string">"department/select_department"</span>).stream()</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line">&#123;<span class="string">"DEPT_NO"</span>=<span class="number">1001</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"sales"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DEPT_NO"</span>=<span class="number">1002</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"export"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DEPT_NO"</span>=<span class="number">1003</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"accounting"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DEPT_NO"</span>=<span class="number">1004</span>, <span class="string">"DEPT_NAME"</span>=<span class="string">"personnel"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にCaseFormatを指定することで、Mapのキー名の書式を変更することができます。</p><p>例 (CaseFormat指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  agent.query(<span class="string">"department/select_department"</span>).stream(CaseFormat.PASCAL_CASE)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line">&#123;<span class="string">"DeptNo"</span>=<span class="number">1001</span>, <span class="string">"DeptName"</span>=<span class="string">"sales"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DeptNo"</span>=<span class="number">1002</span>, <span class="string">"DeptName"</span>=<span class="string">"export"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DeptNo"</span>=<span class="number">1003</span>, <span class="string">"DeptName"</span>=<span class="string">"accounting"</span>&#125;</span><br><span class="line">&#123;<span class="string">"DeptNo"</span>=<span class="number">1004</span>, <span class="string">"DeptName"</span>=<span class="string">"personnel"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>引数にエンティティクラスを指定すると、検索結果をエンティティクラスのインスタンスの形で取得することができます。</p><p>例 (Class指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  agent.query(<span class="string">"department/select_department"</span>).stream(Department.class)</span><br><span class="line">    .forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>jp.co.future.uroborosql.converter.ResultSetConverter</code>インタフェースを実装したクラスを引数に渡すことで、検索結果により複雑な加工を行うことができます。<br><code>ResultSetConverter</code>はFunctionInterfaceとして提供されているので、lamdbaも利用できます。</p><p>例 (ResultSetConverter指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// ResultSetConverterはlamdbaで指定可能</span></span><br><span class="line">  agent.query(<span class="string">"department/select_department"</span>).stream(rs -&gt; &#123;</span><br><span class="line">    Map&lt;String, Object&gt; row = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    row.put(<span class="string">"deptNo"</span>, rs.getObject(<span class="string">"DEPT_NO"</span>));</span><br><span class="line">    row.put(<span class="string">"deptName"</span>, rs.getObject(<span class="string">"DEPT_NAME"</span>));</span><br><span class="line">    <span class="keyword">return</span> row;</span><br><span class="line">  &#125;).forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 結果</span></span><br><span class="line">&#123;<span class="string">"deptNo"</span>=<span class="number">1001</span>, <span class="string">"deptName"</span>=<span class="string">"sales"</span>&#125;</span><br><span class="line">&#123;<span class="string">"deptNo"</span>=<span class="number">1002</span>, <span class="string">"deptName"</span>=<span class="string">"export"</span>&#125;</span><br><span class="line">&#123;<span class="string">"deptNo"</span>=<span class="number">1003</span>, <span class="string">"deptName"</span>=<span class="string">"accounting"</span>&#125;</span><br><span class="line">&#123;<span class="string">"deptNo"</span>=<span class="number">1004</span>, <span class="string">"deptName"</span>=<span class="string">"personnel"</span>&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>【注意】</strong> 戻り値として取得されるStreamインスタンスは内部にResultSetリソースを保持しています。このResultSetはデータを最後まで読み込むかStream#close()が呼ばれた際にリソースのクローズを行います。(Stream#onClose()にResultSetリソースのcloseHandlerが登録されています)<br>そのため、取得したStreamでは全データを扱う終端処理(collectなど)を行うか、try-with-resourcesの利用やStream#close()の明示的な呼び出しによりStreamのクローズを行わないとResultSetリソースがクローズされずカーソルのリークが発生します。</p></blockquote><p>例 (Streamのクローズ)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="keyword">try</span> (Stream&lt;Map&lt;String, Object&gt;&gt; stream = agent.query(<span class="string">"department/select_department"</span>).stream()) &#123;</span><br><span class="line">    <span class="comment">// Stream#findFirst() はStream内のResultSetリソースをクローズしないので、try-with-resourcesでStreamをクローズする</span></span><br><span class="line">    stream.findFirst().ifPresent(System.out::println);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ResultSet取得-resultSet"><a href="#ResultSet取得-resultSet" class="headerlink" title="ResultSet取得(resultSet)"></a>ResultSet取得(resultSet)</h3><ul><li>ResultSet SqlQuery#resultSet()</li></ul><p>検索結果を<code>java.sql.ResultSet</code>の形式で取得します。</p><blockquote><p>ResultSetリソースのクローズは各自で行ってください。</p></blockquote><p>このAPIは他のフレームワークとの連携など、ResultSetリソースの取得が必要なケースを想定して提供しています。<br>ResultSetリソースの取得が必要でなければ、ResultSetリソースのクローズが管理されている他のAPIの利用を検討してください。</p><p>例 (resultSet)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="keyword">try</span> (ResultSet rs = agent.query(<span class="string">"department/select_department"</span>).resultSet()) &#123;</span><br><span class="line">    <span class="comment">// try-with-resourcesでResultSetをクローズする</span></span><br><span class="line">    <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">      <span class="comment">// ResultSetからの値取得</span></span><br><span class="line">      ・・・</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>DB更新処理(登録/変更/削除)も検索処理と同様<code>SQL名</code>を指定する場合と直接<code>SQL文字列</code>を記述する２つのAPIが提供されています。<br><code>agent#update()</code> もしくは <code>agent#updateWith()</code>を使用してSqlUpdateインタフェースのインスタンスを取得します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// １件挿入(SQL名指定)</span></span><br><span class="line"><span class="keyword">int</span> count = agent.update(<span class="string">"department/insert_department"</span>)</span><br><span class="line">  .param(<span class="string">"dept_no"</span>, <span class="number">1111</span>)</span><br><span class="line">  .param(<span class="string">"dept_name"</span>, <span class="string">"Sales"</span>)</span><br><span class="line">  .count();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新(SQL文字列指定)</span></span><br><span class="line"><span class="keyword">int</span> count = agent.updateWith(<span class="string">"update employee set first_name = /*first_name*/ where emp_no = /*emp_no*/"</span>)</span><br><span class="line">  .param(<span class="string">"emp_no"</span>, <span class="number">1001</span>)</span><br><span class="line">  .param(<span class="string">"first_name"</span>, <span class="string">"Bob"</span>)</span><br><span class="line">  .count();</span><br></pre></td></tr></table></figure><p><code>SqlUpdate</code>インタフェースの主なAPIは以下になります。</p><h3 id="更新の実行"><a href="#更新の実行" class="headerlink" title="更新の実行"></a>更新の実行</h3><ul><li>int SqlUpdate#count()</li></ul><p>更新処理を行い、登録、更新、削除を行った行数を返します。</p><p>例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// insert</span></span><br><span class="line">  agent.update(<span class="string">"department/insert_department"</span>)</span><br><span class="line">    .param(<span class="string">"dept_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .param(<span class="string">"dept_name"</span>, <span class="string">"sales"</span>)</span><br><span class="line">    .count();</span><br><span class="line">  <span class="comment">// update</span></span><br><span class="line">  agent.update(<span class="string">"department/update_department"</span>)</span><br><span class="line">    .param(<span class="string">"dept_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .param(<span class="string">"dept_name"</span>, <span class="string">"HR"</span>)</span><br><span class="line">    .count();</span><br><span class="line">  <span class="comment">// delete</span></span><br><span class="line">  agent.update(<span class="string">"department/delete_department"</span>)</span><br><span class="line">    .param(<span class="string">"dept_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="バッチ更新"><a href="#バッチ更新" class="headerlink" title="バッチ更新"></a>バッチ更新</h3><p>大量のデータを一括で更新する場合、通常の更新では都度SQLが発行されるため処理速度が遅く問題になる場合があります。<br>こういったケースに対応するため、uroboroSQLではバッチ更新用のAPIを提供しています。</p><p>バッチ更新処理も他と同様<code>SQL名</code>を指定する場合と直接<code>SQL文字列</code>を記述する２つのAPIが提供されています。<br><code>agent#batch()</code> もしくは <code>agent#batchWith()</code>を使用してSqlBatchインタフェースのインスタンスを取得します。</p><p>SqlBatchインタフェースでは、SqlFluent インタフェースによるバインドパラメータの設定とは別に<code>java.util.stream.Stream</code>を用いたバッチパラメータの設定を行うAPIが提供されています。</p><ul><li>SqlBatch SqlBatch#paramStream(Stream&lt;Map&lt;String, Object&gt;&gt;)</li></ul><p>引数にはバッチの各行にバインドするキーと値のセットを持つMapを返すStreamを設定します。</p><h3 id="バッチ更新の実行"><a href="#バッチ更新の実行" class="headerlink" title="バッチ更新の実行"></a>バッチ更新の実行</h3><ul><li>int SqlBatch#count()</li></ul><p>バッチ更新処理を行い、登録、更新、削除を行った行数を返します。</p><p>例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// バッチ処理の実行</span></span><br><span class="line"><span class="keyword">int</span> deptCount = agent.batch(<span class="string">"department/insert_department"</span>)</span><br><span class="line">  <span class="comment">// 指定したファイルからMap&lt;String, Object&gt;のStreamを生成し、バッチ処理のパラメータとして指定する</span></span><br><span class="line">  .paramStream(getDataByFile(Paths.get(<span class="string">"data/department.tsv"</span>)))</span><br><span class="line">  .count();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Stream&lt;Map&lt;String, Object&gt;&gt; getDataByFile(<span class="keyword">final</span> Path filePath) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    List&lt;String&gt; lines = Files.readAllLines(filePath);</span><br><span class="line">    String[] header = lines.get(<span class="number">0</span>).split(<span class="string">"\\t"</span>);</span><br><span class="line">    <span class="keyword">return</span> lines.stream()</span><br><span class="line">        .skip(<span class="number">1</span>)</span><br><span class="line">        .map(s -&gt; s.split(<span class="string">"\\t"</span>))</span><br><span class="line">        .map(data -&gt; IntStream.range(<span class="number">0</span>, header.length)</span><br><span class="line">            .&lt;Map&lt;String, Object&gt;&gt; collect(HashMap::<span class="keyword">new</span>, (row, i) -&gt; row.put(header[i], data[i]),</span><br><span class="line">                Map::putAll));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UncheckedIOException(e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>data/department.tsv　の内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dept_no  dept_name</span><br><span class="line">1001  sales</span><br><span class="line">1002  export</span><br><span class="line">1003  accounting</span><br><span class="line">1004  personnel</span><br></pre></td></tr></table></figure></p><p>バッチパラメータにQueryの結果を指定することで疑似的に<code>SELECT-INSERT</code> / <code>SELECT-UPDATE</code> / <code>SELECT-DELETE</code>を行うことができます。<br>Streamを利用することで検索結果の件数が多い場合でも、少ないメモリ使用量でバッチ処理を行うことができます。</p><p>例(SELECT-UPDATE)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> updateCount = agent.batch(<span class="string">"department/update_department"</span>)</span><br><span class="line">  .paramStream(agent.query(<span class="string">"department/select_department"</span>)</span><br><span class="line">    .stream(CaseFormat.LOWER_SNAKE_CASE).map(e -&gt; &#123;</span><br><span class="line">      Map&lt;String, Object&gt; ans = <span class="keyword">new</span> HashMap&lt;&gt;(e);</span><br><span class="line">      ans.replaceAll((k, v) -&gt; v != <span class="keyword">null</span> ? v.toString() + <span class="string">"_after"</span> : <span class="string">"after"</span>);</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;))</span><br><span class="line">  .count();</span><br></pre></td></tr></table></figure></p><h3 id="バッチSQL発行動作のカスタマイズ"><a href="#バッチSQL発行動作のカスタマイズ" class="headerlink" title="バッチSQL発行動作のカスタマイズ"></a>バッチSQL発行動作のカスタマイズ</h3><p>SqlBatchインタフェースにはバッチSQL発行時の動作を変更するためのAPIが提供されています。</p><table><thead><tr><th style="text-align:left">メソッド</th><th style="text-align:left">説明</th><th style="text-align:left">デフォルト値</th></tr></thead><tbody><tr><td style="text-align:left">by(BiPredicate&lt;SqlContext, Map&lt;String, Object&gt;&gt;)</td><td style="text-align:left">バッチSQLの発行条件を指定します。<br>BiPredicateの結果がtrueの場合にバッチSQLを発行します。</td><td style="text-align:left">1000件毎</td></tr><tr><td style="text-align:left">batchWhen(BiConsumer&lt;SqlAgent, SqlContext&gt;)</td><td style="text-align:left">バッチSQLの発行タイミングで行う操作を指定します。</td><td style="text-align:left">何もしない</td></tr><tr><td style="text-align:left">errorWhen(TriConsumer&lt;SqlAgent, SqlContext, Exception&gt;)</td><td style="text-align:left">バッチSQLの発行で例外が発生した時の動作を指定します。</td><td style="text-align:left"><code>UroborosqlRuntimeException</code>をスローする</td></tr></tbody></table><p>これらのAPIを利用することでより柔軟なSQL発行が可能になります。</p><p>例(バッチSQL発行時動作のカスタマイズ)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Map&lt;String, Object&gt;&gt; inputData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">// 中略　入力データ作成</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  agent.batch(<span class="string">"department/insert_department"</span>)</span><br><span class="line">    .paramStream(inputData.stream())</span><br><span class="line">    .by((ctx, row) -&gt; ctx.batchCount() == <span class="number">10</span>)  <span class="comment">// 10件毎にSQL発行</span></span><br><span class="line">    .batchWhen((agent, ctx) -&gt; agent.commit())  <span class="comment">// SQL発行が成功したらコミットする</span></span><br><span class="line">    .errorWhen((agent, ctx, ex) -&gt; &#123;</span><br><span class="line">      log.error(<span class="string">"error occured. ex:&#123;&#125;"</span>, ex.getMessage());</span><br><span class="line">    &#125;)  <span class="comment">// 例外が発生したらログ出力する</span></span><br><span class="line">    .count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="プロシージャの実行"><a href="#プロシージャの実行" class="headerlink" title="プロシージャの実行"></a>プロシージャの実行</h3><p>uroboroSQLでは、SQLの検索/更新のほかDBが提供するストアドプロシージャの呼び出し用APIも提供しています。</p><p>ストアドプロシージャの呼出は<code>SQL名</code>を指定する場合と直接<code>ストアドプロシージャ文字列</code>を記述する２つのAPIが提供されています。<br><code>agent#proc()</code> もしくは <code>agent#procWith()</code>を使用してProcedureインタフェースのインスタンスを取得します。</p><p>###　ストアドプロシージャの実行</p><ul><li>Map&lt;String, Object&gt; Procedure#call()</li></ul><p>ストアドプロシージャからの戻り値を取得する場合は　<code>SqlFluent#outParam()</code>でパラメータを指定します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Procedureインタフェースのインスタンスを取得</span></span><br><span class="line">Map&lt;String, Object&gt; result = agent.procWith(<span class="string">"&#123;call product_id_exist_check(/*product_id*/, /*check_out*/)&#125;"</span>)</span><br><span class="line">  .param(<span class="string">"product_id"</span>, <span class="number">0</span>)</span><br><span class="line">  .outParam(<span class="string">"check_out"</span>, java.sql.JDBCType.NUMERIC)</span><br><span class="line">  .call();</span><br><span class="line"><span class="comment">// outParamメソッドで指定したパラメータの値(戻り値)を取得</span></span><br><span class="line">BigDecimal checkOut = (BigDecimal)result.get(<span class="string">"check_out"</span>);</span><br></pre></td></tr></table></figure><h3 id="DAOインタフェース"><a href="#DAOインタフェース" class="headerlink" title="DAOインタフェース"></a>DAOインタフェース</h3><p>uroboroSQLはDAO(Data Access Object)を用いた単一テーブルへのCRUDに対応しています。</p><p>下記のテーブルとそれに対応するエンティティクラスがあるとします。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> employee (</span><br><span class="line">  emp_no <span class="built_in">number</span>(<span class="number">11</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , first_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , last_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , birth_date <span class="built_in">date</span> <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , gender <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , lock_version <span class="built_in">number</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span></span><br><span class="line">  , <span class="keyword">constraint</span> employee_PKC primary <span class="keyword">key</span> (emp_no)</span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> empNo;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> LocalDate birthDate;</span><br><span class="line">  <span class="keyword">private</span> Gender gender;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lockVersion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 中略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SELECT-主キー検索"><a href="#SELECT-主キー検索" class="headerlink" title="SELECT (主キー検索)"></a>SELECT (主キー検索)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Employee employee = agent.find(Employee.class, <span class="number">1001</span>).orElse(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">  employee.setEmpNo(<span class="number">1002</span>);</span><br><span class="line">  employee.setFirstName(<span class="string">"Susan"</span>);</span><br><span class="line">  employee.setLastName(<span class="string">"Davis"</span>);</span><br><span class="line">  employee.setBirthDate(LocalDate.of(<span class="number">1969</span>, <span class="number">2</span>, <span class="number">10</span>));</span><br><span class="line">  employee.setGender(Gender.FEMALE); <span class="comment">// MALE("M"), FEMALE("F"), OTHER("O")</span></span><br><span class="line"></span><br><span class="line">  agent.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UPDATE"><a href="#UPDATE" class="headerlink" title="UPDATE"></a>UPDATE</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Employee employee = agent.find(Employee.class, <span class="number">1001</span>).orElseThrow(Exception::<span class="keyword">new</span>);</span><br><span class="line">  employee.setLastName(<span class="string">"Wilson"</span>);</span><br><span class="line"></span><br><span class="line">  agent.update(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Employee employee = agent.find(Employee.class, <span class="number">1001</span>).orElseThrow(Exception::<span class="keyword">new</span>);</span><br><span class="line"></span><br><span class="line">  agent.delete(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="一括INSERT"><a href="#一括INSERT" class="headerlink" title="一括INSERT"></a>一括INSERT</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  Stream&lt;Employee&gt; employees;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  agent.inserts(employees);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Entityアノテーション"><a href="#Entityアノテーション" class="headerlink" title="Entityアノテーション"></a>Entityアノテーション</h4><p>DAOインタフェースで利用するエンティティクラスではテーブルとのマッピングを行うためにアノテーションを利用することができます。</p><h5 id="Table"><a href="#Table" class="headerlink" title="@Table"></a>@Table</h5><p>エンティティクラスに紐づけるテーブル名を指定します。<br>テーブル名と名前が一致しないエンティティクラスにマッピングしたい場合に利用します。</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">型</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">String</td><td style="text-align:left">マッピングするテーブル名</td><td style="text-align:left">なし</td></tr></tbody></table><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.mapping.annotations.Table;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"employee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEmployee</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Column"><a href="#Column" class="headerlink" title="@Column"></a>@Column</h5><p>フィールドに紐づけるカラム名を指定します。<br>カラム名と名前が一致しないフィールドにマッピングしたい場合に利用します。</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">型</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">name</td><td style="text-align:left">String</td><td style="text-align:left">マッピングするカラム名</td><td style="text-align:left">なし</td></tr></tbody></table><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.mapping.annotations.Column;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"empNo"</span>)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> employeeNo;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Domain"><a href="#Domain" class="headerlink" title="@Domain"></a>@Domain</h5><p>独自に作成した型(ドメインクラス)のフィールドにカラムをマッピングする場合に指定します。</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">型</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">valueType</td><td style="text-align:left">Class&lt;?&gt;</td><td style="text-align:left">ドメインクラスを生成するのに必要な値の型</td><td style="text-align:left">なし</td></tr><tr><td style="text-align:left">factoryMethod</td><td style="text-align:left">String</td><td style="text-align:left">ドメインクラスを生成・取得するメソッド名<br>指定しない場合はコンストラクタが呼び出される。</td><td style="text-align:left">“”</td></tr><tr><td style="text-align:left">toJdbcMethod</td><td style="text-align:left">String</td><td style="text-align:left">JDBCが受け付けられる値に変換するメソッド名</td><td style="text-align:left">“getValue”</td></tr><tr><td style="text-align:left">nullable</td><td style="text-align:left">boolean</td><td style="text-align:left">null可かどうかの指定</td><td style="text-align:left">false</td></tr></tbody></table><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.mapping.annotations.Domain;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Domain</span>(valueType = String.class, factoryMethod = <span class="string">"of"</span>, toJdbcMethod = <span class="string">"getName"</span>, nullable = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameDomain</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">NameDomain</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> NameDomain <span class="title">of</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> NameDomain(name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> empNo;</span><br><span class="line">  <span class="keyword">private</span> NameDomain firstName;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Transient"><a href="#Transient" class="headerlink" title="@Transient"></a>@Transient</h5><p>フィールドとカラムのマッピング対象から除外します。</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">型</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">insert</td><td style="text-align:left">boolean</td><td style="text-align:left"><code>agent#insert()</code>実行時にフィールドを無視するかどうか。<br><code>true</code>の場合は無視する。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">update</td><td style="text-align:left">boolean</td><td style="text-align:left"><code>agent#update()</code>実行時にフィールドを無視するかどうか。<br><code>true</code>の場合は無視する。</td><td style="text-align:left">true</td></tr></tbody></table><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.mapping.annotations.Transient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 途中略</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transient</span></span><br><span class="line">  <span class="keyword">private</span> String memo; <span class="comment">// 常に無視</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transient</span>(insert = <span class="keyword">false</span>, update = <span class="keyword">true</span>)</span><br><span class="line">  <span class="keyword">private</span> LocalDate creationDate; <span class="comment">// insert時は対象、update時は無視</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Transient</span>(insert = <span class="keyword">true</span>, update = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> LocalDate updateDate;  <span class="comment">// insert時は無視、update時は対象</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Version"><a href="#Version" class="headerlink" title="@Version"></a>@Version</h5><p>このアノテーションが付与されたフィールドは楽観ロック用のバージョン情報を保持するフィールドになります。<br>UPDATE時にはSET句で+1され、WHERE句の検索条件に追加されてSQLを発行し、更新件数が0の場合には<code>OptimisticLockException</code>を発生させます。</p><table><thead><tr><th style="text-align:left">属性名</th><th style="text-align:left">型</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">なし</td><td style="text-align:left">-</td><td style="text-align:left">-</td><td style="text-align:left">-</td></tr></tbody></table><p>例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jp.co.future.uroborosql.mapping.annotations.Version;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> empNo;</span><br><span class="line">  <span class="keyword">private</span> String firstName;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">　　<span class="comment">// 途中略</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@version</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> lockVersion = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以下略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="トランザクション"><a href="#トランザクション" class="headerlink" title="トランザクション"></a>トランザクション</h2><p>uroboroSQLではローカルトランザクションを提供します。<br>トランザクションを利用することで、エラー発生時でも一部のデータだけ登録を成功させるといった細かな制御ができるようになります。</p><h3 id="トランザクションの開始と終了"><a href="#トランザクションの開始と終了" class="headerlink" title="トランザクションの開始と終了"></a>トランザクションの開始と終了</h3><p>uroboroSQLで提供するトランザクションのレベルは以下の3つです</p><table><thead><tr><th style="text-align:left">トランザクションタイプ</th><th style="text-align:left">トランザクション有り</th><th style="text-align:left">トランザクションなし</th></tr></thead><tbody><tr><td style="text-align:left">required</td><td style="text-align:left">トランザクション内で処理を実行</td><td style="text-align:left">新たなトランザクションを開始して処理を実行</td></tr><tr><td style="text-align:left">requiresNew</td><td style="text-align:left">既存のトランザクションを停止し、新たなトランザクションを開始して処理を実行。<br>トランザクションが終了すると停止していたトランザクションを再開させる</td><td style="text-align:left">新たなトランザクションを開始して処理を実行</td></tr><tr><td style="text-align:left">notSupported</td><td style="text-align:left">既存のトランザクションを停止し、トランザクション外で処理を実行。<br>処理が終了すると停止していたトランザクションを再開させる</td><td style="text-align:left">トランザクション外で処理を実行</td></tr></tbody></table><p><code>SqlAgent</code>インタフェースにトランザクションタイプに応じたメソッドが提供されており、そのメソッドを呼び出すことでトランザクションの開始と終了を制御します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">agent.required(() -&gt; &#123;</span><br><span class="line">  <span class="comment">// トランザクション開始</span></span><br><span class="line">  agent.updateWith(<span class="string">"insert into employee (emp_no) values (/*emp_no*/1001)"</span>)</span><br><span class="line">    .param(<span class="string">"emp_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .count();</span><br><span class="line"></span><br><span class="line">  agent.requiresNew(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 新しい トランザクション開始</span></span><br><span class="line">    agent.updateWith(<span class="string">"insert into department (dept_no, dept_name) values (/*dept_no*/1111, /*dept_name*/'Sales')"</span>)</span><br><span class="line">      .param(<span class="string">"dept_no"</span>, <span class="number">1002</span>)</span><br><span class="line">      .param(<span class="string">"dept_name"</span>, <span class="string">"export"</span>)</span><br><span class="line">      .count();</span><br><span class="line">    <span class="comment">// 新しい トランザクション終了 commit</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// トランザクション終了 commit</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="コミットとロールバック"><a href="#コミットとロールバック" class="headerlink" title="コミットとロールバック"></a>コミットとロールバック</h3><p>トランザクションのlamdba式が正常に終了すればトランザクションはコミットされます。<br>トランザクションのlamdba式が例外をスローした場合はトランザクションをロールバックします。<br>例外をスローせずに明示的にロールバックを行う場合は<code>SqlAgent#setRollbackOnly()</code>を呼び出します。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">agent.required(() -&gt; &#123;</span><br><span class="line">  <span class="comment">// トランザクション開始</span></span><br><span class="line">  agent.updateWith(<span class="string">"insert into employee (emp_no) values (/*emp_no*/1001)"</span>)</span><br><span class="line">    .param(<span class="string">"emp_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .count();</span><br><span class="line"></span><br><span class="line">  agent.requiresNew(() -&gt; &#123;</span><br><span class="line">    <span class="comment">// 新しい トランザクション開始</span></span><br><span class="line">    agent.updateWith(<span class="string">"insert into department (dept_no, dept_name) values (/*dept_no*/1111, /*dept_name*/'Sales')"</span>)</span><br><span class="line">      .param(<span class="string">"dept_no"</span>, <span class="number">1002</span>)</span><br><span class="line">      .param(<span class="string">"dept_name"</span>, <span class="string">"export"</span>)</span><br><span class="line">      .count();</span><br><span class="line">    <span class="comment">// 新しい トランザクション終了 明示的なrollback</span></span><br><span class="line">    agent.setRollbackOnly();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// トランザクション終了 commit</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="セーブポイント"><a href="#セーブポイント" class="headerlink" title="セーブポイント"></a>セーブポイント</h3><p>トランザクション内でセーブポイントを設けることで、トランザクション内の特定の更新のみ取り消すといった細かな制御ができます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">agent.required(() -&gt; &#123;</span><br><span class="line">  <span class="comment">// トランザクション開始</span></span><br><span class="line">  agent.update(<span class="string">"employee/insert_employee"</span>)</span><br><span class="line">    .param(<span class="string">"emp_no"</span>, <span class="number">1001</span>)</span><br><span class="line">    .count();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// セーブポイント(名前:sp)の設定</span></span><br><span class="line">  agent.setSavepoint(<span class="string">"sp"</span>);</span><br><span class="line">  agent.update(<span class="string">"employee/insert_employee"</span>)</span><br><span class="line">    .param(<span class="string">"emp_no"</span>, <span class="number">1002</span>)</span><br><span class="line">    .count();</span><br><span class="line"></span><br><span class="line">  assertThat(agent.query(<span class="string">"employee/select_employee"</span>).collect().size(), <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最後のinsertを取消(セーブポイント(名前:sp)までロールバック)</span></span><br><span class="line">  agent.rollback(<span class="string">"sp"</span>);</span><br><span class="line"></span><br><span class="line">  assertThat(agent.query(<span class="string">"employee/select_employee"</span>).collect().size(), <span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><div style="font-size:130%; font-weight:bold;"><br>  <a href="../getting_started" style="float:left">&#60;&#60; Getting Started</a><a href="../advanced" style="float:right">高度な操作 &#62;&#62;</a><br></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高度な操作</title>
      <link href="/uroborosql-doc/advanced/"/>
      <url>/uroborosql-doc/advanced/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="#SqlConfigのカスタマイズ">SqlConfigのカスタマイズ</a><ul><li><a href="#区分値定数や列挙型の利用">区分値定数や列挙型の利用</a></li><li><a href="#SQLフィルター">SQLフィルター</a></li><li><a href="#SQLファイルルートフォルダの設定">SQLファイルルートフォルダの設定</a></li><li><a href="#エラーハンドリング">エラーハンドリング</a></li><li><a href="#SQL発行のリトライ">SQL発行のリトライ</a></li><li><a href="#SqlAgentの挙動設定">SqlAgentの挙動設定</a></li><li><a href="#自動パラメータバインド関数の設定">自動パラメータバインド関数の設定</a></li></ul></li><li><a href="#SQLカバレッジ">SQLカバレッジ</a></li><li><a href="#ログ">ログ</a></li><li><a href="#システムプロパティ">システムプロパティ</a></li></ul><hr><h2 id="SqlConfigのカスタマイズ"><a href="#SqlConfigのカスタマイズ" class="headerlink" title="SqlConfigのカスタマイズ"></a>SqlConfigのカスタマイズ</h2><p>uroboroSQLではSqlConfigを生成するタイミングで各種の設定を行うことによりSQL発行時の動作を変更することができます。<br>設定は<code>UroboroSQL</code>ビルダーAPIで行います。</p><h3 id="区分値定数や列挙型の利用"><a href="#区分値定数や列挙型の利用" class="headerlink" title="区分値定数や列挙型の利用"></a>区分値定数や列挙型の利用</h3><p>これまでSQLの開発では、区分値や定数値などの固定値がマジックナンバーとしてSQL文内に埋め込まれていました。<br>しかしマジックナンバーの記述は可読性が悪く仕様変更時の影響調査が困難なため不具合の温床となっていました。</p><p>例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"> *</span><br><span class="line"><span class="keyword">FROM</span> EMPLOYEE</span><br><span class="line"><span class="keyword">WHERE</span> EMP_TYP = <span class="string">'05'</span> <span class="comment">-- 05:従業員     &lt;-- 従業員の区分が変わったらどうする？</span></span><br></pre></td></tr></table></figure><p>uroboroSQLはエンタープライズ分野での開発に利用されてきた経験から、SQL文の中でマジックナンバーの代わりに定数や列挙型を利用するための仕組みを提供しています。</p><p>区分値定数/列挙型を利用するためには<code>SqlConfig</code>に以下の設定を追加します。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create SqlConfig</span></span><br><span class="line">SqlConfig config = UroboroSQL</span><br><span class="line">  .builder(...)</span><br><span class="line">  <span class="comment">// SqlContextFactoryの設定</span></span><br><span class="line">  .setSqlContextFactory(<span class="keyword">new</span> SqlContextFactoryImpl()</span><br><span class="line">    <span class="comment">// 定数クラス設定の追加</span></span><br><span class="line">    .setConstantClassNames(Arrays.asList(TypeConstants.class.getName()))</span><br><span class="line">    <span class="comment">// 列挙型パッケージ設定の追加</span></span><br><span class="line">    .setEnumConstantPackageNames(Arrays.asList(Gender.class.getPackage().getName()))</span><br><span class="line">     <span class="comment">// 定数パラメータのプレフィックス指定(初期値 : CLS_)</span></span><br><span class="line">    .setConstParamPrefix(<span class="string">"CLS_"</span>))</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><p>定数クラス : TypeConstants.javaの実装例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 区分値定数クラス</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeConstants</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">TypeConstants</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/** 区分種別名称：口座種別区分  区分種別番号：0035  長さ：0 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_TYP = <span class="string">"0035"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：口座種別区分  区分値名称：普通  区分値略称：普通  区分値番号：1 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_TYP_FUTSU = <span class="string">"1"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：口座種別区分  区分値名称：当座  区分値略称：当座  区分値番号：2 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_TYP_TOUZA = <span class="string">"2"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：口座種別区分  区分値名称：定期  区分値略称：定期  区分値番号：3 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ACCOUNT_TYP_TEIKI = <span class="string">"3"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：発行区分  区分種別番号：0052  長さ：0 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISSUE_TYP = <span class="string">"0052"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：発行区分  区分値名称：未発行  区分値略称：未発行  区分値番号：1 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISSUE_TYP_UNISSUED = <span class="string">"1"</span>;</span><br><span class="line">  <span class="comment">/** 区分種別名称：発行区分  区分値名称：発行済  区分値略称：発行済  区分値番号：2 */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ISSUE_TYP_OUTSTANDING = <span class="string">"2"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * システム定数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Consts</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Consts</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonValue</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CommonValue</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 業務日付（オンライン） */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ONLINE_YMD = <span class="string">"1"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 業務日付（バッチ） */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BATCH_YMD = <span class="string">"2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** SQL上でのフラグ表現（TRUE=1） */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLAG_ON = <span class="string">"1"</span>;</span><br><span class="line">    <span class="comment">/** SQL上でのフラグ表現（FALSE=0） */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FLAG_OFF = <span class="string">"0"</span>;</span><br><span class="line">    <span class="comment">/** 日付ALL0 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ZERO_DATE = <span class="string">"00000000"</span>;</span><br><span class="line">    <span class="comment">/** 日付最小値 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MIN_DATE = <span class="string">"19000101"</span>;</span><br><span class="line">    <span class="comment">/** 日付最大値 */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAX_DATE = <span class="string">"99991231"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>列挙型 : Gender.javaの実装例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性別を表す列挙型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Gender &#123;</span><br><span class="line">  MALE(<span class="string">"M"</span>), FEMALE(<span class="string">"F"</span>), OTHER(<span class="string">"O"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> String label;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Gender</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.label = label;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> label;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>このように区分値定数や列挙型を定数パラメータとして登録しておくことで、SQL文の中で定数名が利用できるようになります。</p><p>定数パラメータを利用する場合、以下の命名ルールに従ってパラメータを指定します。</p><table><thead><tr><th style="text-align:left">パターン</th><th style="text-align:left">書式</th></tr></thead><tbody><tr><td style="text-align:left">定数</td><td style="text-align:left">[定数パラメータプレフィックス][定数フィールド名大文字]</td></tr><tr><td style="text-align:left">定数(Innerクラスがある場合)</td><td style="text-align:left">[定数パラメータプレフィックス][Innerクラス名大文字スネークケース]_[Innerクラス内定数フィールド名大文字]</td></tr><tr><td style="text-align:left">列挙型</td><td style="text-align:left">[定数パラメータプレフィックス][列挙型名大文字]_[列挙子名大文字]</td></tr></tbody></table><blockquote><p>※定数パラメータプレフィックスの初期値は <code>CLS_</code>となっています。SqlConfig生成時の設定で変更することが可能です。</p></blockquote><p>実際に使用する際は置換文字列として</p><ul><li>/*#[定数パラメータプレフィックス][定数フィールド名大文字]*/</li><li>/*#[定数パラメータプレフィックス][Innerクラス名大文字スネークケース]_[Innerクラス内定数フィールド名大文字]*/</li><li>/*#[定数パラメータプレフィックス][列挙型名大文字]_[列挙子名大文字]*/ </li></ul><p>または</p><ul><li>/*$[定数パラメータプレフィックス][定数フィールド名大文字]*/</li><li>/*$[定数パラメータプレフィックス][Innerクラス名大文字スネークケース]_[Innerクラス内定数フィールド名大文字]*/</li><li>/*$[定数パラメータプレフィックス][列挙型名大文字]_[列挙子名大文字]*/ </li></ul><p>という風に使用します。  </p><blockquote><p>定数や列挙型の値は固定なので生成されるSQLは毎回同じ値になり、SQL文解析処理によるCPU負荷を考慮する必要はありません。</p></blockquote><p>定数の例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  EMP.EMP_NO    <span class="keyword">AS</span>  EMP_NO</span><br><span class="line">,  EMP.FIRST_NAME  <span class="keyword">AS</span>  FIRST_NAME</span><br><span class="line">,  EMP.LAST_NAME  <span class="keyword">AS</span>  LAST_NAME</span><br><span class="line">,  EMP.BIRTH_DATE  <span class="keyword">AS</span>  BIRTH_DATE</span><br><span class="line">,  EMP.GENDER    <span class="keyword">AS</span>  GENDER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  EMP.BIRTH_DATE    !=  <span class="comment">/*#CLS_COMMON_VALUE_ZERO_DATE*/</span><span class="string">'00000000'</span>  <span class="comment">-- 定数パラメータの指定</span></span><br></pre></td></tr></table></figure></p><p>列挙型の例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">  EMP.EMP_NO    <span class="keyword">AS</span>  EMP_NO</span><br><span class="line">,  EMP.FIRST_NAME  <span class="keyword">AS</span>  FIRST_NAME</span><br><span class="line">,  EMP.LAST_NAME  <span class="keyword">AS</span>  LAST_NAME</span><br><span class="line">,  EMP.BIRTH_DATE  <span class="keyword">AS</span>  BIRTH_DATE</span><br><span class="line">,  EMP.GENDER    <span class="keyword">AS</span>  GENDER</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  EMPLOYEE  EMP</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">  EMP.GENDER    =  <span class="comment">/*#CLS_GENDER_FEMALE*/</span><span class="string">'F'</span>  <span class="comment">-- 列挙型定数パラメータの指定</span></span><br></pre></td></tr></table></figure></p><h3 id="SQLフィルター"><a href="#SQLフィルター" class="headerlink" title="SQLフィルター"></a>SQLフィルター</h3><p>uroboroSQLではSQLの実行を行う一連の処理の流れの中にいくつかの拡張ポイントを設けており、この拡張ポイントに処理を追加することで、共通的なSQL文の加工や検索結果の記録といった様々な拡張を行うことができるように設計されています。</p><p>SQL処理の拡張はSqlFilterインタフェースを実装したクラスを作成し登録することで行います。<br>SqlFilterインタフェースには以下のメソッドが定義されています。</p><table><thead><tr><th style="text-align:left">SqlFilterメソッド名</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">initialize</td><td style="text-align:left">SqlFilterの初期化を行う</td></tr><tr><td style="text-align:left">doTransformSql</td><td style="text-align:left">変換前のSQLに対して加工を行う</td></tr><tr><td style="text-align:left">doParameter</td><td style="text-align:left">バインドパラメータの加工を行う</td></tr><tr><td style="text-align:left">doOutParameter</td><td style="text-align:left">ストアドプロシージャのOutParameterの加工を行う</td></tr><tr><td style="text-align:left">doPreparedStatement</td><td style="text-align:left">PreparedStatementの加工を行う</td></tr><tr><td style="text-align:left">doCallableStatement</td><td style="text-align:left">CallableStatementの加工を行う</td></tr><tr><td style="text-align:left">doQuery</td><td style="text-align:left">検索処理結果の加工を行う</td></tr><tr><td style="text-align:left">doUpdate</td><td style="text-align:left">更新処理結果の加工を行う</td></tr><tr><td style="text-align:left">doBatch</td><td style="text-align:left">バッチ処理結果の加工を行う</td></tr><tr><td style="text-align:left">doProcedure</td><td style="text-align:left">Procedure呼出処理結果の加工を行う</td></tr></tbody></table><p>uroboroSQLには標準でいくつかのSqlFilterの実装が含まれています。</p><table><thead><tr><th style="text-align:left">クラス名</th><th style="text-align:left">説明</th></tr></thead><tbody><tr><td style="text-align:left">jp.co.future.uroborosql.filter.DebugSqlFilter</td><td style="text-align:left">SqlFilterの動作を理解するためのサンプル。<br>各拡張ポイントで呼び出されるメソッドでログを出力します。</td></tr><tr><td style="text-align:left">jp.co.future.uroborosql.filter.DumpResultSqlFilter</td><td style="text-align:left">検索結果を表形式でログ出力するSQLフィルター。<br>SqlREPLで使用しています。</td></tr><tr><td style="text-align:left">jp.co.future.uroborosql.filter.WrapContextSqlFilter</td><td style="text-align:left">SQL文の前後に文字列を追加するSQLフィルター。<br>ページングや検索件数の上限設定に使用します。</td></tr><tr><td style="text-align:left">jp.co.future.uroborosql.filter.SecretColumnSqlFilter</td><td style="text-align:left">指定した特定のカラムのみ暗号化を行うSQLフィルター。<br>パスワードや機密情報を暗号化してDBに格納するために使用します。</td></tr><tr><td style="text-align:left">jp.co.future.uroborosql.filter.AuditLogSqlFilter</td><td style="text-align:left">監査記録を取得するためのSQLフィルター。</td></tr></tbody></table><p>SQLフィルターを利用するためには、SqlConfig生成時にSqlFilterManagerの設定を追加して利用するSQLフィルターの登録を行ってください。<br>SQLフィルターは複数登録することができます。複数登録した場合は登録した順にSQLフィルターが処理されます。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create SqlConfig</span></span><br><span class="line">SqlConfig config = UroboroSQL</span><br><span class="line">  .builder(...)</span><br><span class="line">  <span class="comment">// SqlFilterManagerの設定</span></span><br><span class="line">  .setSqlFilterManager(<span class="keyword">new</span> SqlFilterManagerImpl()</span><br><span class="line">    <span class="comment">// DumpResultSqlFilterの登録</span></span><br><span class="line">    .addSqlFilter(<span class="keyword">new</span> DumpResultSqlFilter())</span><br><span class="line">    <span class="comment">// WrapContextSqlFilterの登録</span></span><br><span class="line">    .addSqlFilter(<span class="keyword">new</span> WrapContextSqlFilter(<span class="string">""</span>,</span><br><span class="line">      <span class="string">"LIMIT /*$maxRowCount*/10 OFFSET /*$startRowIndex*/0"</span>,</span><br><span class="line">      <span class="string">".*FOR\\sUPDATE.*"</span>)))</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure><p>独自にSqlFilterを作成する場合は、<code>jp.co.future.uroborosql.filter.AbstractSqlFilter</code>を継承し、必要に応じてメソッドをオーバーライドしてください。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomSqlFilter</span> <span class="keyword">extends</span> <span class="title">AbstractSqlFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 途中略</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultSet <span class="title">doQuery</span><span class="params">(SqlContext sqlContext, PreparedStatement preparedStatement, ResultSet resultSet)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// フィルター処理の実装</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SQLファイルルートフォルダの設定"><a href="#SQLファイルルートフォルダの設定" class="headerlink" title="SQLファイルルートフォルダの設定"></a>SQLファイルルートフォルダの設定</h3><p>uroboroSQLは初期設定ではクラスパス上にあるsqlフォルダ配下のSQLを読み込みます。<br>このSQLファイルルートフォルダは変更することができます。</p><p>SQLファイルルートフォルダの設定 (custom_sqlフォルダを指定)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL.builder(...)</span><br><span class="line">  <span class="comment">// SQLファイルのルートフォルダの設定(custom_sqlフォルダをルートフォルダにする場合)</span></span><br><span class="line">  .setSqlManager(<span class="keyword">new</span> SqlManagerImpl(<span class="string">"custom_sql"</span>))</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><h3 id="エラーハンドリング"><a href="#エラーハンドリング" class="headerlink" title="エラーハンドリング"></a>エラーハンドリング</h3><p>uroboroSQLからSQLを発行した際にSQLExceptionがスローされると、そのSQLExceptionを内部に保持する<code>UroborosqlSQLException</code>が呼び出し元に返却されます。<br><code>UroborosqlSQLException</code>は<code>java.lang.RuntimeException</code>を継承しているため明示的なキャッチは不要です。</p><p>呼出元のアプリケーションで明示的にエラーハンドリングを行う場合は、try-catchでUroborosqlSQLExceptionをキャッチすることで、例外発生時の挙動を制御することができます。</p><p>エラーハンドリングの例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL.builder(...).build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// INSERT文の実行</span></span><br><span class="line">  <span class="comment">// insert into product (product_id) values (/*product_id*/0);</span></span><br><span class="line">  agent.update(<span class="string">"example/insert_product"</span>)</span><br><span class="line">    .param(<span class="string">"product_id"</span>, <span class="number">1</span>)</span><br><span class="line">    .count();</span><br><span class="line">&#125; <span class="keyword">catch</span> (UroborosqlSQLException ex) &#123;</span><br><span class="line">  <span class="comment">// SQLExceptionが発生した際に行う処理を実装</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"exception occured. ex="</span> + ex.getCause().getMessage(), ex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SQL発行のリトライ"><a href="#SQL発行のリトライ" class="headerlink" title="SQL発行のリトライ"></a>SQL発行のリトライ</h3><p>SQLを発行した際、タイミングによって発生する例外（テーブルロックエラーなど）の場合はリトライを行い、できるだけ正常に処理を終了させたい場合があります。</p><p>通常、このようなケースでは以下のような実装を行います。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL.builder(...).build();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> retryCount = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(;;) &#123;</span><br><span class="line">  <span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">    <span class="comment">// INSERT文の実行</span></span><br><span class="line">    <span class="comment">// insert into product (product_id) values (/*product_id*/0);</span></span><br><span class="line">    agent.update(<span class="string">"example/insert_product"</span>).param(<span class="string">"product_id"</span>, <span class="number">1</span>).count();</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (UroborosqlSQLException ex) &#123;</span><br><span class="line">    <span class="comment">// SQLExceptionが発生した際に行う処理を実装</span></span><br><span class="line">    <span class="keyword">int</span> errorCode = ex.getErrorCode();</span><br><span class="line">    <span class="keyword">if</span> (errorCode == <span class="number">30006</span> || errorCode == <span class="number">54</span>) &#123;<span class="comment">// リソース・ビジー(Oracleの場合)</span></span><br><span class="line">      <span class="comment">// リトライ対象エラーコードの場合はリトライカウントをカウントアップしてリトライする</span></span><br><span class="line">      retryCount++;</span><br><span class="line">      <span class="keyword">if</span> (retryCount == MAX_RETRY_COUNT) &#123; <span class="comment">// MAX_RETRY_COUNT はアプリケーションで定義された最大リトライ回数の定数とする</span></span><br><span class="line">        <span class="comment">// 最大リトライ回数に達した場合は例外をスローする</span></span><br><span class="line">        <span class="keyword">throw</span> ex;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// 10ms 待機</span></span><br><span class="line">          Thread.sleep(<span class="number">10</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException iex) &#123;</span><br><span class="line">          <span class="comment">// do nothing</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// リトライ対象エラーコード以外はすぐに例外をスローする</span></span><br><span class="line">      <span class="keyword">throw</span> ex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>しかし、上記のようなリトライ処理を個々の実装で行うと、実装漏れや実装ミス、実装方法の差異（for()の代わりにwhile()を使用するなど）により、不具合が発生しやすくなります。<br>uroboroSQLでは、アプリケーション全体のリトライ設定と、リトライ全体設定より優先される個別処理でのリトライ用APIの2種類のAPIを提供することで、より簡潔で確実なリトライ処理が行えるよう工夫されています。</p><p>アプリケーション全体のリトライ設定はSqlConfig生成時に行います。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL.builder(...)</span><br><span class="line">  <span class="comment">// SqlAgentFactoryの設定</span></span><br><span class="line">  .setSqlAgentFactory(<span class="keyword">new</span> SqlAgentFactoryImpl()</span><br><span class="line">    <span class="comment">// アプリケーション全体のリトライ設定</span></span><br><span class="line">    <span class="comment">// SQLエラーコードが54,30006のいずれか(Oracleのリソース・ビジー)の場合</span></span><br><span class="line">    .setSqlRetryCodeList(Arrays.asList(<span class="string">"54"</span>, <span class="string">"30006"</span>))</span><br><span class="line">    <span class="comment">// 最大リトライ回数（3回）リトライ</span></span><br><span class="line">    .setDefaultMaxRetryCount(<span class="number">3</span>)</span><br><span class="line">    <span class="comment">// リトライ間隔10ms待機</span></span><br><span class="line">    .setDefaultSqlRetryWaitTime(<span class="number">10</span>))</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><p>リトライAPIを用いた実装は次のようになります。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// アプリケーション全体のリトライ設定に従ってリトライを行う。（個別のリトライ指定なし）</span></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// INSERT文の実行</span></span><br><span class="line">  <span class="comment">// insert into product (product_id) values (/*product_id*/0);</span></span><br><span class="line">  agent.update(<span class="string">"example/insert_product"</span>)</span><br><span class="line">    .param(<span class="string">"product_id"</span>, <span class="number">1</span>)</span><br><span class="line">    .count();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 個別にリトライ設定を上書きする（retry()を利用）</span></span><br><span class="line"><span class="keyword">try</span> (SqlAgent agent = config.agent()) &#123;</span><br><span class="line">  <span class="comment">// INSERT文の実行</span></span><br><span class="line">  <span class="comment">// insert into product (product_id) values (/*product_id*/0);</span></span><br><span class="line">  <span class="comment">// リトライ対象エラーコードの場合、5回のリトライを20ms間隔で行う</span></span><br><span class="line">  agent.update(<span class="string">"example/insert_product"</span>)</span><br><span class="line">    .param(<span class="string">"product_id"</span>, <span class="number">1</span>)</span><br><span class="line">    .retry(<span class="number">5</span>, <span class="number">20</span>)</span><br><span class="line">    .count();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="SqlAgentの挙動設定"><a href="#SqlAgentの挙動設定" class="headerlink" title="SqlAgentの挙動設定"></a>SqlAgentの挙動設定</h3><p>リトライ設定のほかにも、SqlAgentの挙動を変更する設定をSqlConfig生成時に行うことができます。</p><table><thead><tr><th style="text-align:left">設定項目</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">fetchSize</td><td style="text-align:left">JDBCドライバとDB間のフェッチサイズ(下記補足)</td><td style="text-align:left">-1(0以上の値で有効化)</td></tr><tr><td style="text-align:left">queryTimeout</td><td style="text-align:left">検索タイムアウト時間(秒)</td><td style="text-align:left">-1(0以上の値で有効化)</td></tr><tr><td style="text-align:left">defaultMapKeyCaseFormat</td><td style="text-align:left">検索結果のMapキーのデフォルトCaseFormat</td><td style="text-align:left">CaseFormat.UPPER_SNAKE_CASE</td></tr><tr><td style="text-align:left">sqlIdKeyName</td><td style="text-align:left">SQL_IDを置換するためのKEY文字列</td><td style="text-align:left">_SQL_ID_</td></tr><tr><td style="text-align:left">outputExceptionLog</td><td style="text-align:left">例外発生時のログ出力を行うかどうかの設定</td><td style="text-align:left">false</td></tr></tbody></table><ul><li>補足<ul><li>fetchSizeは、<a href="https://docs.oracle.com/javase/jp/8/docs/api/java/sql/Statement.html#setFetchSize-int-" target="_blank" rel="noopener">Statement.setFetchSize</a>に渡される値です。</li><li>collect/foreachメソッドで返却される結果セットの行数を制限する設定ではありません。</li></ul></li></ul><p>設定例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL.builder(...)</span><br><span class="line">  <span class="comment">// SqlAgentFactoryの設定</span></span><br><span class="line">  .setSqlAgentFactory(<span class="keyword">new</span> SqlAgentFactoryImpl()</span><br><span class="line">    <span class="comment">// ドライバ↔DB間のフェッチサイズ設定。初期値 : -1(0以上の値で有効化)</span></span><br><span class="line">    .setFetchSize(<span class="number">1000</span>)</span><br><span class="line">    <span class="comment">// 検索タイムアウト時間(秒)。初期値 : -1(0以上の値で有効化)</span></span><br><span class="line">    .setQueryTimeout(<span class="number">30</span>)</span><br><span class="line">    <span class="comment">// 検索結果のMapキーのデフォルトCaseFormat。初期値 : UPPER_SNAKE_CASE</span></span><br><span class="line">    .setDefaultMapKeyCaseFormat(CaseFormat.CAMEL_CASE)</span><br><span class="line">    <span class="comment">// SQL_IDを置換するためのKEY文字列を設定。初期値 : _SQL_ID_</span></span><br><span class="line">    .setSqlIdKeyName(<span class="string">"_SQL_ID_"</span>)</span><br><span class="line">    <span class="comment">// 例外発生時のログ出力を行うかどうかを設定。初期値 : false</span></span><br><span class="line">    .setOutputExceptionLog(<span class="keyword">true</span>)</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><h3 id="自動パラメータバインド関数の設定"><a href="#自動パラメータバインド関数の設定" class="headerlink" title="自動パラメータバインド関数の設定"></a>自動パラメータバインド関数の設定</h3><p><em>(new v0.6.1)</em></p><p>システム内の各テーブルに共通項目（登録日時、更新日時など）が定義されている場合、INSERT文やUPDATE文を発行する際には、必ずこれらの共通項目に対するパラメータを指定する必要が出てきます。<br>このような共通項目へのパラメータ設定を個別の実装で行うと実装が煩雑になりますし、どうしても実装漏れや記述ミスにより正しく値が設定されない、といったことが起こります。</p><p>uroboroSQLではこのような共通項目に対して自動でパラメータをバインドする仕組みを提供しています。<br>設定はSqlConfig生成時に行います。</p><p>設定例<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">SqlConfig config = UroboroSQL</span><br><span class="line">  .builder(...)</span><br><span class="line">  <span class="comment">// SqlContextFactoryの設定</span></span><br><span class="line">  .setSqlContextFactory(<span class="keyword">new</span> SqlContextFactoryImpl()</span><br><span class="line">    <span class="comment">// query用自動パラメータバインド関数の登録</span></span><br><span class="line">    .addQueryAutoParameterBinder((ctx) -&gt; ctx.paramIfAbsent(<span class="string">"current_flg"</span>, <span class="keyword">true</span>))</span><br><span class="line">    <span class="comment">// update/batch/procedure用自動パラメータバインド関数の登録</span></span><br><span class="line">    .addUpdateAutoParameterBinder((ctx) -&gt; ctx.paramIfAbsent(<span class="string">"ins_datetime"</span>, LocalDateTime.now()))</span><br><span class="line">    .addUpdateAutoParameterBinder((ctx) -&gt; ctx.paramIfAbsent(<span class="string">"upd_datetime"</span>, LocalDateTime.now()))</span><br><span class="line">  )</span><br><span class="line">  .build();</span><br></pre></td></tr></table></figure></p><p>自動パラメータバインド関数は<code>SqlContext</code>を引数に受け取るので、関数内でパラメータの設定を行ってください。<br>関数の評価は実行SQL生成処理（SQL文内の/*IF*/や/*BEGIN*/、/*parameter_name*/の評価）の直前に行われます。</p><h2 id="SQLカバレッジ"><a href="#SQLカバレッジ" class="headerlink" title="SQLカバレッジ"></a>SQLカバレッジ</h2><p>これまでアプリケーション上の条件分岐はカバレッジツールを利用して網羅率を確認することができました。<br>しかし、SQL文の条件分岐は実際にその分岐が通っているかどうかを確認する手段がなく、リリース後に初めて通った条件で不具合を発生させることがありました。<br>この問題を解決するためにuroboroSQLでは、SQL文の条件分岐を集計してカバレッジレポートを行う機能を提供します。</p><p>SQLカバレッジはuroboroSQLを利用するアプリケーションの起動時オプションに<code>-Duroborosql.sql.coverage=true</code>を追加することで有効になります。<br>SQLカバレッジを有効にするとアプリケーションが実行している間に発行されるSQLについて、カバレッジ情報が収集されます。<br>カバレッジ情報の収集結果は標準では<code>target/coverage/sql-cover.xml</code>に出力されます。<br>このファイルの場所や名前を変更したい場合は、起動時オプションに<code>-Duroborosql.sql.coverage.file=[出力ファイルパス]</code>を指定してください。</p><p>出力された<code>sql-cover.xml</code>をJenkinsのCobertura pluginなどのXMLレポートとして読み込むとSQLファイルのカバレッジレポートが参照できるようになります。</p><p><img src="cobertura.png" alt="カバレッジレポート例" title="Jenkins Cobertura Report"></p><p>またv0.2.0より、uroboroSQLのみでHTMLレポートを出力することができるようになりました。<br>起動時オプションに<code>-Duroborosql.sql.coverage=jp.co.future.uroborosql.coverage.reports.html.HtmlReportCoverageHandler</code>を指定することで本機能を利用することができます。</p><p>カバレッジ情報はデフォルトでは<code>target/coverage/sql</code>フォルダ配下に出力されます。<br>出力先フォルダを変更した場合は、起動時オプションに<code>-Duroborosql.sql.coverage.dir=[出力フォルダパス]</code>を指定してください。</p><p>出力されたレポートのサンプルは下記を参照してください。</p><ul><li>サマリーページ<br><img src="html_coverage_report_summary.png" alt="HTML Coverage Report Summary" style="width:80%;"></li><li>詳細ページ<br><img src="html_coverage_report.png" alt="HTML Coverage Report" style="width:80%;"></li></ul><p><a href="../sample/testReport/" target="_blank" style="font-size:20px;"><i class="fa fa-external-link" aria-hidden="true"></i>出力サンプル</a></p><h2 id="ログ"><a href="#ログ" class="headerlink" title="ログ"></a>ログ</h2><p>uroboroSQLではログ出力ライブラリとしてSLF4Jを使用しています。SLF4Jの詳細は<a href="https://www.slf4j.org/" target="_blank" rel="noopener">公式のドキュメント</a>を参照して下さい。<br>uroboroSQLで出力されるログ内容は以下表の通りです。</p><table><thead><tr><th style="text-align:center">クラス名</th><th style="text-align:center">TRACE</th><th style="text-align:center">DEBUG</th><th style="text-align:center">INFO</th><th style="text-align:center">WARN</th><th style="text-align:center">ERROR</th><th style="text-align:center">FATAL</th></tr></thead><tbody><tr><td style="text-align:center">AbstractAgent</td><td style="text-align:center">変換前SQL</td><td style="text-align:center">実行時SQL</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">DebugSqlFilter</td><td style="text-align:center">-</td><td style="text-align:center">パラメーター/<br>対象データ数/<br>実行結果</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">IfNode</td><td style="text-align:center">-</td><td style="text-align:center">評価式/<br>判定結果/<br>パラメーター</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">Parameter</td><td style="text-align:center">-</td><td style="text-align:center">パラメーターの設定</td><td style="text-align:center">-</td><td style="text-align:center">サブパラメーター値にNULLを設定</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">SecretColumnSqlFilter</td><td style="text-align:center">-</td><td style="text-align:center">バッチ処理追加件数/<br>ストアドプロシージャ出力パラメーター</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">SqlAgent</td><td style="text-align:center">ステートメントのクローズ</td><td style="text-align:center">処理実行アナウンス/<br>リトライ実行アナウンス/<br>SQL実行時間</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">エラーメッセージ</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">SqlContext</td><td style="text-align:center">-</td><td style="text-align:center">バッチ処理追加件数/<br>ストアドプロシージャ出力パラメーター</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">SqlContextFactory</td><td style="text-align:center">-</td><td style="text-align:center">定数パラメーター</td><td style="text-align:center">-</td><td style="text-align:center">定数名の重複</td><td style="text-align:center">エラーメッセージ</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">SqlLoader</td><td style="text-align:center">SQL定義ファイルの読み込み完了</td><td style="text-align:center">SQL定義ファイルの読み込み開始/読み込み中</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">デフォルトファイルパスの設定/<br>デフォルト拡張子/<br>空のSQLキャッシュの返却</td><td style="text-align:center">-</td></tr></tbody></table><h2 id="システムプロパティ"><a href="#システムプロパティ" class="headerlink" title="システムプロパティ"></a>システムプロパティ</h2><p>uroboroSQLではシステムプロパティを指定することで動作を変更することができます。</p><table><thead><tr><th style="text-align:left">プロパティ名</th><th style="text-align:left">説明</th><th style="text-align:left">初期値</th></tr></thead><tbody><tr><td style="text-align:left">uroborosql.sql.coverage</td><td style="text-align:left">SQLカバレッジを出力するかどうかのフラグ。<code>true</code>の場合はSQLカバレッジを出力します。<br>文字列として<code>jp.co.future.uroborosql.coverage.CoverageHandler</code>インタフェースの<br>実装クラスが設定された場合はそのクラスを利用してカバレッジの収集を行います。</td><td style="text-align:left">なし</td></tr><tr><td style="text-align:left">uroborosql.sql.coverage.file</td><td style="text-align:left">指定されたPATH(ファイル)に SQLカバレッジのCobertura形式のxmlレポートを出力します。</td><td style="text-align:left">./target/coverage/sql-cover.xml</td></tr><tr><td style="text-align:left">uroborosql.sql.coverage.dir</td><td style="text-align:left">指定されたPATH(フォルダ)にSQLカバレッジのHTMLレポートを出力します。</td><td style="text-align:left">./target/coverage/sql</td></tr><tr><td style="text-align:left">uroborosql.entity.cache.size</td><td style="text-align:left">Entityクラス情報のキャッシュサイズを指定します。<br>キャッシュサイズを超えるEntityクラスの読み込みがあった場合は古い情報から破棄されます。</td><td style="text-align:left">30</td></tr></tbody></table><div style="font-size:130%; font-weight:bold;"><br><a href="../basics" style="float:left">&#60;&#60; 基本操作</a><a href="../developer_guide" style="float:right">開発者ガイド &#62;&#62;</a><br></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>開発者ガイド</title>
      <link href="/uroborosql-doc/developer_guide/"/>
      <url>/uroborosql-doc/developer_guide/</url>
      
        <content type="html"><![CDATA[<hr><ul><li><a href="#ソースコードの取得">ソースコードの取得</a></li><li><a href="#ソースのビルド">ソースのビルド</a></li><li><a href="#テスト">テスト</a></li><li><a href="#Mavenローカルリポジトリへのインストール">Mavenローカルリポジトリへのインストール</a></li><li><a href="#IDE">IDE</a></li><li><a href="#Continuous Integration">Continuous Integration</a></li><li><a href="#Issue Management">Issue Management</a></li></ul><hr><p>uroboroSQLを開発する人向けのガイドです</p><h2 id="ソースコードの取得"><a href="#ソースコードの取得" class="headerlink" title="ソースコードの取得"></a>ソースコードの取得</h2><p><a href="https://github.com/future-architect/uroborosql" target="_blank" rel="noopener">GitHub</a>からソースをクローンする。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/future-architect/uroborosql.git</span><br></pre></td></tr></table></figure><h2 id="ソースのビルド"><a href="#ソースのビルド" class="headerlink" title="ソースのビルド"></a>ソースのビルド</h2><p>ビルドには<a href="https://maven.apache.org/" target="_blank" rel="noopener">Apache Maven</a>を利用します。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><h2 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h2><p>テストは<a href="http://junit.org/junit4/" target="_blank" rel="noopener">JUnit</a>で行います。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure><p>カバレッジは<a href="http://www.eclemma.org/jacoco/" target="_blank" rel="noopener">Jacoco</a>で確認することができます。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test jacoco:report</span><br></pre></td></tr></table></figure><p>target/site/jacoco フォルダにjacocoカバレッジレポートが出力されます。</p><p>開発を行う際は、Jadocコメントが正しく記載されているようにしてください。<br>javadocプラグインでjavadocを生成し、エラーが出力されないことを確認してください。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn javadoc:javadoc</span><br></pre></td></tr></table></figure><h2 id="Mavenローカルリポジトリへのインストール"><a href="#Mavenローカルリポジトリへのインストール" class="headerlink" title="Mavenローカルリポジトリへのインストール"></a>Mavenローカルリポジトリへのインストール</h2><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><h3 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h3><p>クローンしたフォルダをEclipseの既存Mavenプロジェクトとしてインポートしてください。<br>MavenのinitializeフェーズでEclipseプロジェクトの文字コードをUTF-8にする設定が入っているので、インポートが完了すれば開発が始められる状態になります。</p><h3 id="Intellij"><a href="#Intellij" class="headerlink" title="Intellij"></a>Intellij</h3><p>Import Project でクローンしたフォルダを指定してください。<br>Import project from external model でMavenを選択してください。<br>プロジェクトが読み込まれると開発が始められる状態になります。</p><h2 id="Continuous-Integration"><a href="#Continuous-Integration" class="headerlink" title="Continuous Integration"></a>Continuous Integration</h2><p>Continuous Integration(CI)は<a href="https://travis-ci.org/future-architect/uroborosql" target="_blank" rel="noopener">Travis CI</a>で行っています。</p><p>CIの状況確認は以下で行います。</p><ul><li><a href="https://travis-ci.org/future-architect/uroborosql" target="_blank" rel="noopener">https://travis-ci.org/future-architect/uroborosql</a></li></ul><p>また、CIと合わせてカバレッジレポートを<a href="https://coveralls.io/github/future-architect/uroborosql" target="_blank" rel="noopener">Coveralls</a>で公開しています。</p><ul><li><a href="https://coveralls.io/github/future-architect/uroborosql" target="_blank" rel="noopener">https://coveralls.io/github/future-architect/uroborosql</a></li></ul><h2 id="Issue-Management"><a href="#Issue-Management" class="headerlink" title="Issue Management"></a>Issue Management</h2><p>IssueとPullRequestはGithubの機能を利用しています。<br>コメントは英語で記載をお願いします。（Google翻訳がお勧めです）</p><ul><li><a href="https://github.com/future-architect/uroborosql/issues" target="_blank" rel="noopener">https://github.com/future-architect/uroborosql/issues</a></li><li><a href="https://github.com/future-architect/uroborosql/pulls" target="_blank" rel="noopener">https://github.com/future-architect/uroborosql/pulls</a></li></ul><hr><div style="font-size:130%; font-weight:bold;"><br><a href="../advanced" style="float:left">&#60;&#60; 高度な操作</a><a href="../about_uroborosql" style="float:right">uroboroSQLについて &#62;&#62;</a><br></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>License</title>
      <link href="/uroborosql-doc/license/"/>
      <url>/uroborosql-doc/license/</url>
      
        <content type="html"><![CDATA[<p>MIT License</p><p>Copyright (c) 2018</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy<br>of this software and associated documentation files (the “Software”), to deal<br>in the Software without restriction, including without limitation the rights<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>copies of the Software, and to permit persons to whom the Software is<br>furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>SOFTWARE.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>uroboroSQLについて</title>
      <link href="/uroborosql-doc/about_uroborosql/"/>
      <url>/uroborosql-doc/about_uroborosql/</url>
      
        <content type="html"><![CDATA[<hr><ul><li>リリースノート</li></ul><table><thead><tr><th style="text-align:center">バージョン</th><th style="text-align:center">リリース日</th><th style="text-align:left">概要</th></tr></thead><tbody><tr><td style="text-align:center">v0.6.1</td><td style="text-align:center">2018/02/05</td><td style="text-align:left">バグフィックス</td></tr><tr><td style="text-align:center">v0.6.0</td><td style="text-align:center">2018/01/31</td><td style="text-align:left">自動パラメータバインド関数 API追加　/ バグフィックス</td></tr><tr><td style="text-align:center">v0.5.0</td><td style="text-align:center">2017/12/13</td><td style="text-align:left">Stream batch API追加　/ SQL内の不要なカンマの除去</td></tr><tr><td style="text-align:center">v0.4.0</td><td style="text-align:center">2017/11/17</td><td style="text-align:left">UroboroSQL ビルダーAPI追加 / CaseFormat初期値設定の追加 / etc.</td></tr><tr><td style="text-align:center">v0.3.3</td><td style="text-align:center">2017/10/31</td><td style="text-align:left">バグフィックス</td></tr><tr><td style="text-align:center">v0.3.2</td><td style="text-align:center">2017/10/10</td><td style="text-align:left">バグフィックス</td></tr><tr><td style="text-align:center">v0.3.1</td><td style="text-align:center">2017/10/02</td><td style="text-align:left">バグフィックス</td></tr><tr><td style="text-align:center">v0.3.0</td><td style="text-align:center">2017/09/08</td><td style="text-align:left">リファクタリング API</td></tr><tr><td style="text-align:center">v0.2.0</td><td style="text-align:center">2017/05/26</td><td style="text-align:left">カバレッジレポート拡張　/ SQL-REPL機能拡張 / ORMapper API　追加</td></tr><tr><td style="text-align:center">v0.1.0</td><td style="text-align:center">2017/03/09</td><td style="text-align:left">初版リリース</td></tr></tbody></table><p>See more info. <a href="https://github.com/future-architect/uroborosql/releases" target="_blank" rel="noopener">Github releases</a></p><ul><li><p>LICENSE<br>See <a href="../license">license</a></p></li><li><p>FAQ</p></li></ul><hr><div style="font-size:130%; font-weight:bold;"><br><a href="../developer_guide" style="float:left">&#60;&#60; 開発者ガイド</a><br></div>]]></content>
      
      
      
    </entry>
    
    
  
  
    
  
</search>
