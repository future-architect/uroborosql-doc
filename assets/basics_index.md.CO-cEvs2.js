import{_ as l,C as p,c as r,o as h,a2 as t,j as a,a as i,G as e}from"./chunks/framework.DYH4TpTR.js";const F=JSON.parse('{"title":"事前準備","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"事前準備"}],["meta",{"name":"og:url","content":"/uroborosql-doc/basics/"}]]},"headers":[],"relativePath":"basics/index.md","filePath":"basics/index.md"}'),k={name:"basics/index.md"},d={tabindex:"0"},o={style:{"text-align":"left"}},u={style:{"text-align":"left"}};function g(E,s,b,y,c,m){const n=p("Badge");return h(),r("div",null,[s[23]||(s[23]=t(`<h1 id="事前準備" tabindex="-1">事前準備 <a class="header-anchor" href="#事前準備" aria-label="Permalink to &quot;事前準備&quot;">​</a></h1><p><strong>uroboroSQL</strong>を利用した基本的なDB操作を説明します。</p><h2 id="db接続" tabindex="-1">DB接続 <a class="header-anchor" href="#db接続" aria-label="Permalink to &quot;DB接続&quot;">​</a></h2><p>まず最初にSQLを実行するDBへの接続を行います。<br> DBに接続するためには<code>SqlConfig</code>インタフェースのインスタンスを生成する必要があります。</p><p><code>SqlConfig</code>インスタンスは<code>UroboroSQL</code>クラスのビルダーメソッドを使用して生成します。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JDBC接続を行うSqlConfigの生成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SqlConfig config = UroboroSQL.builder(url, user, password).build();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:h2:mem:uroborosql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DataSourceを使用したDB接続を行うSqlConfigの生成</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SqlConfig config = UroboroSQL.builder(datasource).build();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Context context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InitialContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DataSource dataSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java:comp/env/jdbc/datasource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dataSource).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p><code>UroboroSQL</code>クラスを使って<code>SqlConfig</code>インスタンスを生成する際、<strong>uroboroSQL</strong>の挙動を変更する各種の設定も合わせて行うことができます。<br> 設定の詳細については<a href="./../configuration/">設定</a>を参照してください。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><code>SqlConfig</code>インスタンスはアプリケーション内で接続先毎に１つ保持するようにしてください。 SQL実行の都度生成すると、不要なインスタンスの生成やSQLロード処理が実行されます。</p></div><h2 id="sqlagentインスタンスの取得" tabindex="-1">SqlAgentインスタンスの取得 <a class="header-anchor" href="#sqlagentインスタンスの取得" aria-label="Permalink to &quot;SqlAgentインスタンスの取得&quot;">​</a></h2><p>次にすべての操作の基点となる<code>SqlAgent</code>インタフェースのインスタンスを取得します。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SqlAgent agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // この中でSQLの操作を行う</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>SQLの操作はすべてこの<code>SqlAgent</code>インスタンスを使って行うことになります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>SqlAgent</code>インタフェースは<code>java.lang.AutoClosable</code>インタフェースを実装しており、<code>try-with-resources</code>で記述することで終了時に自動的にclose処理が呼び出され、中で保持しているConnectionやPreparedStatementなどのリソースオブジェクトも正しくクローズされます。</p></div><h2 id="sqlファイルの配置" tabindex="-1">SQLファイルの配置 <a class="header-anchor" href="#sqlファイルの配置" aria-label="Permalink to &quot;SQLファイルの配置&quot;">​</a></h2><p><strong>uroboroSQL</strong>ではSQL文の書かれたファイルのパスを指定してSQLを実行することができます。<br> その際、SQLファイルはクラスパスから参照できる場所に配置されている必要があります。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>    └─main</span></span>
<span class="line"><span>        └─resources</span></span>
<span class="line"><span>            └─sql</span></span>
<span class="line"><span>                ├─department</span></span>
<span class="line"><span>                │    ├─insert_department.sql</span></span>
<span class="line"><span>                │    └─select_department.sql</span></span>
<span class="line"><span>                └─employee</span></span>
<span class="line"><span>                     ├─insert_employee.sql</span></span>
<span class="line"><span>                     └─select_employee.sql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>上のようなフォルダ構成の場合で、<code>src/main/resources/</code>をクラスパスに指定すれば、 その下の<code>sql</code>フォルダをルートフォルダとした相対パスでSQLファイルを指定することができます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>SQLファイルのルートフォルダ（初期値：<code>sql</code>)は変更することができます。<br> 変更方法の詳細は <a href="./../configuration/sql-manager.html#sqlファイルルートフォルダの設定">SQLファイルルートフォルダの設定</a> を参照してください。</p></div><h3 id="sql名" tabindex="-1">SQL名 <a class="header-anchor" href="#sql名" aria-label="Permalink to &quot;SQL名&quot;">​</a></h3><p>SQLファイルの指定する際のファイルパスを<code>SQL名</code>といいます。<br> 上記フォルダ構成の場合、それぞれのSQLファイルは以下のような<code>SQL名</code>となります。</p><table tabindex="0"><thead><tr><th style="text-align:left;">SQLファイルパス（SQLルートフォルダから）</th><th style="text-align:left;">SQL名</th></tr></thead><tbody><tr><td style="text-align:left;">department/insert_department.sql</td><td style="text-align:left;">department/insert_department</td></tr><tr><td style="text-align:left;">department/select_department.sql</td><td style="text-align:left;">department/select_department</td></tr><tr><td style="text-align:left;">employee/insert_employee.sql</td><td style="text-align:left;">employee/insert_employee</td></tr><tr><td style="text-align:left;">employee/select_employee.sql</td><td style="text-align:left;">employee/select_employee</td></tr></tbody></table><p>SQLファイルの配置は設定によりカスタマイズが可能です。SQLファイル配置のカスタマイズについては <a href="./../advanced/#sqlファイルの解決ルール">SQLファイルの解決ルール</a> を参照してください。</p><h3 id="共通api" tabindex="-1">共通API <a class="header-anchor" href="#共通api" aria-label="Permalink to &quot;共通API&quot;">​</a></h3><p>検索(<a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/fluent/SqlQuery.java" target="_blank" rel="noreferrer">SqlQuery</a>)、更新(<a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/fluent/SqlUpdate.java" target="_blank" rel="noreferrer">SqlUpdate</a>)、バッチ更新(<a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/fluent/SqlBatch.java" target="_blank" rel="noreferrer">SqlBatch</a>)、ストアドプロシージャ実行(<a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/fluent/Procedure.java" target="_blank" rel="noreferrer">Procedure</a>)を行うクラスは、バインドパラメータや置換文字列の設定を行うためのAPI(<a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/fluent/SqlFluent.java" target="_blank" rel="noreferrer">SqlFluent</a>)を実装しています。</p><p>バインドパラメータや置換文字列の設定はこのAPIを利用して設定を行ってください。<br> 流れるAPI(Fluent API)を採用しているため、値の設定は連続して行うことができるようになっています。</p><p>パラメータ設定例</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; department </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;department/select_department&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dept_no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dept_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sales&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,27)),a("table",d,[s[22]||(s[22]=a("thead",null,[a("tr",null,[a("th",{style:{"text-align":"left"}},"主なメソッド"),a("th",{style:{"text-align":"left"}},"説明")])],-1)),a("tbody",null,[s[14]||(s[14]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#param(String key, V value)"),a("td",{style:{"text-align":"left"}},"バインドパラメータや置換文字列として使用するキーと値のセットを設定する")],-1)),s[15]||(s[15]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#param(String key, V value, SQLType sqlType)"),a("td",{style:{"text-align":"left"}},"SQLTypeを指定して値を設定する")],-1)),s[16]||(s[16]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#param(String key, V value, int sqlType)"),a("td",{style:{"text-align":"left"}},"SQLTypeを表すint型を指定して値を設定する")],-1)),a("tr",null,[s[1]||(s[1]=a("td",{style:{"text-align":"left"}},"<V> SqlFluent#param(String key, Supplier<V> supplier)",-1)),a("td",o,[s[0]||(s[0]=i("supplierの評価結果をキーの値としてパラメータに設定する ")),e(n,{text:"0.10.1+"})])]),s[17]||(s[17]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#paramIfAbsent(String key, V value)"),a("td",{style:{"text-align":"left"}},"指定したキーがまだ登録されていない場合に値を設定する")],-1)),s[18]||(s[18]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#paramIfAbsent(String key, V value, SQLType sqlType)"),a("td",{style:{"text-align":"left"}},"指定したキーがまだ登録されていない場合にSQLTypeを指定して値を設定する")],-1)),s[19]||(s[19]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#paramIfAbsent(String key, V value, int sqlType)"),a("td",{style:{"text-align":"left"}},"指定したキーがまだ登録されていない場合にSQLTypeを表すint型を指定して値を設定する")],-1)),a("tr",null,[s[13]||(s[13]=a("td",{style:{"text-align":"left"}},[a("s",null,"<V> SqlFluent#paramList(String key, V... value)")],-1)),a("td",u,[s[2]||(s[2]=i("IN句のバインドパラメータに使用するキーと値のセットを設定する。")),s[3]||(s[3]=a("br",null,null,-1)),e(n,{text:"0.14.0+"}),s[4]||(s[4]=i(" から非推奨。かわりに")),s[5]||(s[5]=a("code",null,"param()",-1)),s[6]||(s[6]=i("に")),s[7]||(s[7]=a("code",null,"Arrays.asList()",-1)),s[8]||(s[8]=i("もしくは")),s[9]||(s[9]=a("code",null,"List.of()",-1)),s[10]||(s[10]=i("を使って")),s[11]||(s[11]=a("code",null,"List型",-1)),s[12]||(s[12]=i("に詰めて設定してください"))])]),s[20]||(s[20]=a("tr",null,[a("td",{style:{"text-align":"left"}},"SqlFluent#paramMap(Map<String, ?> paramMap)"),a("td",{style:{"text-align":"left"}},"引数のMapのKey/Valueのセットをパラメータに設定する")],-1)),s[21]||(s[21]=a("tr",null,[a("td",{style:{"text-align":"left"}},"<V> SqlFluent#paramBean(V bean)"),a("td",{style:{"text-align":"left"}},"引数として渡されたbeanのフィールド名と値のセットをパラメータに設定する")],-1))])]),s[24]||(s[24]=t(`<p>他にもパラメータの型に応じたパラメータ設定メソッドが提供されています。</p><div class="tip custom-block"><p class="custom-block-title">配列型の指定</p><p>DBの種類によっては配列型をサポートしています。（postgresqlなど）<br> バインドパラメータで配列型を利用する場合、以下のようにJavaの配列を値としてparamメソッドに渡してください</p><ul><li>Java実装例</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;select_with_array&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;array_values&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>SQL例</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  st</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">val</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sample_table st</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> st</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ANY(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*array_values*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div>`,2))])}const S=l(k,[["render",g]]);export{F as __pageData,S as default};
