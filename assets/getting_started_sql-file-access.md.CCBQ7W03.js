import{_ as t,C as l,c as p,o as i,a2 as a,b as h,w as n,a as k,G as r,a3 as d}from"./chunks/framework.DYH4TpTR.js";const F=JSON.parse('{"title":"SQLファイルを使用したDBアクセス","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"SQLファイルを使用したDBアクセス"}],["meta",{"name":"og:url","content":"/uroborosql-doc/getting_started/sql-file-access.html"}]]},"headers":[],"relativePath":"getting_started/sql-file-access.md","filePath":"getting_started/sql-file-access.md"}'),E={name:"getting_started/sql-file-access.md"};function o(c,s,g,y,u,b){const e=l("Mermaid");return i(),p("div",null,[s[1]||(s[1]=a(`<h1 id="sqlファイルを使用したdbアクセス" tabindex="-1">SQLファイルを使用したDBアクセス <a class="header-anchor" href="#sqlファイルを使用したdbアクセス" aria-label="Permalink to &quot;SQLファイルを使用したDBアクセス&quot;">​</a></h1><h2 id="sqlconfigの生成" tabindex="-1">SqlConfigの生成 <a class="header-anchor" href="#sqlconfigの生成" aria-label="Permalink to &quot;SqlConfigの生成&quot;">​</a></h2><p>SQLファイルを使用したサンプルコード <a href="https://github.com/future-architect/uroborosql-sample/blob/main/src/main/java/jp/co/future/uroborosql/sample/SqlFileApiSample.java" target="_blank" rel="noreferrer">SqlFileApiSample.java</a> を例として説明します。</p><p>まず初めにコンストラクタの中で最初に<code>SqlConfig</code>クラスを作成しています。 <code>SqlConfig</code>は<strong>uroboroSQL</strong>に対する各種の設定を保持するクラスで、<code>SqlConfig</code>の設定を変更することで<strong>uroboroSQL</strong>の動作を変更することが出来ます。<br> ここでは<a href="http://www.h2database.com/html/main.html" target="_blank" rel="noreferrer">H2DB</a>のメモリDBに接続する<code>SqlConfig</code>インスタンスを生成しています。 <code>SqlConfig</code>の生成には<code>UroboroSQL</code>クラスによるBuilderAPIを使用します。</p><ul><li>基本的な呼出方法（DBへの接続情報のみ指定）</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create SqlConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>設定のカスタマイズ（定数の指定や検索結果の取得方法変更）</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create SqlConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SqlContextFactoryの設定（Enum定数パッケージ設定の追加）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlContextFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqlContextFactoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEnumConstantPackageNames</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Arrays.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Gender.class.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SqlAgentFactoryの設定（Queryの戻り値のMapのキー文字列のデフォルトCaseFormat設定の追加）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlAgentFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqlAgentFactoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setDefaultMapKeyCaseFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CaseFormat.CAMEL_CASE))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SqlManagerの設定（NioSqlManagerImplの指定）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NioSqlManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><code>SqlConfig</code>生成時のカスタマイズの詳細については <a href="./../configuration/">設定</a>を参照してください。</p><h2 id="テーブルの作成と初期データの登録" tabindex="-1">テーブルの作成と初期データの登録 <a class="header-anchor" href="#テーブルの作成と初期データの登録" aria-label="Permalink to &quot;テーブルの作成と初期データの登録&quot;">​</a></h2><p>次に事前準備として以降の処理で使用するテーブルの作成と初期データの登録を行います。（<code>SqlFileApiSample#setupTableAndData()</code>を参照）<br> SQLを実行する場合は<code>SqlConfig</code>から<code>SqlAgent</code>を生成します。 <code>SqlAgent</code>は<strong>uroboroSQL</strong>の中核となるクラスで、<strong>uroboroSQL</strong>の各操作はこの<code>SqlAgent</code>を使って行います。<br><code>SqlAgent</code>は<code>AutoClosable</code>インタフェースを実装しているので、try-with-resources文で囲むことで処理終了時に自動でクローズされます。 このとき<code>SqlAgent</code>の中に保持する<code>Connection</code>や<code>Statement</code>も合わせてクローズされるため、クローズ漏れによるメモリリークを防ぐことができます。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create SqlAgent. SqlAgent implements AutoClosable.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (SqlAgent agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> config.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ここにSQL実行の処理を実装する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>以降の説明では<code>SqlAgent</code>に対する処理はtry-with-resources文の中で行っているものとします。</p></div><p><strong>uroboroSQL</strong>では実行するSQLをファイルパスに似た表現（以降 <em>SQL名</em> と呼ぶ）で指定します。 下の例ではクラスパス上にあるsqlフォルダ配下のddl/create_tables.sqlを指定してSQL更新処理を実行します。</p><p>更新処理を行う場合、<code>SqlAgent#update(&quot;[SQL名]&quot;)</code>メソッドを使用して<strong>SqlUpdate</strong>を取得しUpdateの実行を行います。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create table :  テーブル作成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ddl/create_tables&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// setup data : 初期データ挿入</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setup/insert_data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>ddl/create_tables.sqlで作成したテーブルの構成は以下になります。</p>`,17)),(i(),h(d,null,{default:n(()=>[r(e,{id:"mermaid-53",class:"mermaid",graph:"erDiagram%0A%20%20%20%20department%20%7C%7C--o%7C%20dept_emp%20%3A%20%22%22%0A%20%20%20%20employee%20%7C%7C--o%7C%20dept_emp%20%3A%20%22%22%0A%20%20%20%20department%20%7B%0A%20%20%20%20%20%20%20%20number%20dept_no%0A%20%20%20%20%20%20%20%20varchar%20dept_name%0A%20%20%20%20%20%20%20%20number%20lock_version%0A%20%20%20%20%7D%0A%20%20%20%20dept_emp%20%7B%0A%20%20%20%20%20%20%20%20number%20emp_no%20FK%0A%20%20%20%20%20%20%20%20number%20dept_no%20FK%0A%20%20%20%20%7D%0A%20%20%20%20employee%20%7B%0A%20%20%20%20%20%20%20%20number%20emp_no%0A%20%20%20%20%20%20%20%20varchar%20first_name%0A%20%20%20%20%20%20%20%20varchar%20last_name%0A%20%20%20%20%20%20%20%20date%20birth_date%0A%20%20%20%20%20%20%20%20char%20gender%0A%20%20%20%20%20%20%20%20number%20lock_version%0A%20%20%20%20%7D%0A"})]),fallback:n(()=>s[0]||(s[0]=[k(" Loading... ")])),_:1})),s[2]||(s[2]=a(`<h2 id="sqlファイルを使用した検索" tabindex="-1">SQLファイルを使用した検索 <a class="header-anchor" href="#sqlファイルを使用した検索" aria-label="Permalink to &quot;SQLファイルを使用した検索&quot;">​</a></h2><p>登録したデータを検索します。検索を行う際は、<code>SqlAgent#query(&quot;[SQL名]&quot;)</code>メソッドを使用して<strong>SqlQuery</strong>を取得し、バインドパラメータの設定や検索の実行を行います。</p><p><strong>SqlQuery</strong>では検索結果をいくつかの形式で取得することができます。</p><table tabindex="0"><thead><tr><th style="text-align:left;">メソッド</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">SqlQuery#collect()</td><td style="text-align:left;">検索結果を<code>List&lt;Map&gt;</code>の形式で取得する</td></tr><tr><td style="text-align:left;">SqlQuery#stream()</td><td style="text-align:left;">検索結果を<code>java.util.Stream</code>の形式で取得する</td></tr><tr><td style="text-align:left;">SqlQuery#resultSet()</td><td style="text-align:left;">検索結果の<code>ResultSet</code>を取得する</td></tr><tr><td style="text-align:left;">SqlQuery#first()</td><td style="text-align:left;">検索結果の１件目を取得する。取得できない場合は<code>RuntimeException</code>がスローされる</td></tr><tr><td style="text-align:left;">SqlQuery#findFirst()</td><td style="text-align:left;">検索結果の１件目を取得する。戻り値は<code>Optional</code></td></tr><tr><td style="text-align:left;">SqlQuery#one()</td><td style="text-align:left;">検索結果の１件目を取得する。取得できない場合、もしくは２件以上取得出来た場合は<code>RuntimeException</code>がスローされる</td></tr><tr><td style="text-align:left;">SqlQuery#findOne()</td><td style="text-align:left;">検索結果の１件目を取得する。戻り値は<code>Optional</code>。２件以上取得出来た場合は<code>RuntimeException</code>がスローされる</td></tr></tbody></table><p>以下のように呼び出します。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// no parameter : バインドパラメータ指定なしで検索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; deps1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;department/select_department&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// add bind parameter : バインドパラメータを設定して検索</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">List&lt;Map&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; deps2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">query</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;department/select_department&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deptNo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>ここで実行されるSQLは以下のようになっています。</p><ul><li>department/select_department.sql</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">select</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* _SQL_ID_ */</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept_no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dept_no</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dept_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">lock_version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    lock_version</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    department    dept</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*BEGIN*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*IF SF.isNotEmpty(deptNo)*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept_no</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*deptNo*/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*END*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*IF SF.isNotEmpty(deptName)*/</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">and</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dept_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  =</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /*deptName*/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sample&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*END*/</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*END*/</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li><code>/* _SQL_ID_ */</code> はSQLを特定するID(SQL_IDといいます)を付与するための予約語で、実行時にSQLファイルを特定するための文字列に変換されます。</li><li><code>/*IF*/ ... /*END*/</code>は条件分岐で、IFの後ろの評価式が<code>True</code>となる場合に<code>/*IF*/</code>と<code>/*END*/</code>で囲まれた部分が出力されます。</li><li><code>/*deptNo*/</code>はバインドパラメータで、実行時に<code>?</code>に変換され、SqlQueryに設定したパラメータがSQLへバインドされます。</li><li><code>/*deptNo*/</code>の後ろの<code>1</code>はテスト用データです。このようにテスト用データをSQL文に記述しておくことで、このSQLを SQLクライアントツールで実行する際にエラーにならずに文法の確認を行うことができます。</li></ul><p>SQLで使用できる構文については<a href="./../background/#_2waysql">2WaySQL</a>を参照してください。<br> また、検索のより詳しい説明は<a href="./../basics/sql-file-api.html#sqlによる検索-sqlagent-query-sqlagent-querywith">SQLによる検索</a>を参照してください。</p><h2 id="sqlファイルを使用した行挿入" tabindex="-1">SQLファイルを使用した行挿入 <a class="header-anchor" href="#sqlファイルを使用した行挿入" aria-label="Permalink to &quot;SQLファイルを使用した行挿入&quot;">​</a></h2><p>テーブルに対して行挿入を行うことも出来ます。 行挿入を行う際は、<code>SqlAgent#update(&quot;[SQL名]&quot;)</code>メソッドを使用して<strong>SqlUpdate</strong>を取得し、続けてバインドパラメータの設定やSQLの実行を行います。</p><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">agent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;department/insert_department&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;deptName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;production&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>ここで実行されるSQLは以下のようになっています。</p><ul><li>department/insert_department.sql</li></ul><div class="language-sql vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">insert</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> /* _SQL_ID_ */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">into</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    department</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    dept_name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   lock_version</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /*deptName*/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sample&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,   </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><code>SqlAgent#update(&quot;[SQL名]&quot;)</code>では実行するSQLの内容によって行挿入の他に行更新や行削除を行うことが出来ます。より詳しい説明は<a href="./../basics/sql-file-api.html#sqlによる更新-sqlagent-update-sqlagent-updatewith">SQLによる更新</a>を参照してください。</p>`,18))])}const q=t(E,[["render",o]]);export{F as __pageData,q as default};
