import{_ as n,C as p,c as r,o as d,a2 as e,j as t,a,G as i}from"./chunks/framework.DYH4TpTR.js";const q=JSON.parse('{"title":"SqlManager","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"SqlManager"}],["meta",{"name":"og:url","content":"/uroborosql-doc/configuration/sql-manager.html"}]]},"headers":[],"relativePath":"configuration/sql-manager.md","filePath":"configuration/sql-manager.md"}'),h={name:"configuration/sql-manager.md"},o={id:"spring-bootでの利用",tabindex:"-1"},g={id:"db種類毎のファイルパス切り替え",tabindex:"-1"},k={id:"sqlファイルの更新監視",tabindex:"-1"};function c(y,s,b,E,m,u){const l=p("Badge");return d(),r("div",null,[s[9]||(s[9]=e(`<h1 id="sqlmanager" tabindex="-1">SqlManager <a class="header-anchor" href="#sqlmanager" aria-label="Permalink to &quot;SqlManager&quot;">​</a></h1><p><code>SqlManager</code>はSQLファイルを管理するクラスです。２つのクラスが提供されています。</p><table tabindex="0"><thead><tr><th style="text-align:left;">クラス</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">SqlManagerImpl</td><td style="text-align:left;"><code>java.io</code>を利用したファイルアクセスを行う<code>SqlManager</code>クラス。</td></tr><tr><td style="text-align:left;">NioSqlManagerImpl</td><td style="text-align:left;"><code>java.nio</code>を利用したファイルアクセスを行う<code>SqlManager</code>クラス</td></tr></tbody></table><p>クラスの特徴比較</p><table tabindex="0"><thead><tr><th style="text-align:left;">特徴</th><th style="text-align:center;">SqlManagerImpl</th><th style="text-align:center;">NioSqlManagerImpl</th><th style="text-align:left;">補足</th></tr></thead><tbody><tr><td style="text-align:left;">SQLファイルルートフォルダ設定</td><td style="text-align:center;">〇</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">SQLファイルエンコーディング設定</td><td style="text-align:center;">〇</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">起動時のファイルキャッシュ</td><td style="text-align:center;">〇</td><td style="text-align:center;">△</td><td style="text-align:left;">NioSqlManagerImplはファイルパスのみキャッシュ</td></tr><tr><td style="text-align:left;">遅延ファイルキャッシュ</td><td style="text-align:center;">×</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">jarファイル中のSQL参照</td><td style="text-align:center;">〇</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">zipファイル中のSQL参照</td><td style="text-align:center;">×</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">カスタムファイルアクセス対応</td><td style="text-align:center;">×</td><td style="text-align:center;">〇</td><td style="text-align:left;"><code>java.nio.file</code>パッケージを使用</td></tr><tr><td style="text-align:left;">ファイル変更検知</td><td style="text-align:center;">×</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">DB種類毎のファイルパス切り替え</td><td style="text-align:center;">×</td><td style="text-align:center;">〇</td><td style="text-align:left;"></td></tr></tbody></table><p>利用用途に応じて<code>SqlManager</code>を選択してください。<br> SqlManagerクラスの切り替えはビルダーAPIで行うことが出来ます。指定しない場合の初期値は<code>SqlManagerImpl</code>になります。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // NioSqlManagerの指定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NioSqlManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="sqlファイルルートフォルダの設定" tabindex="-1">SQLファイルルートフォルダの設定 <a class="header-anchor" href="#sqlファイルルートフォルダの設定" aria-label="Permalink to &quot;SQLファイルルートフォルダの設定&quot;">​</a></h2><p><strong>uroboroSQL</strong>は初期設定ではクラスパス上にある<code>sql</code>フォルダ配下のSQLを読み込みます。<br> このSQLファイルルートフォルダは変更することができます。</p><p>SQLファイルルートフォルダの設定 (custom_sqlフォルダを指定)</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SqlManagerImplの場合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SQLファイルのルートフォルダの設定(custom_sqlフォルダをルートフォルダにする場合)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqlManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NioSqlManagerImplの場合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SQLファイルのルートフォルダの設定(custom_sqlフォルダをルートフォルダにする場合)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NioSqlManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom_sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,11)),t("h3",o,[s[0]||(s[0]=a("Spring bootでの利用 ")),i(l,{text:"NioSqlManagerImplのみ"}),s[1]||(s[1]=a()),s[2]||(s[2]=t("a",{class:"header-anchor",href:"#spring-bootでの利用","aria-label":'Permalink to "Spring bootでの利用 <Badge text="NioSqlManagerImplのみ" />"'},"​",-1))]),s[10]||(s[10]=e('<h4 id="v0-20-5まで" tabindex="-1">v0.20.5まで <a class="header-anchor" href="#v0-20-5まで" aria-label="Permalink to &quot;v0.20.5まで&quot;">​</a></h4><p>Spring boot利用時に実行可能jarにSQLファイルをリソースとして含める場合には、NioSqlManagerImplの場合、パスの指定を変更する必要があります。</p><p>例えば、<code>classpath:sql</code>にSQLファイルを配置している場合は、実行可能jarで起動する際にはアプリケーション設定を利用して <code>BOOT-INF/classes/sql</code> のように指定してください。 なお、v0.20.5までのバージョンでは、 <code>BOOT-INF/lib</code> 配下のjarに含まれるSQLの読み込みができませんので、v0.21.0以降へのバージョンアップを検討してください。</p><h4 id="v0-21-0以降" tabindex="-1">v0.21.0以降 <a class="header-anchor" href="#v0-21-0以降" aria-label="Permalink to &quot;v0.21.0以降&quot;">​</a></h4><p>v0.20.5までのように、実行可能jarかどうかで設定を変える必要はありません。<br> 実行可能jarかどうかに問わず、クラスパス配下のjarのリソースを探索するように変更されているため、 <code>BOOT-INF/classes</code> 、 <code>BOOT-INF/lib</code> のどちらに含まれているSQLファイルも読み込みが可能です。</p>',5)),t("h2",g,[s[3]||(s[3]=a("DB種類毎のファイルパス切り替え ")),i(l,{text:"NioSqlManagerImplのみ"}),s[4]||(s[4]=a()),s[5]||(s[5]=t("a",{class:"header-anchor",href:"#db種類毎のファイルパス切り替え","aria-label":'Permalink to "DB種類毎のファイルパス切り替え <Badge text="NioSqlManagerImplのみ" />"'},"​",-1))]),s[11]||(s[11]=e(`<p>後述する<a href="./dialect.html#dialect">Dialect</a>を利用して、１つのSQL名に対してDB種類毎にファイルパスを切り替えることが出来ます。</p><p>以下のようなファイル構成を例として説明します。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sql</span></span>
<span class="line"><span>  ├─employee</span></span>
<span class="line"><span>  │    └─select_employee.sql  -- Oracle, postgresql以外のDB用SQL</span></span>
<span class="line"><span>  ├─oracle</span></span>
<span class="line"><span>  │   └─employee</span></span>
<span class="line"><span>  │        └─select_employee.sql  -- oracle DB用SQL</span></span>
<span class="line"><span>  └─postgresql</span></span>
<span class="line"><span>      └─employee</span></span>
<span class="line"><span>           └─select_employee.sql  -- postgresql DB用SQL</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>SQL名として<code>employee/select_employee</code>を指定した場合、<br> Oracle DBの場合は<code>sql/oracle/employee/select_employee.sql</code>が読み込まれます。<br> 同様にPostgresql DBの場合は<code>sql/postgresql/employee/select_employee.sql</code>が読み込まれます。<br> DBに対するDialect用のフォルダがない場合は通常通り<code>sql/employee/select_employee.sql</code>が読み込まれます。</p><p>DB毎のフォルダ名</p><table tabindex="0"><thead><tr><th style="text-align:left;">DB名</th><th style="text-align:left;">フォルダ名</th></tr></thead><tbody><tr><td style="text-align:left;">H2 DB</td><td style="text-align:left;">h2</td></tr><tr><td style="text-align:left;">Microsoft SQL Server</td><td style="text-align:left;">mssql</td></tr><tr><td style="text-align:left;">MySQL</td><td style="text-align:left;">mysql</td></tr><tr><td style="text-align:left;">Oracle</td><td style="text-align:left;">oracle</td></tr><tr><td style="text-align:left;">Postgresql</td><td style="text-align:left;">postgresql</td></tr><tr><td style="text-align:left;">その他</td><td style="text-align:left;">default</td></tr></tbody></table>`,6)),t("h2",k,[s[6]||(s[6]=a("SQLファイルの更新監視 ")),i(l,{text:"NioSqlManagerImplのみ"}),s[7]||(s[7]=a()),s[8]||(s[8]=t("a",{class:"header-anchor",href:"#sqlファイルの更新監視","aria-label":'Permalink to "SQLファイルの更新監視 <Badge text="NioSqlManagerImplのみ" />"'},"​",-1))]),s[12]||(s[12]=e(`<p><code>NioSqlManagerImpl</code>では、最初にSQLファイルの呼び出しがあったタイミングでSQLファイルをロードし、メモリ内にSQLをキャッシュします。 ファイル監視を有効にしている場合はキャッシュしているファイルに対して<code>java.nio.file.WatchService</code>を利用したファイル監視を行い、 更新があった場合は自動的にリロードする仕組みを提供しています。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>ファイル監視を行うのはファイルシステム上のファイルについてのみでjarファイルやzipファイル内のファイルに対してはファイル監視は行いません。</p></div><p>アプリケーションの開発中など頻繁にSQLファイルを更新する場合に有効です。<br> ファイル監視の有無は<code>NioSqlManagerImpl</code>の設定時に行います。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NioSqlManagerImplの場合</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SQLファイル監視を有効化（初期値はfalse）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NioSqlManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,4))])}const x=n(h,[["render",c]]);export{q as __pageData,x as default};
