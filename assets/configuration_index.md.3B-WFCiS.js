import{_ as e,c as a,o as l,a2 as i}from"./chunks/framework.DYH4TpTR.js";const c=JSON.parse('{"title":"SqlConfigの生成","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"SqlConfigの生成"}],["meta",{"name":"og:url","content":"/uroborosql-doc/configuration/"}]]},"headers":[],"relativePath":"configuration/index.md","filePath":"configuration/index.md"}'),s={name:"configuration/index.md"};function n(r,t,d,o,h,g){return l(),a("div",null,t[0]||(t[0]=[i(`<h1 id="sqlconfigの生成" tabindex="-1">SqlConfigの生成 <a class="header-anchor" href="#sqlconfigの生成" aria-label="Permalink to &quot;SqlConfigの生成&quot;">​</a></h1><p><strong>uroboroSQL</strong>ではSqlConfigを生成するタイミングで各種の設定を行うことによりライブラリの動作や実行されるSQLを変更することができます。</p><p>シンプルな設定</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create SqlConfig H2DBのメモリDBに接続する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jdbc:h2:mem:test;DB_CLOSE_DELAY=-1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>UroboroSQL</code>ビルダー取得API（<code>UroboroSQL.UroboroSQLBuilder</code>）</p><table tabindex="0"><thead><tr><th style="text-align:left;">メソッド名</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">builder()</td><td style="text-align:left;">DB接続設定を行っていないビルダーを取得</td></tr><tr><td style="text-align:left;">builder(Connection conn)</td><td style="text-align:left;">引数で指定したコネクションでDB接続するビルダーを取得</td></tr><tr><td style="text-align:left;">builder(DataSource dataSource)</td><td style="text-align:left;">引数で指定したデータソースを使ってDB接続するビルダーを取得</td></tr><tr><td style="text-align:left;">builder(String url, String user, String password)</td><td style="text-align:left;">引数で指定したDB接続情報を元にDB接続するビルダーを取得</td></tr><tr><td style="text-align:left;">builder(String url, String user, String password, String schema)</td><td style="text-align:left;">引数で指定したDB接続情報を元にDB接続するビルダーを取得</td></tr></tbody></table><p>上記APIで取得した<code>UroboroSQL.UroboroSQLBuilder</code>に対して下記の設定クラスを設定することで、設定変更ができます。</p><table tabindex="0"><thead><tr><th style="text-align:left;">設定するクラス</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="./connection-supplier.html#connectionsupplier">ConnectionSupplier</a></td><td style="text-align:left;">JDBCコネクション提供クラス</td></tr><tr><td style="text-align:left;"><a href="./sql-context-factory.html#sqlcontextfactory">SqlContextFactory</a></td><td style="text-align:left;">SQLコンテキスト生成クラス</td></tr><tr><td style="text-align:left;"><a href="./sql-agent-factory.html#sqlagentfactory">SqlAgentFactory</a></td><td style="text-align:left;">SQL実行クラス(<code>SqlAgent</code>)生成クラス</td></tr><tr><td style="text-align:left;"><a href="./sql-manager.html#sqlmanager">SqlManager</a></td><td style="text-align:left;">SQLファイル管理クラス</td></tr><tr><td style="text-align:left;"><a href="./sql-filter-manager.html#sqlfiltermanager">SqlFilterManager</a></td><td style="text-align:left;">SQLフィルター管理クラス</td></tr><tr><td style="text-align:left;"><a href="./entity-handler.html#entityhandler">EntityHandler</a></td><td style="text-align:left;">エンティティ処理クラス</td></tr><tr><td style="text-align:left;"><a href="./dialect.html#dialect">Dialect</a></td><td style="text-align:left;">Database方言を表すクラス</td></tr><tr><td style="text-align:left;"><a href="https://docs.oracle.com/javase/jp/8/docs/api/java/time/Clock.html" target="_blank" rel="noreferrer">Clock</a></td><td style="text-align:left;">タイムゾーンを使用して現在の時点、日付および時間へのアクセスを提供するクロック</td></tr></tbody></table>`,8)]))}const f=e(s,[["render",n]]);export{c as __pageData,f as default};
