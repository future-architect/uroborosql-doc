import{_ as n,C as r,c as o,o as d,a2 as i,j as t,a as l,G as s}from"./chunks/framework.DYH4TpTR.js";const S=JSON.parse('{"title":"Dialect","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"Dialect"}],["meta",{"name":"og:url","content":"/uroborosql-doc/configuration/dialect.html"}]]},"headers":[],"relativePath":"configuration/dialect.md","filePath":"configuration/dialect.md"}'),p={name:"configuration/dialect.md"},g={tabindex:"0"},u={style:{"text-align":"left"}},c={style:{"text-align":"left"}},b={style:{"text-align":"left"}},f={style:{"text-align":"left"}};function y(k,e,h,x,m,D){const a=r("Badge");return d(),o("div",null,[e[32]||(e[32]=i(`<h1 id="dialect" tabindex="-1">Dialect <a class="header-anchor" href="#dialect" aria-label="Permalink to &quot;Dialect&quot;">​</a></h1><p>複数のDBを対象とするアプリケーションを作成する場合、DB毎のSQL文法の差異を吸収するため アプリケーションで対象DBを判定し実行するSQLファイルを切り替える、といった対応が必要になります。 <strong>uroboroSQL</strong>では、こういったDB毎のSQL文法の差異に対応するため、<code>Dialect</code>という仕組みを提供しています。<br><code>Dialect</code>は接続したDBから取得できる情報を元に自動で判別される為、通常は変更する必要はありません。</p><p>現在、標準で以下のDBに対するDialectが提供されています。</p><table tabindex="0"><thead><tr><th style="text-align:left;">DB名</th><th style="text-align:left;">Dialect</th></tr></thead><tbody><tr><td style="text-align:left;">H2 DB</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/H2Dialect.java" target="_blank" rel="noreferrer">H2Dialect</a></td></tr><tr><td style="text-align:left;">Microsoft SQL Server</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/MsSqlDialect.java" target="_blank" rel="noreferrer">MsSqlDialect</a></td></tr><tr><td style="text-align:left;">MySQL</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/MySqlDialect.java" target="_blank" rel="noreferrer">MySqlDialect</a></td></tr><tr><td style="text-align:left;">Oracle10g以下</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/Oracle10Dialect.java" target="_blank" rel="noreferrer">Oracle10Dialect</a></td></tr><tr><td style="text-align:left;">Oracle11g</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/Oracle11Dialect.java" target="_blank" rel="noreferrer">Oracle11Dialect</a></td></tr><tr><td style="text-align:left;">Oracle12c以上</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/Oracle12Dialect.java" target="_blank" rel="noreferrer">Oracle12Dialect</a></td></tr><tr><td style="text-align:left;">Postgresql</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/PostgresqlDialect.java" target="_blank" rel="noreferrer">PostgresqlDialect</a></td></tr><tr><td style="text-align:left;">その他</td><td style="text-align:left;"><a href="https://github.com/future-architect/uroborosql/blob/main/src/main/java/jp/co/future/uroborosql/dialect/DefaultDialect.java" target="_blank" rel="noreferrer">DefaultDialect</a></td></tr></tbody></table><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>該当するDBが見つからない場合は<code>DefaultDialect</code>が適用されます</p></div><h2 id="カスタムdialectの登録" tabindex="-1">カスタムDialectの登録 <a class="header-anchor" href="#カスタムdialectの登録" aria-label="Permalink to &quot;カスタムDialectの登録&quot;">​</a></h2><p>標準でサポートしている上記のDB以外に接続し、<code>DefaultDialect</code>と違う動作をさせたい場合は、対象のDBに対する<code>Dialect</code>クラスを作成して<strong>uroboroSQL</strong>に登録する必要があります。</p><p><code>Dialect</code>の登録には、Javaの <a href="https://docs.oracle.com/javase/jp/8/docs/api/java/util/ServiceLoader.html" target="_blank" rel="noreferrer">java.util.ServiceLoader</a>を利用します。</p><p>最初に対象のDB（ここではSQLiteとする）に対する<code>Dialect</code>クラスを作成します。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo.bar.dialect;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqliteDialect</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * コンストラクタ</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqliteDialect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SQLite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 対象DBの製品名を特定するための文字列を返す</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // supportsXXXメソッド、isXXXメソッド、getXXXメソッドを必要に応じて実装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><code>Dialect</code>インタフェースで提供すべきメソッドは以下になります。</p>`,11)),t("table",g,[e[31]||(e[31]=t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"メソッド名"),t("th",{style:{"text-align":"left"}},"戻り値"),t("th",{style:{"text-align":"left"}},"説明")])],-1)),t("tbody",null,[e[12]||(e[12]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsBulkInsert()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},[t("code",null,"BULK INSERT"),l("をサポートするかどうか")])],-1)),e[13]||(e[13]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsLimitClause()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},[t("code",null,"LIMIT"),l("句をサポートするかどうか")])],-1)),t("tr",null,[t("td",u,[e[0]||(e[0]=l("supportsOptimizerHints() ")),s(a,{text:"0.18.0+"})]),e[1]||(e[1]=t("td",{style:{"text-align":"left"}},"boolean",-1)),e[2]||(e[2]=t("td",{style:{"text-align":"left"}},"オプティマイザーヒントをサポートするかどうか",-1))]),e[14]||(e[14]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsNullValuesOrdering()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},[t("code",null,"SELECT"),l("句の"),t("code",null,"ORDER BY"),l("でNULL値の順序を指定できるか（NULLS FIRST/LAST）")])],-1)),e[15]||(e[15]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsIdentity()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"データベースのIDカラムを使用したID自動採番をサポートしているか")],-1)),e[16]||(e[16]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsSequence()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"データベースのシーケンスを使用したID自動採番をサポートしているか")],-1)),e[17]||(e[17]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsForUpdate()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"明示的な行ロックをサポートしているか")],-1)),e[18]||(e[18]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsForUpdateNoWait()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"明示的な行ロック（待機なし）をサポートしているか")],-1)),e[19]||(e[19]=t("tr",null,[t("td",{style:{"text-align":"left"}},"supportsForUpdateWait()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"明示的な行ロック（待機あり）をサポートしているか")],-1)),e[20]||(e[20]=t("tr",null,[t("td",{style:{"text-align":"left"}},"isRemoveTerminator()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},[l("実行するSQLに記述されている終端文字("),t("code",null,";"),l(")を削除するかどうか")])],-1)),e[21]||(e[21]=t("tr",null,[t("td",{style:{"text-align":"left"}},"isRollbackToSavepointBeforeRetry()"),t("td",{style:{"text-align":"left"}},"boolean"),t("td",{style:{"text-align":"left"}},"リトライする前に設定したSavepointまでロールバックするかどうか")],-1)),e[22]||(e[22]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getSequenceNextValSql(String sequenceName)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"シーケンスを取得するためのSQL文を取得する")],-1)),e[23]||(e[23]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getLimitClause(long limit, long offset)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},[t("code",null,"LIMIT"),l("句（と"),t("code",null,"OFFSET"),l("句）を取得する")])],-1)),e[24]||(e[24]=t("tr",null,[t("td",{style:{"text-align":"left"}},"escapeLikePattern(CharSequence pattern)"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},[t("code",null,"LIKE"),l("演算子のパターン文字列をエスケープする")])],-1)),e[25]||(e[25]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getJavaType(JDBCType jdbcType, String jdbcTypeName)"),t("td",{style:{"text-align":"left"}},"JavaType"),t("td",{style:{"text-align":"left"}},"引数で渡ってきたJavaTypeを変換したJavaTypeを取得する。（DB固有のJava型変換を行う場合に実装）")],-1)),e[26]||(e[26]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getJavaType(int jdbcType, String jdbcTypeName)"),t("td",{style:{"text-align":"left"}},"JavaType"),t("td",{style:{"text-align":"left"}},"引数で渡ってきたJavaTypeを変換したJavaTypeを取得する。（DB固有のJava型変換を行う場合に実装）")],-1)),e[27]||(e[27]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getDatabaseName()"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"データベースを判別するための文字列を取得する")],-1)),e[28]||(e[28]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getDatabaseType()"),t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"データベースの種別を表す名前を取得する")],-1)),e[29]||(e[29]=t("tr",null,[t("td",{style:{"text-align":"left"}},"getEscapeChar()"),t("td",{style:{"text-align":"left"}},"char"),t("td",{style:{"text-align":"left"}},[t("code",null,"LIKE"),l("句で指定するエスケープキャラクタを取得する")])],-1)),e[30]||(e[30]=t("tr",null,[t("td",{style:{"text-align":"left"}},"addForUpdateClause(StringBuilder sql, ForUpdateType forUpdateType, int waitSeconds)"),t("td",{style:{"text-align":"left"}},"StringBuilder"),t("td",{style:{"text-align":"left"}},[t("code",null,"FOR UPDATE"),l("句の文字列をSQLに追加する")])],-1)),t("tr",null,[t("td",c,[e[3]||(e[3]=l("addOptimizerHints(StringBuilder sql, List<String> hints) ")),s(a,{text:"0.18.0+"})]),e[4]||(e[4]=t("td",{style:{"text-align":"left"}},"StringBuilder",-1)),e[5]||(e[5]=t("td",{style:{"text-align":"left"}},"引数で渡したSQLにオプティマイザーヒントを付与する",-1))]),t("tr",null,[t("td",b,[e[6]||(e[6]=l("getModLiteral(final String dividend, final String divisor) ")),s(a,{text:"0.17.0+"})]),e[7]||(e[7]=t("td",{style:{"text-align":"left"}},"StringBuilder",-1)),e[8]||(e[8]=t("td",{style:{"text-align":"left"}},"乗除を行うためのSQL文字列を取得する",-1))]),t("tr",null,[t("td",f,[e[9]||(e[9]=l("getPessimisticLockingErrorCodes() ")),s(a,{text:"0.18.2+"})]),e[10]||(e[10]=t("td",{style:{"text-align":"left"}},"Set<String>",-1)),e[11]||(e[11]=t("td",{style:{"text-align":"left"}},"悲観ロックのErrorCode もしくは SqlStateを取得する",-1))])])]),e[33]||(e[33]=i(`<p><code>Dialect</code>インタフェースのデフォルト実装や<code>AbstractDialect</code>クラスを参考に、上記のメソッドのうち変更が必要なメソッドの実装を行ってください。</p><p>次に<strong>uroboroSQL</strong>を利用するアプリケーションのクラスパス上に以下のファイル名のファイルを作成します。</p><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>META-INF</span></span>
<span class="line"><span>  └─services</span></span>
<span class="line"><span>      └─jp.co.future.uroborosql.dialect.Dialect</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>最後に作成した<code>jp.co.future.uroborosql.dialect.Dialect</code>ファイルの中に作成した<code>Dialect</code>のクラス名（FQDN名）を記述します。</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.bar.dialect.SqliteDialect</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>アプリケーションで<code>jp.co.future.uroborosql.dialect.Dialect</code>が<code>ServiceLoader</code>経由で読み込まれれば登録した<code>SqliteDialect</code>が利用可能になります。</p>`,6))])}const E=n(p,[["render",y]]);export{S as __pageData,E as default};
