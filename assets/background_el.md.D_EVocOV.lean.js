import{_ as a,C as s,c as r,o,j as l,a2 as d,a as e,G as n}from"./chunks/framework.DYH4TpTR.js";const F=JSON.parse('{"title":"式言語","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"式言語"}],["meta",{"name":"og:url","content":"/uroborosql-doc/background/el.html"}]]},"headers":[],"relativePath":"background/el.md","filePath":"background/el.md"}'),u={name:"background/el.md"},g={tabindex:"0"},p={style:{"text-align":"left"}},f={style:{"text-align":"left"}},x={style:{"text-align":"left"}},b={style:{"text-align":"left"}},h={style:{"text-align":"left"}};function S(m,t,y,k,q,L){const i=s("Badge");return o(),r("div",null,[t[47]||(t[47]=l("h1",{id:"式言語",tabindex:"-1"},[e("式言語 "),l("a",{class:"header-anchor",href:"#式言語","aria-label":'Permalink to "式言語"'},"​")],-1)),t[48]||(t[48]=l("p",null,[l("strong",null,"uroboroSQL"),e("では、条件分岐に式言語を利用することができます。"),l("br"),e(" 利用可能な式言語は以下の２つになります。")],-1)),l("ul",null,[t[2]||(t[2]=l("li",null,[l("a",{href:"https://github.com/jkuhnert/ognl",target:"_blank",rel:"noreferrer"},"OGNL")],-1)),l("li",null,[t[0]||(t[0]=l("a",{href:"https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions",target:"_blank",rel:"noreferrer"},"Spring Expression Language(SpEL)",-1)),t[1]||(t[1]=e()),n(i,{text:"0.18.0+"})])]),t[49]||(t[49]=d("",47)),l("table",g,[t[46]||(t[46]=l("thead",null,[l("tr",null,[l("th",{style:{"text-align":"left"}},"メソッド名"),l("th",{style:{"text-align":"left"}},"戻り値"),l("th",{style:{"text-align":"left"}},"説明")])],-1)),l("tbody",null,[l("tr",null,[t[10]||(t[10]=l("td",{style:{"text-align":"left"}},"SF.isEmpty(Object obj)",-1)),t[11]||(t[11]=l("td",{style:{"text-align":"left"}},"boolean",-1)),l("td",p,[t[3]||(t[3]=e("指定したオブジェクトが空であること判定する。指定したオブジェクトがOptional型の場合は、その中身を評価する。")),t[4]||(t[4]=l("br",null,null,-1)),n(i,{text:"1.0.0+"}),t[5]||(t[5]=e(" からは文字列以外のオブジェクトについても評価できるように仕様が変更されている。")),t[6]||(t[6]=l("br",null,null,-1)),t[7]||(t[7]=e("判定の詳細は")),t[8]||(t[8]=l("a",{href:"https://www.javadoc.io/doc/jp.co.future/uroborosql/latest/jp/co/future/uroborosql/utils/SqlFunction.html",target:"_blank",rel:"noreferrer"},"Javadoc",-1)),t[9]||(t[9]=e("のisEmptyメソッドを参照のこと。"))])]),l("tr",null,[t[19]||(t[19]=l("td",{style:{"text-align":"left"}},"SF.isNotEmpty(Object obj)",-1)),t[20]||(t[20]=l("td",{style:{"text-align":"left"}},"boolean",-1)),l("td",f,[t[12]||(t[12]=e("指定したオブジェクトが空でないことを判定する。指定したオブジェクトがOptional型の場合は、その中身を評価する。")),t[13]||(t[13]=l("br",null,null,-1)),n(i,{text:"1.0.0+"}),t[14]||(t[14]=e(" からは文字列以外のオブジェクトについても評価できるように仕様が変更されている。")),t[15]||(t[15]=l("br",null,null,-1)),t[16]||(t[16]=e("判定の詳細は")),t[17]||(t[17]=l("a",{href:"https://www.javadoc.io/doc/jp.co.future/uroborosql/latest/jp/co/future/uroborosql/utils/SqlFunction.html",target:"_blank",rel:"noreferrer"},"Javadoc",-1)),t[18]||(t[18]=e("のisNotEmptyメソッドを参照のこと。"))])]),t[30]||(t[30]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.isBlank(Object obj)"),l("td",{style:{"text-align":"left"}},"boolean"),l("td",{style:{"text-align":"left"}},"指定したオブジェクトの文字列表現が空、もしくは空白であること判定する")],-1)),t[31]||(t[31]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.isNotBlank(Object obj)"),l("td",{style:{"text-align":"left"}},"boolean"),l("td",{style:{"text-align":"left"}},"指定したオブジェクトの文字列表現が空、もしくは空白でないこと判定する")],-1)),t[32]||(t[32]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.trim(Object obj)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は結果もnullとなる")],-1)),t[33]||(t[33]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.trimToEmpty(Object obj)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の前後の空白を除去する。nullを渡した場合は空文字となる")],-1)),t[34]||(t[34]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.left(String str, int len)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の先頭から指定した文字数の文字列を取得する")],-1)),t[35]||(t[35]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.right(String str, int len)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の最後から指定した文字数の文字列を取得する")],-1)),t[36]||(t[36]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.mid(String str, int pos, int len)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の指定した位置から指定した文字数の文字列を取得する")],-1)),t[37]||(t[37]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の末尾に空白を埋めて指定された長さにする")],-1)),t[38]||(t[38]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.rightPad(String str, int size, char padChar)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の末尾に指定した埋め込み文字を埋めて指定された長さにする")],-1)),t[39]||(t[39]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の先頭に空白を埋めて指定された長さにする")],-1)),t[40]||(t[40]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.leftPad(String str, int size, char padChar)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の先頭に指定した埋め込み文字を埋めて指定された長さにする")],-1)),t[41]||(t[41]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.split(String str)"),l("td",{style:{"text-align":"left"}},"String[]"),l("td",{style:{"text-align":"left"}},"文字列を空白で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),t[42]||(t[42]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.split(String str, char separatorChar)"),l("td",{style:{"text-align":"left"}},"String[]"),l("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),t[43]||(t[43]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.split(String str, String separatorChars, int max)"),l("td",{style:{"text-align":"left"}},"String[]"),l("td",{style:{"text-align":"left"}},"文字列を指定した区切り文字で区切って配列に格納する。nullが入力された場合はnullを返す")],-1)),t[44]||(t[44]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.capitalize(String str)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の先頭文字を大文字にする")],-1)),t[45]||(t[45]=l("tr",null,[l("td",{style:{"text-align":"left"}},"SF.uncapitalize(String str)"),l("td",{style:{"text-align":"left"}},"String"),l("td",{style:{"text-align":"left"}},"文字列の先頭を小文字にする")],-1)),l("tr",null,[t[22]||(t[22]=l("td",{style:{"text-align":"left"}},"SF.startsWith(CharSequence text)",-1)),t[23]||(t[23]=l("td",{style:{"text-align":"left"}},"String",-1)),l("td",x,[t[21]||(t[21]=e("指定されたテキストで始まるLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),l("tr",null,[t[25]||(t[25]=l("td",{style:{"text-align":"left"}},"SF.contains(CharSequence text)",-1)),t[26]||(t[26]=l("td",{style:{"text-align":"left"}},"String",-1)),l("td",b,[t[24]||(t[24]=e("指定されたテキストを含むLIKE句用の検索文字列を生成する。引数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])]),l("tr",null,[t[28]||(t[28]=l("td",{style:{"text-align":"left"}},"SF.endsWith(CharSequence text)",-1)),t[29]||(t[29]=l("td",{style:{"text-align":"left"}},"String",-1)),l("td",h,[t[27]||(t[27]=e("指定されたテキストで終わるLIKE句用の検索文字列を生成する。数のテキストはエスケープ処理される ")),n(i,{text:"0.12.0+"})])])])])])}const N=a(u,[["render",S]]);export{F as __pageData,N as default};
