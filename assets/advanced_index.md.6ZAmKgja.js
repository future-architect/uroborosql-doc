import{C as n,c as l,o as p,a2 as t,j as a,a as e,G as r,k as d,g as h}from"./chunks/framework.DYH4TpTR.js";const k="/uroborosql-doc/assets/cobertura.CekyfXBT.png",o="/uroborosql-doc/assets/html_coverage_report_summary.Tyh867tK.png",c="/uroborosql-doc/assets/html_coverage_report.RQGV3Ebh.png",g=["href"],m=JSON.parse('{"title":"高度な操作","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"高度な操作"}],["meta",{"name":"og:url","content":"/uroborosql-doc/advanced/"}]]},"headers":[],"relativePath":"advanced/index.md","filePath":"advanced/index.md"}'),E={name:"advanced/index.md"},x=Object.assign(E,{setup(u){return(b,s)=>{const i=n("Badge");return p(),l("div",null,[s[7]||(s[7]=t(`<h1 id="高度な操作" tabindex="-1">高度な操作 <a class="header-anchor" href="#高度な操作" aria-label="Permalink to &quot;高度な操作&quot;">​</a></h1><h2 id="sqlファイルの解決ルール" tabindex="-1">SQLファイルの解決ルール <a class="header-anchor" href="#sqlファイルの解決ルール" aria-label="Permalink to &quot;SQLファイルの解決ルール&quot;">​</a></h2><h3 id="複数フォルダの指定" tabindex="-1">複数フォルダの指定 <a class="header-anchor" href="#複数フォルダの指定" aria-label="Permalink to &quot;複数フォルダの指定&quot;">​</a></h3><p>sqlフォルダはクラスパスから参照することが出来れば複数指定することが出来ます。</p><ul><li><code>src/test/resources</code>, <code>src/main/resources</code> の順にクラスパスに指定されている場合</li></ul><div class="language-txt vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>src</span></span>
<span class="line"><span>    ├─main</span></span>
<span class="line"><span>    │   └─resources</span></span>
<span class="line"><span>    │       └─sql</span></span>
<span class="line"><span>    │           ├─department</span></span>
<span class="line"><span>    │           │    ├─insert_department.sql</span></span>
<span class="line"><span>    │           │    └─select_department.sql</span></span>
<span class="line"><span>    │           └─employee</span></span>
<span class="line"><span>    │                ├─insert_employee.sql</span></span>
<span class="line"><span>    │                └─select_employee.sql</span></span>
<span class="line"><span>    └─test</span></span>
<span class="line"><span>        └─resources</span></span>
<span class="line"><span>            └─sql</span></span>
<span class="line"><span>                ├─department</span></span>
<span class="line"><span>                │    ├─update_department.sql</span></span>
<span class="line"><span>                │    └─delete_department.sql</span></span>
<span class="line"><span>                └─employee</span></span>
<span class="line"><span>                     ├─update_employee.sql</span></span>
<span class="line"><span>                     └─select_employee.sql</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>SQLファイルのパスが重複している場合、クラスパス上で先にあるフォルダのSQLファイルが使用されます。</p></div><p>上記のフォルダ構成の場合、<code>src/main/resources/sql/employee/select_employee.sql</code> と <code>src/test/resources/sql/employee/select_employee.sql</code> がともに <code>employee/select_employee</code> として解決されますが、クラスパスとして<code>src/test/resources</code>が先に指定されているため、<code>src/test/resources/sql/employee/select_employee.sql</code>が使用されます。</p><h3 id="jarファイルの指定" tabindex="-1">jarファイルの指定 <a class="header-anchor" href="#jarファイルの指定" aria-label="Permalink to &quot;jarファイルの指定&quot;">​</a></h3><p>SQLファイルはjarの中にリソースとして含めることもできます。<br> その場合、リソースのルート直下のsqlフォルダをルートフォルダとした相対パスでSQLファイルを指定することができます。 SQLファイルのルートフォルダ（初期値：sql)は変更することができます。<br> 変更方法の詳細は <a href="./../configuration/sql-manager.html#sqlファイルルートフォルダの設定">SQLファイルルートフォルダの設定</a> を参照してください。</p><h3 id="dialectによるファイルパスの切り替え" tabindex="-1">Dialectによるファイルパスの切り替え <a class="header-anchor" href="#dialectによるファイルパスの切り替え" aria-label="Permalink to &quot;Dialectによるファイルパスの切り替え&quot;">​</a></h3><p><code>NioSqlManagerImpl</code>を<code>SqlManager</code>として指定した場合、Dialectによるファイルパスの切り替えが出来るようになります。 詳しくは<a href="./../configuration/sql-manager.html#db種類毎のファイルパス切り替え">DB種類毎のファイルパス切り替え</a>を参照してください。</p><h2 id="postgresqlのトランザクション内sqlエラー対応" tabindex="-1">PostgreSQLのトランザクション内SQLエラー対応 <a class="header-anchor" href="#postgresqlのトランザクション内sqlエラー対応" aria-label="Permalink to &quot;PostgreSQLのトランザクション内SQLエラー対応&quot;">​</a></h2><p>PostgreSQLでは、１つのトランザクション内でSQLエラーが発生した場合、後続するSQL文はすべて無条件でエラーとなります。 この状態はトランザクションに対して<code>commit</code>もしくは<code>rollback</code>を実行するまで続きます。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>エラーが発生している状態で<code>commit</code>を実行しても実際には<code>rollback</code>されます</p></div><p>これはPostgreSQL固有の動作であり、通常は問題ない動作なのですが、テーブルロックエラーなどリトライ処理を行うケースで問題になります。 （SQLのリトライについては<a href="./../configuration/sql-agent-factory.html#sql実行のリトライ">SQL実行のリトライ</a>を参照）<br><strong>uroboroSQL</strong>ではリトライ指定のあるSQL実行、かつ、PostgreSQL（より正確には<code>Dialect#isRollbackToSavepointBeforeRetry()</code>が<code>true</code>の場合）の場合にsavepointを使った部分ロールバックを行うことで この問題に対応しています。<br> 具体的にはリトライ指定のあるSQL実行、かつ、PostgreSQLの場合はSQL実行の直前にリトライ用のsavepointを設定し、SQL実行が成功すればsavepointの解放、SQL実行が失敗した場合はリトライ用のsavepointまでロールバックを行います。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>リトライ指定のないSQL実行の場合はsavepointの設定は行われません。</p></div><p>リトライ指定のないSQLで上記と同様の動作を行う場合は以下のように実装してください。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">required</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// トランザクション開始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">savepointScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // savepointScopeの開始</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example/insert_product&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;product_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">savepointScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 後続処理</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;department/insert_department&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dept_no&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dept_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sales&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ・・・</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="更新処理の委譲-sqlcontext-setupdatedelegate" tabindex="-1">更新処理の委譲（SqlContext#setUpdateDelegate()） <a class="header-anchor" href="#更新処理の委譲-sqlcontext-setupdatedelegate" aria-label="Permalink to &quot;更新処理の委譲（SqlContext#setUpdateDelegate()）&quot;">​</a></h2><p>Webアプリケーションを作成する場合、以下のような流れで画面からの登録処理を行うことがあります。</p><ol><li>データ検証（データの存在有無や重複チェック、データの整合性チェックなど）</li><li>登録、更新処理</li></ol><p>その際、より厳密に一度 1. のデータ検証だけを実施し、問題がなければ再度1. と 2. を合わせて処理を行うことがあります。<br> この場合 1. のデータ検証だけを行うモードかどうかをフロントエンドから渡し、それによって 1. と 2. を実行するか分岐することになります。</p><ul><li>個別処理での実装イメージ</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isCheckMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. データ検証（データ検証用のQuery発行）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 1. データ検証（データ検証用のQuery発行）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  validateData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 2. 登録、更新処理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  createData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>このような処理を個別実装で行うと実装漏れが起こりやすく、テストも大変になります。<br> このような場合に更新処理の委譲を利用することで、データ検証を行うモードの場合には更新処理をスキップする、といった動作を一律指定することが出来ます。</p><p>更新処理の委譲を利用する場合、SqlContextに委譲用のFunctionを指定します。</p><ul><li>setUpdateDelegate 実装例</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlUpdate update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example/update_product&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;product_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jan_code&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1234567890123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;product_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlContext ctx </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> update.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpdateDelegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新の委譲処理。登録する Function は 引数として SqlContext を受取り、int（更新件数）を返却する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">update.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// SQLは発行されず、代わりに委譲用のFunctionが実行され戻り値 2 が返る</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>SqlContext#setUpdateDelegate() は通常 <a href="./../configuration/sql-context-factory.html#自動パラメータバインド関数の設定-sqlcontextfactory-addqueryautoparameterbinder-addupdateautoparameterbinder">自動パラメータバインド関数の設定</a> と合わせて利用します。</p><ul><li>SqlContextFactoryの設定例</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SqlContextFactoryの設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlContextFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqlContextFactoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // update/batch/procedure用自動パラメータバインド関数の登録</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addUpdateAutoParameterBinder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((ctx) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (チェックモードなら) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setUpdateDelegate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ul><li>setUpdateDelegateを利用した実装イメージ</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1. データ検証（データ検証用のQuery発行）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validateData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2. 登録、更新処理　（チェックモードの場合はsetUpdateDelegateにより更新SQLの発行が行われない）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="sqlカバレッジ-uroborosql-sql-coverage" tabindex="-1">SQLカバレッジ ( <code>uroborosql.sql.coverage</code> ) <a class="header-anchor" href="#sqlカバレッジ-uroborosql-sql-coverage" aria-label="Permalink to &quot;SQLカバレッジ ( \`uroborosql.sql.coverage\` )&quot;">​</a></h2><p>これまでアプリケーション上の条件分岐はカバレッジツールを利用して網羅率を確認することができました。<br> しかし、SQL文の条件分岐は実際にその分岐が通っているかどうかを確認する手段がなく、リリース後に初めて通った条件で不具合を発生させることがありました。<br> この問題を解決するために<strong>uroboroSQL</strong>では、SQL文の条件分岐を集計してカバレッジレポートを行う機能を提供します。</p><p>SQLカバレッジは<strong>uroboroSQL</strong>を利用するアプリケーションの起動時オプションに</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Duroborosql.sql.coverage=true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>を追加することで有効になります。<br> SQLカバレッジを有効にするとアプリケーションが実行している間に実行されるSQLについて、カバレッジ情報が収集されます。<br> カバレッジ情報の収集結果は標準では<code>target/coverage/sql-cover.xml</code>に出力されます。<br> このファイルの場所や名前を変更したい場合は、起動時オプションに</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Duroborosql.sql.coverage.file=[</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">出力ファイルパス</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>を指定してください。</p><p>出力された<code>sql-cover.xml</code>をJenkinsのCobertura pluginなどのXMLレポートとして読み込むとSQLファイルのカバレッジレポートが参照できるようになります。</p><p><img src="`+k+'" alt="カバレッジレポート例" title="Jenkins Cobertura Report"></p>',43)),a("p",null,[s[0]||(s[0]=e("また")),r(i,{text:"0.2.0+",vertical:"middle"}),s[1]||(s[1]=e("より、")),s[2]||(s[2]=a("strong",null,"uroboroSQL",-1)),s[3]||(s[3]=e("のみでHTMLレポートを出力することができるようになりました。")),s[4]||(s[4]=a("br",null,null,-1)),s[5]||(s[5]=e(" 起動時オプションに"))]),s[8]||(s[8]=t('<div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Duroborosql.sql.coverage=jp.co.future.uroborosql.coverage.reports.html.HtmlReportCoverageHandler</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>を指定することで本機能を利用することができます。</p><p>カバレッジ情報はデフォルトでは<code>target/coverage/sql</code>フォルダ配下に出力されます。<br> 出力先フォルダを変更した場合は、起動時オプションに</p><div class="language-md vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Duroborosql.sql.coverage.dir=[</span><span style="--shiki-light:#032F62;--shiki-light-text-decoration:underline;--shiki-dark:#DBEDFF;--shiki-dark-text-decoration:underline;">出力フォルダパス</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>を指定してください。</p><p>出力されたレポートのサンプルは下記を参照してください。</p><h3 id="サマリーページ" tabindex="-1">サマリーページ <a class="header-anchor" href="#サマリーページ" aria-label="Permalink to &quot;サマリーページ&quot;">​</a></h3><p><img src="'+o+'" alt="HTML Coverage Report Summary"></p><h3 id="詳細ページ" tabindex="-1">詳細ページ <a class="header-anchor" href="#詳細ページ" aria-label="Permalink to &quot;詳細ページ&quot;">​</a></h3><p><img src="'+c+'" alt="HTML Coverage Report"></p>',10)),a("p",null,[a("a",{href:d(h)("/sample/testReport/index.html"),target:"_blank",style:{"font-size":"20px"}},s[6]||(s[6]=[a("i",{class:"fa fa-external-link","aria-hidden":"true"},null,-1),e("出力サンプル")]),8,g)]),s[9]||(s[9]=t('<h2 id="ログ出力" tabindex="-1">ログ出力 <a class="header-anchor" href="#ログ出力" aria-label="Permalink to &quot;ログ出力&quot;">​</a></h2><p><strong>uroboroSQL</strong>ではログ出力ライブラリとしてSLF4Jを使用しています。SLF4Jの詳細は<a href="https://www.slf4j.org/" target="_blank" rel="noreferrer">公式のドキュメント</a>を参照して下さい。<br><strong>uroboroSQL</strong>で出力されるログ内容は以下表の通りです。</p><table tabindex="0"><thead><tr><th style="text-align:center;">クラス名</th><th style="text-align:center;">TRACE</th><th style="text-align:center;">DEBUG</th><th style="text-align:center;">INFO</th><th style="text-align:center;">WARN</th><th style="text-align:center;">ERROR</th><th style="text-align:center;">FATAL</th></tr></thead><tbody><tr><td style="text-align:center;">AbstractAgent</td><td style="text-align:center;">変換前SQL</td><td style="text-align:center;">実行時SQL</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">DebugSqlFilter</td><td style="text-align:center;">-</td><td style="text-align:center;">パラメーター/<br>対象データ数/<br>実行結果</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">IfNode</td><td style="text-align:center;">-</td><td style="text-align:center;">評価式/<br>判定結果/<br>パラメーター</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">Parameter</td><td style="text-align:center;">-</td><td style="text-align:center;">パラメーターの設定</td><td style="text-align:center;">-</td><td style="text-align:center;">サブパラメーター値にNULLを設定</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SecretColumnSqlFilter</td><td style="text-align:center;">-</td><td style="text-align:center;">バッチ処理追加件数/<br>ストアドプロシージャ出力パラメーター</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SqlAgent</td><td style="text-align:center;">ステートメントのクローズ</td><td style="text-align:center;">処理実行アナウンス/<br>リトライ実行アナウンス/<br>SQL実行時間</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">エラーメッセージ</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SqlContext</td><td style="text-align:center;">-</td><td style="text-align:center;">バッチ処理追加件数/<br>ストアドプロシージャ出力パラメーター</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SqlContextFactory</td><td style="text-align:center;">-</td><td style="text-align:center;">定数パラメーター</td><td style="text-align:center;">-</td><td style="text-align:center;">定数名の重複</td><td style="text-align:center;">エラーメッセージ</td><td style="text-align:center;">-</td></tr><tr><td style="text-align:center;">SqlLoader</td><td style="text-align:center;">SQL定義ファイルの読み込み完了</td><td style="text-align:center;">SQL定義ファイルの読み込み開始/読み込み中</td><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;">デフォルトファイルパスの設定/<br>デフォルト拡張子/<br>空のSQLキャッシュの返却</td><td style="text-align:center;">-</td></tr></tbody></table><h2 id="システムプロパティ" tabindex="-1">システムプロパティ <a class="header-anchor" href="#システムプロパティ" aria-label="Permalink to &quot;システムプロパティ&quot;">​</a></h2><p><strong>uroboroSQL</strong>ではシステムプロパティを指定することで動作を変更することができます。</p><table tabindex="0"><thead><tr><th style="text-align:left;">プロパティ名</th><th style="text-align:left;">説明</th><th style="text-align:left;">初期値</th></tr></thead><tbody><tr><td style="text-align:left;">uroborosql.sql.coverage</td><td style="text-align:left;">SQLカバレッジを出力するかどうかのフラグ。<code>true</code>の場合はSQLカバレッジを出力します。<br>文字列として<code>jp.co.future.uroborosql.coverage.CoverageHandler</code>インタフェースの<br>実装クラスが設定された場合はそのクラスを利用してカバレッジの収集を行います。</td><td style="text-align:left;">なし</td></tr><tr><td style="text-align:left;">uroborosql.sql.coverage.file</td><td style="text-align:left;">指定されたPATH(ファイル)に SQLカバレッジのCobertura形式のxmlレポートを出力します。</td><td style="text-align:left;">./target/coverage/sql-cover.xml</td></tr><tr><td style="text-align:left;">uroborosql.sql.coverage.dir</td><td style="text-align:left;">指定されたPATH(フォルダ)にSQLカバレッジのHTMLレポートを出力します。</td><td style="text-align:left;">./target/coverage/sql</td></tr><tr><td style="text-align:left;">uroborosql.entity.cache.size</td><td style="text-align:left;">Entityクラス情報のキャッシュサイズを指定します。<br>キャッシュサイズを超えるEntityクラスの読み込みがあった場合は古い情報から破棄されます。</td><td style="text-align:left;">30</td></tr><tr><td style="text-align:left;">uroborosql.use.qualified.table.name</td><td style="text-align:left;">DAOインタフェースで生成するSQLにスキーマ名で修飾したテーブル名を出力(<code>true</code>)するか、テーブル名のみを出力(<code>false</code>)するかを指定</td><td style="text-align:left;">true</td></tr></tbody></table>',6))])}}});export{m as __pageData,x as default};
