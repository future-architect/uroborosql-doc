import{_ as t,c as a,o as i,a2 as l}from"./chunks/framework.DYH4TpTR.js";const o=JSON.parse('{"title":"SqlFilterManager","description":"","frontmatter":{"head":[["meta",{"name":"og:title","content":"SqlFilterManager"}],["meta",{"name":"og:url","content":"/uroborosql-doc/configuration/sql-filter-manager.html"}]]},"headers":[],"relativePath":"configuration/sql-filter-manager.md","filePath":"configuration/sql-filter-manager.md"}'),e={name:"configuration/sql-filter-manager.md"};function n(r,s,p,h,d,k){return i(),a("div",null,s[0]||(s[0]=[l(`<h1 id="sqlfiltermanager" tabindex="-1">SqlFilterManager <a class="header-anchor" href="#sqlfiltermanager" aria-label="Permalink to &quot;SqlFilterManager&quot;">​</a></h1><h2 id="sqlフィルター" tabindex="-1">SQLフィルター <a class="header-anchor" href="#sqlフィルター" aria-label="Permalink to &quot;SQLフィルター&quot;">​</a></h2><p><strong>uroboroSQL</strong>ではSQLの実行を行う一連の処理の流れの中にいくつかの拡張ポイントを設けており、この拡張ポイントに処理を追加することで、共通的なSQL文の加工や検索結果の記録といった様々な拡張を行うことができるように設計されています。</p><p>SQL処理の拡張はSqlFilterインタフェースを実装したクラスを作成し登録することで行います。<br> SqlFilterインタフェースには以下のメソッドが定義されています。</p><table tabindex="0"><thead><tr><th style="text-align:left;">SqlFilterメソッド名</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">initialize</td><td style="text-align:left;">SqlFilterの初期化を行う</td></tr><tr><td style="text-align:left;">doTransformSql</td><td style="text-align:left;">変換前のSQLに対して加工を行う</td></tr><tr><td style="text-align:left;">doParameter</td><td style="text-align:left;">バインドパラメータの加工を行う</td></tr><tr><td style="text-align:left;">doOutParameter</td><td style="text-align:left;">ストアドプロシージャのOutParameterの加工を行う</td></tr><tr><td style="text-align:left;">doPreparedStatement</td><td style="text-align:left;">PreparedStatementの加工を行う</td></tr><tr><td style="text-align:left;">doCallableStatement</td><td style="text-align:left;">CallableStatementの加工を行う</td></tr><tr><td style="text-align:left;">doQuery</td><td style="text-align:left;">検索処理結果の加工を行う</td></tr><tr><td style="text-align:left;">doUpdate</td><td style="text-align:left;">更新処理結果の加工を行う</td></tr><tr><td style="text-align:left;">doBatch</td><td style="text-align:left;">バッチ処理結果の加工を行う</td></tr><tr><td style="text-align:left;">doProcedure</td><td style="text-align:left;">Procedure呼出処理結果の加工を行う</td></tr></tbody></table><p><strong>uroboroSQL</strong>には標準でいくつかのSqlFilterの実装が含まれています。</p><table tabindex="0"><thead><tr><th style="text-align:left;">クラス名</th><th style="text-align:left;">説明</th></tr></thead><tbody><tr><td style="text-align:left;">jp.co.future.uroborosql.filter.DebugSqlFilter</td><td style="text-align:left;">SqlFilterの動作を理解するためのサンプル。各拡張ポイントで呼び出されるメソッドでログを出力します。</td></tr><tr><td style="text-align:left;">jp.co.future.uroborosql.filter.DumpResultSqlFilter</td><td style="text-align:left;">検索結果を表形式でログ出力するSQLフィルター。SqlREPLで使用しています。</td></tr><tr><td style="text-align:left;">jp.co.future.uroborosql.filter.WrapContextSqlFilter</td><td style="text-align:left;">SQL文の前後に文字列を追加するSQLフィルター。ページングや検索件数の上限設定に使用します。</td></tr><tr><td style="text-align:left;">jp.co.future.uroborosql.filter.SecretColumnSqlFilter</td><td style="text-align:left;">指定した特定のカラムのみ暗号化を行うSQLフィルター。パスワードや機密情報を暗号化してDBに格納するために使用します。</td></tr><tr><td style="text-align:left;">jp.co.future.uroborosql.filter.AuditLogSqlFilter</td><td style="text-align:left;">監査記録を取得するためのSQLフィルター。</td></tr></tbody></table><p>SQLフィルターを利用するためには、SqlConfig生成時にSqlFilterManagerの設定を追加して利用するSQLフィルターの登録を行ってください。<br> SQLフィルターは複数登録することができます。複数登録した場合は登録した順にSQLフィルターが処理されます。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// create SqlConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SqlConfig config </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UroboroSQL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // SqlFilterManagerの設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSqlFilterManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SqlFilterManagerImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // DumpResultSqlFilterの登録</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSqlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DumpResultSqlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // WrapContextSqlFilterの登録</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addSqlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WrapContextSqlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;LIMIT /*$maxRowCount*/10 OFFSET /*$startRowIndex*/0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &quot;.*FOR</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">sUPDATE.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>独自にSqlFilterを作成する場合は、<code>jp.co.future.uroborosql.filter.AbstractSqlFilter</code>を継承し、必要に応じてメソッドをオーバーライドしてください。</p><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomSqlFilter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AbstractSqlFilter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 途中略</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Override</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ResultSet </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SqlContext </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sqlContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PreparedStatement </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">preparedStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ResultSet </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">resultSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // フィルター処理の実装</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>`,11)]))}const E=t(e,[["render",n]]);export{o as __pageData,E as default};
